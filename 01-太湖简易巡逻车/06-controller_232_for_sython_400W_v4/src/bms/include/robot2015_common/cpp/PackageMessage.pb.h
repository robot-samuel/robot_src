// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PackageMessage.proto

#ifndef PROTOBUF_PackageMessage_2eproto__INCLUDED
#define PROTOBUF_PackageMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PackageMessage_2eproto();
void protobuf_AssignDesc_PackageMessage_2eproto();
void protobuf_ShutdownFile_PackageMessage_2eproto();

class PackageMessage;
class PackageMessage_Call;
class PackageMessage_Result;

// ===================================================================

class PackageMessage_Call : public ::google::protobuf::Message {
 public:
  PackageMessage_Call();
  virtual ~PackageMessage_Call();

  PackageMessage_Call(const PackageMessage_Call& from);

  inline PackageMessage_Call& operator=(const PackageMessage_Call& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageMessage_Call& default_instance();

  void Swap(PackageMessage_Call* other);

  // implements Message ----------------------------------------------

  PackageMessage_Call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageMessage_Call& from);
  void MergeFrom(const PackageMessage_Call& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Service = 1;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 1;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  inline void set_allocated_service(::std::string* service);

  // required string Function = 2;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 2;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const char* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  inline void set_allocated_function(::std::string* function);

  // repeated bytes Parameters = 3;
  inline int parameters_size() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 3;
  inline const ::std::string& parameters(int index) const;
  inline ::std::string* mutable_parameters(int index);
  inline void set_parameters(int index, const ::std::string& value);
  inline void set_parameters(int index, const char* value);
  inline void set_parameters(int index, const void* value, size_t size);
  inline ::std::string* add_parameters();
  inline void add_parameters(const ::std::string& value);
  inline void add_parameters(const char* value);
  inline void add_parameters(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& parameters() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parameters();

  // @@protoc_insertion_point(class_scope:PackageMessage.Call)
 private:
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_function();
  inline void clear_has_function();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* service_;
  ::std::string* function_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parameters_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PackageMessage_2eproto();
  friend void protobuf_AssignDesc_PackageMessage_2eproto();
  friend void protobuf_ShutdownFile_PackageMessage_2eproto();

  void InitAsDefaultInstance();
  static PackageMessage_Call* default_instance_;
};
// -------------------------------------------------------------------

class PackageMessage_Result : public ::google::protobuf::Message {
 public:
  PackageMessage_Result();
  virtual ~PackageMessage_Result();

  PackageMessage_Result(const PackageMessage_Result& from);

  inline PackageMessage_Result& operator=(const PackageMessage_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageMessage_Result& default_instance();

  void Swap(PackageMessage_Result* other);

  // implements Message ----------------------------------------------

  PackageMessage_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageMessage_Result& from);
  void MergeFrom(const PackageMessage_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ErrorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional bytes ResultData = 2;
  inline bool has_resultdata() const;
  inline void clear_resultdata();
  static const int kResultDataFieldNumber = 2;
  inline const ::std::string& resultdata() const;
  inline void set_resultdata(const ::std::string& value);
  inline void set_resultdata(const char* value);
  inline void set_resultdata(const void* value, size_t size);
  inline ::std::string* mutable_resultdata();
  inline ::std::string* release_resultdata();
  inline void set_allocated_resultdata(::std::string* resultdata);

  // @@protoc_insertion_point(class_scope:PackageMessage.Result)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_resultdata();
  inline void clear_has_resultdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* resultdata_;
  ::google::protobuf::int32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PackageMessage_2eproto();
  friend void protobuf_AssignDesc_PackageMessage_2eproto();
  friend void protobuf_ShutdownFile_PackageMessage_2eproto();

  void InitAsDefaultInstance();
  static PackageMessage_Result* default_instance_;
};
// -------------------------------------------------------------------

class PackageMessage : public ::google::protobuf::Message {
 public:
  PackageMessage();
  virtual ~PackageMessage();

  PackageMessage(const PackageMessage& from);

  inline PackageMessage& operator=(const PackageMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageMessage& default_instance();

  void Swap(PackageMessage* other);

  // implements Message ----------------------------------------------

  PackageMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageMessage& from);
  void MergeFrom(const PackageMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PackageMessage_Call Call;
  typedef PackageMessage_Result Result;

  // accessors -------------------------------------------------------

  // optional string Token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required string SessionId = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional int64 Time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string From = 4;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 4;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // optional string To = 5;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 5;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // optional .PackageMessage.Call CallMessage = 6;
  inline bool has_callmessage() const;
  inline void clear_callmessage();
  static const int kCallMessageFieldNumber = 6;
  inline const ::PackageMessage_Call& callmessage() const;
  inline ::PackageMessage_Call* mutable_callmessage();
  inline ::PackageMessage_Call* release_callmessage();
  inline void set_allocated_callmessage(::PackageMessage_Call* callmessage);

  // optional .PackageMessage.Result ResultMessage = 7;
  inline bool has_resultmessage() const;
  inline void clear_resultmessage();
  static const int kResultMessageFieldNumber = 7;
  inline const ::PackageMessage_Result& resultmessage() const;
  inline ::PackageMessage_Result* mutable_resultmessage();
  inline ::PackageMessage_Result* release_resultmessage();
  inline void set_allocated_resultmessage(::PackageMessage_Result* resultmessage);

  // optional string robotID = 8;
  inline bool has_robotid() const;
  inline void clear_robotid();
  static const int kRobotIDFieldNumber = 8;
  inline const ::std::string& robotid() const;
  inline void set_robotid(const ::std::string& value);
  inline void set_robotid(const char* value);
  inline void set_robotid(const char* value, size_t size);
  inline ::std::string* mutable_robotid();
  inline ::std::string* release_robotid();
  inline void set_allocated_robotid(::std::string* robotid);

  // @@protoc_insertion_point(class_scope:PackageMessage)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_callmessage();
  inline void clear_has_callmessage();
  inline void set_has_resultmessage();
  inline void clear_has_resultmessage();
  inline void set_has_robotid();
  inline void clear_has_robotid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::std::string* sessionid_;
  ::google::protobuf::int64 time_;
  ::std::string* from_;
  ::std::string* to_;
  ::PackageMessage_Call* callmessage_;
  ::PackageMessage_Result* resultmessage_;
  ::std::string* robotid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PackageMessage_2eproto();
  friend void protobuf_AssignDesc_PackageMessage_2eproto();
  friend void protobuf_ShutdownFile_PackageMessage_2eproto();

  void InitAsDefaultInstance();
  static PackageMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// PackageMessage_Call

// optional string Service = 1;
inline bool PackageMessage_Call::has_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageMessage_Call::set_has_service() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageMessage_Call::clear_has_service() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageMessage_Call::clear_service() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& PackageMessage_Call::service() const {
  return *service_;
}
inline void PackageMessage_Call::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void PackageMessage_Call::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void PackageMessage_Call::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PackageMessage_Call::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  return service_;
}
inline ::std::string* PackageMessage_Call::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PackageMessage_Call::set_allocated_service(::std::string* service) {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (service) {
    set_has_service();
    service_ = service;
  } else {
    clear_has_service();
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Function = 2;
inline bool PackageMessage_Call::has_function() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageMessage_Call::set_has_function() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackageMessage_Call::clear_has_function() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackageMessage_Call::clear_function() {
  if (function_ != &::google::protobuf::internal::kEmptyString) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& PackageMessage_Call::function() const {
  return *function_;
}
inline void PackageMessage_Call::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(value);
}
inline void PackageMessage_Call::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(value);
}
inline void PackageMessage_Call::set_function(const char* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PackageMessage_Call::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    function_ = new ::std::string;
  }
  return function_;
}
inline ::std::string* PackageMessage_Call::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PackageMessage_Call::set_allocated_function(::std::string* function) {
  if (function_ != &::google::protobuf::internal::kEmptyString) {
    delete function_;
  }
  if (function) {
    set_has_function();
    function_ = function;
  } else {
    clear_has_function();
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes Parameters = 3;
inline int PackageMessage_Call::parameters_size() const {
  return parameters_.size();
}
inline void PackageMessage_Call::clear_parameters() {
  parameters_.Clear();
}
inline const ::std::string& PackageMessage_Call::parameters(int index) const {
  return parameters_.Get(index);
}
inline ::std::string* PackageMessage_Call::mutable_parameters(int index) {
  return parameters_.Mutable(index);
}
inline void PackageMessage_Call::set_parameters(int index, const ::std::string& value) {
  parameters_.Mutable(index)->assign(value);
}
inline void PackageMessage_Call::set_parameters(int index, const char* value) {
  parameters_.Mutable(index)->assign(value);
}
inline void PackageMessage_Call::set_parameters(int index, const void* value, size_t size) {
  parameters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PackageMessage_Call::add_parameters() {
  return parameters_.Add();
}
inline void PackageMessage_Call::add_parameters(const ::std::string& value) {
  parameters_.Add()->assign(value);
}
inline void PackageMessage_Call::add_parameters(const char* value) {
  parameters_.Add()->assign(value);
}
inline void PackageMessage_Call::add_parameters(const void* value, size_t size) {
  parameters_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackageMessage_Call::parameters() const {
  return parameters_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PackageMessage_Call::mutable_parameters() {
  return &parameters_;
}

// -------------------------------------------------------------------

// PackageMessage_Result

// required int32 ErrorCode = 1;
inline bool PackageMessage_Result::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageMessage_Result::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageMessage_Result::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageMessage_Result::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 PackageMessage_Result::errorcode() const {
  return errorcode_;
}
inline void PackageMessage_Result::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional bytes ResultData = 2;
inline bool PackageMessage_Result::has_resultdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageMessage_Result::set_has_resultdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackageMessage_Result::clear_has_resultdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackageMessage_Result::clear_resultdata() {
  if (resultdata_ != &::google::protobuf::internal::kEmptyString) {
    resultdata_->clear();
  }
  clear_has_resultdata();
}
inline const ::std::string& PackageMessage_Result::resultdata() const {
  return *resultdata_;
}
inline void PackageMessage_Result::set_resultdata(const ::std::string& value) {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::kEmptyString) {
    resultdata_ = new ::std::string;
  }
  resultdata_->assign(value);
}
inline void PackageMessage_Result::set_resultdata(const char* value) {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::kEmptyString) {
    resultdata_ = new ::std::string;
  }
  resultdata_->assign(value);
}
inline void PackageMessage_Result::set_resultdata(const void* value, size_t size) {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::kEmptyString) {
    resultdata_ = new ::std::string;
  }
  resultdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PackageMessage_Result::mutable_resultdata() {
  set_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::kEmptyString) {
    resultdata_ = new ::std::string;
  }
  return resultdata_;
}
inline ::std::string* PackageMessage_Result::release_resultdata() {
  clear_has_resultdata();
  if (resultdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resultdata_;
    resultdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PackageMessage_Result::set_allocated_resultdata(::std::string* resultdata) {
  if (resultdata_ != &::google::protobuf::internal::kEmptyString) {
    delete resultdata_;
  }
  if (resultdata) {
    set_has_resultdata();
    resultdata_ = resultdata;
  } else {
    clear_has_resultdata();
    resultdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PackageMessage

// optional string Token = 1;
inline bool PackageMessage::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageMessage::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageMessage::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageMessage::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& PackageMessage::token() const {
  return *token_;
}
inline void PackageMessage::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void PackageMessage::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void PackageMessage::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PackageMessage::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* PackageMessage::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PackageMessage::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SessionId = 2;
inline bool PackageMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackageMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackageMessage::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& PackageMessage::sessionid() const {
  return *sessionid_;
}
inline void PackageMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void PackageMessage::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void PackageMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PackageMessage::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  return sessionid_;
}
inline ::std::string* PackageMessage::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PackageMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 Time = 3;
inline bool PackageMessage::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageMessage::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackageMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackageMessage::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 PackageMessage::time() const {
  return time_;
}
inline void PackageMessage::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional string From = 4;
inline bool PackageMessage::has_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackageMessage::set_has_from() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PackageMessage::clear_has_from() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PackageMessage::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& PackageMessage::from() const {
  return *from_;
}
inline void PackageMessage::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void PackageMessage::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void PackageMessage::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PackageMessage::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* PackageMessage::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PackageMessage::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string To = 5;
inline bool PackageMessage::has_to() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PackageMessage::set_has_to() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PackageMessage::clear_has_to() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PackageMessage::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& PackageMessage::to() const {
  return *to_;
}
inline void PackageMessage::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void PackageMessage::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void PackageMessage::set_to(const char* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PackageMessage::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* PackageMessage::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PackageMessage::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PackageMessage.Call CallMessage = 6;
inline bool PackageMessage::has_callmessage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PackageMessage::set_has_callmessage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PackageMessage::clear_has_callmessage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PackageMessage::clear_callmessage() {
  if (callmessage_ != NULL) callmessage_->::PackageMessage_Call::Clear();
  clear_has_callmessage();
}
inline const ::PackageMessage_Call& PackageMessage::callmessage() const {
  return callmessage_ != NULL ? *callmessage_ : *default_instance_->callmessage_;
}
inline ::PackageMessage_Call* PackageMessage::mutable_callmessage() {
  set_has_callmessage();
  if (callmessage_ == NULL) callmessage_ = new ::PackageMessage_Call;
  return callmessage_;
}
inline ::PackageMessage_Call* PackageMessage::release_callmessage() {
  clear_has_callmessage();
  ::PackageMessage_Call* temp = callmessage_;
  callmessage_ = NULL;
  return temp;
}
inline void PackageMessage::set_allocated_callmessage(::PackageMessage_Call* callmessage) {
  delete callmessage_;
  callmessage_ = callmessage;
  if (callmessage) {
    set_has_callmessage();
  } else {
    clear_has_callmessage();
  }
}

// optional .PackageMessage.Result ResultMessage = 7;
inline bool PackageMessage::has_resultmessage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PackageMessage::set_has_resultmessage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PackageMessage::clear_has_resultmessage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PackageMessage::clear_resultmessage() {
  if (resultmessage_ != NULL) resultmessage_->::PackageMessage_Result::Clear();
  clear_has_resultmessage();
}
inline const ::PackageMessage_Result& PackageMessage::resultmessage() const {
  return resultmessage_ != NULL ? *resultmessage_ : *default_instance_->resultmessage_;
}
inline ::PackageMessage_Result* PackageMessage::mutable_resultmessage() {
  set_has_resultmessage();
  if (resultmessage_ == NULL) resultmessage_ = new ::PackageMessage_Result;
  return resultmessage_;
}
inline ::PackageMessage_Result* PackageMessage::release_resultmessage() {
  clear_has_resultmessage();
  ::PackageMessage_Result* temp = resultmessage_;
  resultmessage_ = NULL;
  return temp;
}
inline void PackageMessage::set_allocated_resultmessage(::PackageMessage_Result* resultmessage) {
  delete resultmessage_;
  resultmessage_ = resultmessage;
  if (resultmessage) {
    set_has_resultmessage();
  } else {
    clear_has_resultmessage();
  }
}

// optional string robotID = 8;
inline bool PackageMessage::has_robotid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PackageMessage::set_has_robotid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PackageMessage::clear_has_robotid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PackageMessage::clear_robotid() {
  if (robotid_ != &::google::protobuf::internal::kEmptyString) {
    robotid_->clear();
  }
  clear_has_robotid();
}
inline const ::std::string& PackageMessage::robotid() const {
  return *robotid_;
}
inline void PackageMessage::set_robotid(const ::std::string& value) {
  set_has_robotid();
  if (robotid_ == &::google::protobuf::internal::kEmptyString) {
    robotid_ = new ::std::string;
  }
  robotid_->assign(value);
}
inline void PackageMessage::set_robotid(const char* value) {
  set_has_robotid();
  if (robotid_ == &::google::protobuf::internal::kEmptyString) {
    robotid_ = new ::std::string;
  }
  robotid_->assign(value);
}
inline void PackageMessage::set_robotid(const char* value, size_t size) {
  set_has_robotid();
  if (robotid_ == &::google::protobuf::internal::kEmptyString) {
    robotid_ = new ::std::string;
  }
  robotid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PackageMessage::mutable_robotid() {
  set_has_robotid();
  if (robotid_ == &::google::protobuf::internal::kEmptyString) {
    robotid_ = new ::std::string;
  }
  return robotid_;
}
inline ::std::string* PackageMessage::release_robotid() {
  clear_has_robotid();
  if (robotid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = robotid_;
    robotid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PackageMessage::set_allocated_robotid(::std::string* robotid) {
  if (robotid_ != &::google::protobuf::internal::kEmptyString) {
    delete robotid_;
  }
  if (robotid) {
    set_has_robotid();
    robotid_ = robotid;
  } else {
    clear_has_robotid();
    robotid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PackageMessage_2eproto__INCLUDED
