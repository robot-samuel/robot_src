// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ParamConfig.proto

#ifndef PROTOBUF_ParamConfig_2eproto__INCLUDED
#define PROTOBUF_ParamConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ExternSensorConfig.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ParamConfig_2eproto();
void protobuf_AssignDesc_ParamConfig_2eproto();
void protobuf_ShutdownFile_ParamConfig_2eproto();

class ParamConfig;
class ParamConfig_Config_Mode_Driver;
class ParamConfig_Config_Error_Mode;
class ParamConfig_Config_Alarm_Mode;

// ===================================================================

class ParamConfig_Config_Mode_Driver : public ::google::protobuf::Message {
 public:
  ParamConfig_Config_Mode_Driver();
  virtual ~ParamConfig_Config_Mode_Driver();

  ParamConfig_Config_Mode_Driver(const ParamConfig_Config_Mode_Driver& from);

  inline ParamConfig_Config_Mode_Driver& operator=(const ParamConfig_Config_Mode_Driver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamConfig_Config_Mode_Driver& default_instance();

  void Swap(ParamConfig_Config_Mode_Driver* other);

  // implements Message ----------------------------------------------

  ParamConfig_Config_Mode_Driver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamConfig_Config_Mode_Driver& from);
  void MergeFrom(const ParamConfig_Config_Mode_Driver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 autorun_speed = 1;
  inline bool has_autorun_speed() const;
  inline void clear_autorun_speed();
  static const int kAutorunSpeedFieldNumber = 1;
  inline ::google::protobuf::int32 autorun_speed() const;
  inline void set_autorun_speed(::google::protobuf::int32 value);

  // optional int32 autorun_angel = 2;
  inline bool has_autorun_angel() const;
  inline void clear_autorun_angel();
  static const int kAutorunAngelFieldNumber = 2;
  inline ::google::protobuf::int32 autorun_angel() const;
  inline void set_autorun_angel(::google::protobuf::int32 value);

  // optional int32 remote_speed = 3;
  inline bool has_remote_speed() const;
  inline void clear_remote_speed();
  static const int kRemoteSpeedFieldNumber = 3;
  inline ::google::protobuf::int32 remote_speed() const;
  inline void set_remote_speed(::google::protobuf::int32 value);

  // optional int32 remote_angel = 4;
  inline bool has_remote_angel() const;
  inline void clear_remote_angel();
  static const int kRemoteAngelFieldNumber = 4;
  inline ::google::protobuf::int32 remote_angel() const;
  inline void set_remote_angel(::google::protobuf::int32 value);

  // optional int32 remote_AcceVelocity = 5;
  inline bool has_remote_accevelocity() const;
  inline void clear_remote_accevelocity();
  static const int kRemoteAcceVelocityFieldNumber = 5;
  inline ::google::protobuf::int32 remote_accevelocity() const;
  inline void set_remote_accevelocity(::google::protobuf::int32 value);

  // optional float ReductionRatiol = 6;
  inline bool has_reductionratiol() const;
  inline void clear_reductionratiol();
  static const int kReductionRatiolFieldNumber = 6;
  inline float reductionratiol() const;
  inline void set_reductionratiol(float value);

  // optional float WheelSsize = 7;
  inline bool has_wheelssize() const;
  inline void clear_wheelssize();
  static const int kWheelSsizeFieldNumber = 7;
  inline float wheelssize() const;
  inline void set_wheelssize(float value);

  // optional float RWheelSsize = 8;
  inline bool has_rwheelssize() const;
  inline void clear_rwheelssize();
  static const int kRWheelSsizeFieldNumber = 8;
  inline float rwheelssize() const;
  inline void set_rwheelssize(float value);

  // optional float LWheelSsize = 9;
  inline bool has_lwheelssize() const;
  inline void clear_lwheelssize();
  static const int kLWheelSsizeFieldNumber = 9;
  inline float lwheelssize() const;
  inline void set_lwheelssize(float value);

  // optional int32 EcounterRpm = 10;
  inline bool has_ecounterrpm() const;
  inline void clear_ecounterrpm();
  static const int kEcounterRpmFieldNumber = 10;
  inline ::google::protobuf::int32 ecounterrpm() const;
  inline void set_ecounterrpm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ParamConfig.Config_Mode_Driver)
 private:
  inline void set_has_autorun_speed();
  inline void clear_has_autorun_speed();
  inline void set_has_autorun_angel();
  inline void clear_has_autorun_angel();
  inline void set_has_remote_speed();
  inline void clear_has_remote_speed();
  inline void set_has_remote_angel();
  inline void clear_has_remote_angel();
  inline void set_has_remote_accevelocity();
  inline void clear_has_remote_accevelocity();
  inline void set_has_reductionratiol();
  inline void clear_has_reductionratiol();
  inline void set_has_wheelssize();
  inline void clear_has_wheelssize();
  inline void set_has_rwheelssize();
  inline void clear_has_rwheelssize();
  inline void set_has_lwheelssize();
  inline void clear_has_lwheelssize();
  inline void set_has_ecounterrpm();
  inline void clear_has_ecounterrpm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 autorun_speed_;
  ::google::protobuf::int32 autorun_angel_;
  ::google::protobuf::int32 remote_speed_;
  ::google::protobuf::int32 remote_angel_;
  ::google::protobuf::int32 remote_accevelocity_;
  float reductionratiol_;
  float wheelssize_;
  float rwheelssize_;
  float lwheelssize_;
  ::google::protobuf::int32 ecounterrpm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ParamConfig_2eproto();
  friend void protobuf_AssignDesc_ParamConfig_2eproto();
  friend void protobuf_ShutdownFile_ParamConfig_2eproto();

  void InitAsDefaultInstance();
  static ParamConfig_Config_Mode_Driver* default_instance_;
};
// -------------------------------------------------------------------

class ParamConfig_Config_Error_Mode : public ::google::protobuf::Message {
 public:
  ParamConfig_Config_Error_Mode();
  virtual ~ParamConfig_Config_Error_Mode();

  ParamConfig_Config_Error_Mode(const ParamConfig_Config_Error_Mode& from);

  inline ParamConfig_Config_Error_Mode& operator=(const ParamConfig_Config_Error_Mode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamConfig_Config_Error_Mode& default_instance();

  void Swap(ParamConfig_Config_Error_Mode* other);

  // implements Message ----------------------------------------------

  ParamConfig_Config_Error_Mode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamConfig_Config_Error_Mode& from);
  void MergeFrom(const ParamConfig_Config_Error_Mode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool CarLeftFDriverError_Ischeck = 1;
  inline bool has_carleftfdrivererror_ischeck() const;
  inline void clear_carleftfdrivererror_ischeck();
  static const int kCarLeftFDriverErrorIscheckFieldNumber = 1;
  inline bool carleftfdrivererror_ischeck() const;
  inline void set_carleftfdrivererror_ischeck(bool value);

  // optional bool CarRightFDriverError_Ischeck = 2;
  inline bool has_carrightfdrivererror_ischeck() const;
  inline void clear_carrightfdrivererror_ischeck();
  static const int kCarRightFDriverErrorIscheckFieldNumber = 2;
  inline bool carrightfdrivererror_ischeck() const;
  inline void set_carrightfdrivererror_ischeck(bool value);

  // optional bool CarLeftBDriverError_Ischeck = 3;
  inline bool has_carleftbdrivererror_ischeck() const;
  inline void clear_carleftbdrivererror_ischeck();
  static const int kCarLeftBDriverErrorIscheckFieldNumber = 3;
  inline bool carleftbdrivererror_ischeck() const;
  inline void set_carleftbdrivererror_ischeck(bool value);

  // optional bool CarRightBDriverError_Ischeck = 4;
  inline bool has_carrightbdrivererror_ischeck() const;
  inline void clear_carrightbdrivererror_ischeck();
  static const int kCarRightBDriverErrorIscheckFieldNumber = 4;
  inline bool carrightbdrivererror_ischeck() const;
  inline void set_carrightbdrivererror_ischeck(bool value);

  // optional bool LeftFDriverComError_Ischeck = 5;
  inline bool has_leftfdrivercomerror_ischeck() const;
  inline void clear_leftfdrivercomerror_ischeck();
  static const int kLeftFDriverComErrorIscheckFieldNumber = 5;
  inline bool leftfdrivercomerror_ischeck() const;
  inline void set_leftfdrivercomerror_ischeck(bool value);

  // optional bool RightFDriverComError_Ischeck = 6;
  inline bool has_rightfdrivercomerror_ischeck() const;
  inline void clear_rightfdrivercomerror_ischeck();
  static const int kRightFDriverComErrorIscheckFieldNumber = 6;
  inline bool rightfdrivercomerror_ischeck() const;
  inline void set_rightfdrivercomerror_ischeck(bool value);

  // optional bool LeftBDriverComError_Ischeck = 7;
  inline bool has_leftbdrivercomerror_ischeck() const;
  inline void clear_leftbdrivercomerror_ischeck();
  static const int kLeftBDriverComErrorIscheckFieldNumber = 7;
  inline bool leftbdrivercomerror_ischeck() const;
  inline void set_leftbdrivercomerror_ischeck(bool value);

  // optional bool RightBDriverComError_Ischeck = 8;
  inline bool has_rightbdrivercomerror_ischeck() const;
  inline void clear_rightbdrivercomerror_ischeck();
  static const int kRightBDriverComErrorIscheckFieldNumber = 8;
  inline bool rightbdrivercomerror_ischeck() const;
  inline void set_rightbdrivercomerror_ischeck(bool value);

  // optional bool ExternComDevError_Ischeck = 9;
  inline bool has_externcomdeverror_ischeck() const;
  inline void clear_externcomdeverror_ischeck();
  static const int kExternComDevErrorIscheckFieldNumber = 9;
  inline bool externcomdeverror_ischeck() const;
  inline void set_externcomdeverror_ischeck(bool value);

  // optional bool BMSSysError_Ischeck = 10;
  inline bool has_bmssyserror_ischeck() const;
  inline void clear_bmssyserror_ischeck();
  static const int kBMSSysErrorIscheckFieldNumber = 10;
  inline bool bmssyserror_ischeck() const;
  inline void set_bmssyserror_ischeck(bool value);

  // optional bool ObstacleStopError_Ischeck = 11;
  inline bool has_obstaclestoperror_ischeck() const;
  inline void clear_obstaclestoperror_ischeck();
  static const int kObstacleStopErrorIscheckFieldNumber = 11;
  inline bool obstaclestoperror_ischeck() const;
  inline void set_obstaclestoperror_ischeck(bool value);

  // optional bool CashSwitchStopError_Ischeck = 12;
  inline bool has_cashswitchstoperror_ischeck() const;
  inline void clear_cashswitchstoperror_ischeck();
  static const int kCashSwitchStopErrorIscheckFieldNumber = 12;
  inline bool cashswitchstoperror_ischeck() const;
  inline void set_cashswitchstoperror_ischeck(bool value);

  // optional bool CurrentOverloadError_Ischeck = 13;
  inline bool has_currentoverloaderror_ischeck() const;
  inline void clear_currentoverloaderror_ischeck();
  static const int kCurrentOverloadErrorIscheckFieldNumber = 13;
  inline bool currentoverloaderror_ischeck() const;
  inline void set_currentoverloaderror_ischeck(bool value);

  // optional bool xrs2015_driverNodeOFF_Ischeck = 14;
  inline bool has_xrs2015_drivernodeoff_ischeck() const;
  inline void clear_xrs2015_drivernodeoff_ischeck();
  static const int kXrs2015DriverNodeOFFIscheckFieldNumber = 14;
  inline bool xrs2015_drivernodeoff_ischeck() const;
  inline void set_xrs2015_drivernodeoff_ischeck(bool value);

  // optional bool BObstacleStopError_Ischeck = 15;
  inline bool has_bobstaclestoperror_ischeck() const;
  inline void clear_bobstaclestoperror_ischeck();
  static const int kBObstacleStopErrorIscheckFieldNumber = 15;
  inline bool bobstaclestoperror_ischeck() const;
  inline void set_bobstaclestoperror_ischeck(bool value);

  // optional bool DropStopError_Ischeck = 16;
  inline bool has_dropstoperror_ischeck() const;
  inline void clear_dropstoperror_ischeck();
  static const int kDropStopErrorIscheckFieldNumber = 16;
  inline bool dropstoperror_ischeck() const;
  inline void set_dropstoperror_ischeck(bool value);

  // @@protoc_insertion_point(class_scope:ParamConfig.Config_Error_Mode)
 private:
  inline void set_has_carleftfdrivererror_ischeck();
  inline void clear_has_carleftfdrivererror_ischeck();
  inline void set_has_carrightfdrivererror_ischeck();
  inline void clear_has_carrightfdrivererror_ischeck();
  inline void set_has_carleftbdrivererror_ischeck();
  inline void clear_has_carleftbdrivererror_ischeck();
  inline void set_has_carrightbdrivererror_ischeck();
  inline void clear_has_carrightbdrivererror_ischeck();
  inline void set_has_leftfdrivercomerror_ischeck();
  inline void clear_has_leftfdrivercomerror_ischeck();
  inline void set_has_rightfdrivercomerror_ischeck();
  inline void clear_has_rightfdrivercomerror_ischeck();
  inline void set_has_leftbdrivercomerror_ischeck();
  inline void clear_has_leftbdrivercomerror_ischeck();
  inline void set_has_rightbdrivercomerror_ischeck();
  inline void clear_has_rightbdrivercomerror_ischeck();
  inline void set_has_externcomdeverror_ischeck();
  inline void clear_has_externcomdeverror_ischeck();
  inline void set_has_bmssyserror_ischeck();
  inline void clear_has_bmssyserror_ischeck();
  inline void set_has_obstaclestoperror_ischeck();
  inline void clear_has_obstaclestoperror_ischeck();
  inline void set_has_cashswitchstoperror_ischeck();
  inline void clear_has_cashswitchstoperror_ischeck();
  inline void set_has_currentoverloaderror_ischeck();
  inline void clear_has_currentoverloaderror_ischeck();
  inline void set_has_xrs2015_drivernodeoff_ischeck();
  inline void clear_has_xrs2015_drivernodeoff_ischeck();
  inline void set_has_bobstaclestoperror_ischeck();
  inline void clear_has_bobstaclestoperror_ischeck();
  inline void set_has_dropstoperror_ischeck();
  inline void clear_has_dropstoperror_ischeck();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool carleftfdrivererror_ischeck_;
  bool carrightfdrivererror_ischeck_;
  bool carleftbdrivererror_ischeck_;
  bool carrightbdrivererror_ischeck_;
  bool leftfdrivercomerror_ischeck_;
  bool rightfdrivercomerror_ischeck_;
  bool leftbdrivercomerror_ischeck_;
  bool rightbdrivercomerror_ischeck_;
  bool externcomdeverror_ischeck_;
  bool bmssyserror_ischeck_;
  bool obstaclestoperror_ischeck_;
  bool cashswitchstoperror_ischeck_;
  bool currentoverloaderror_ischeck_;
  bool xrs2015_drivernodeoff_ischeck_;
  bool bobstaclestoperror_ischeck_;
  bool dropstoperror_ischeck_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_ParamConfig_2eproto();
  friend void protobuf_AssignDesc_ParamConfig_2eproto();
  friend void protobuf_ShutdownFile_ParamConfig_2eproto();

  void InitAsDefaultInstance();
  static ParamConfig_Config_Error_Mode* default_instance_;
};
// -------------------------------------------------------------------

class ParamConfig_Config_Alarm_Mode : public ::google::protobuf::Message {
 public:
  ParamConfig_Config_Alarm_Mode();
  virtual ~ParamConfig_Config_Alarm_Mode();

  ParamConfig_Config_Alarm_Mode(const ParamConfig_Config_Alarm_Mode& from);

  inline ParamConfig_Config_Alarm_Mode& operator=(const ParamConfig_Config_Alarm_Mode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamConfig_Config_Alarm_Mode& default_instance();

  void Swap(ParamConfig_Config_Alarm_Mode* other);

  // implements Message ----------------------------------------------

  ParamConfig_Config_Alarm_Mode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamConfig_Config_Alarm_Mode& from);
  void MergeFrom(const ParamConfig_Config_Alarm_Mode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool CtrolBoxHighTemAlarm_Ischeck = 1;
  inline bool has_ctrolboxhightemalarm_ischeck() const;
  inline void clear_ctrolboxhightemalarm_ischeck();
  static const int kCtrolBoxHighTemAlarmIscheckFieldNumber = 1;
  inline bool ctrolboxhightemalarm_ischeck() const;
  inline void set_ctrolboxhightemalarm_ischeck(bool value);

  // optional bool CtrolBoxFrozenTemAlarm_Ischeck = 2;
  inline bool has_ctrolboxfrozentemalarm_ischeck() const;
  inline void clear_ctrolboxfrozentemalarm_ischeck();
  static const int kCtrolBoxFrozenTemAlarmIscheckFieldNumber = 2;
  inline bool ctrolboxfrozentemalarm_ischeck() const;
  inline void set_ctrolboxfrozentemalarm_ischeck(bool value);

  // optional bool BMSModComLostAlarm_Ischeck = 3;
  inline bool has_bmsmodcomlostalarm_ischeck() const;
  inline void clear_bmsmodcomlostalarm_ischeck();
  static const int kBMSModComLostAlarmIscheckFieldNumber = 3;
  inline bool bmsmodcomlostalarm_ischeck() const;
  inline void set_bmsmodcomlostalarm_ischeck(bool value);

  // optional bool Emergency_Status_stop_Ischeck = 4;
  inline bool has_emergency_status_stop_ischeck() const;
  inline void clear_emergency_status_stop_ischeck();
  static const int kEmergencyStatusStopIscheckFieldNumber = 4;
  inline bool emergency_status_stop_ischeck() const;
  inline void set_emergency_status_stop_ischeck(bool value);

  // optional bool EcanExternSnsorNdeOFF_Ischeck = 5;
  inline bool has_ecanexternsnsorndeoff_ischeck() const;
  inline void clear_ecanexternsnsorndeoff_ischeck();
  static const int kEcanExternSnsorNdeOFFIscheckFieldNumber = 5;
  inline bool ecanexternsnsorndeoff_ischeck() const;
  inline void set_ecanexternsnsorndeoff_ischeck(bool value);

  // optional bool ZmqTransNodeOFF_Ischeck = 6;
  inline bool has_zmqtransnodeoff_ischeck() const;
  inline void clear_zmqtransnodeoff_ischeck();
  static const int kZmqTransNodeOFFIscheckFieldNumber = 6;
  inline bool zmqtransnodeoff_ischeck() const;
  inline void set_zmqtransnodeoff_ischeck(bool value);

  // optional bool JoyTestNodeOFF_Ischeck = 7;
  inline bool has_joytestnodeoff_ischeck() const;
  inline void clear_joytestnodeoff_ischeck();
  static const int kJoyTestNodeOFFIscheckFieldNumber = 7;
  inline bool joytestnodeoff_ischeck() const;
  inline void set_joytestnodeoff_ischeck(bool value);

  // optional bool Ph3ReadNodeOFF_Ischeck = 8;
  inline bool has_ph3readnodeoff_ischeck() const;
  inline void clear_ph3readnodeoff_ischeck();
  static const int kPh3ReadNodeOFFIscheckFieldNumber = 8;
  inline bool ph3readnodeoff_ischeck() const;
  inline void set_ph3readnodeoff_ischeck(bool value);

  // optional bool Ph3ReadComLost_Ischeck = 9;
  inline bool has_ph3readcomlost_ischeck() const;
  inline void clear_ph3readcomlost_ischeck();
  static const int kPh3ReadComLostIscheckFieldNumber = 9;
  inline bool ph3readcomlost_ischeck() const;
  inline void set_ph3readcomlost_ischeck(bool value);

  // @@protoc_insertion_point(class_scope:ParamConfig.Config_Alarm_Mode)
 private:
  inline void set_has_ctrolboxhightemalarm_ischeck();
  inline void clear_has_ctrolboxhightemalarm_ischeck();
  inline void set_has_ctrolboxfrozentemalarm_ischeck();
  inline void clear_has_ctrolboxfrozentemalarm_ischeck();
  inline void set_has_bmsmodcomlostalarm_ischeck();
  inline void clear_has_bmsmodcomlostalarm_ischeck();
  inline void set_has_emergency_status_stop_ischeck();
  inline void clear_has_emergency_status_stop_ischeck();
  inline void set_has_ecanexternsnsorndeoff_ischeck();
  inline void clear_has_ecanexternsnsorndeoff_ischeck();
  inline void set_has_zmqtransnodeoff_ischeck();
  inline void clear_has_zmqtransnodeoff_ischeck();
  inline void set_has_joytestnodeoff_ischeck();
  inline void clear_has_joytestnodeoff_ischeck();
  inline void set_has_ph3readnodeoff_ischeck();
  inline void clear_has_ph3readnodeoff_ischeck();
  inline void set_has_ph3readcomlost_ischeck();
  inline void clear_has_ph3readcomlost_ischeck();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ctrolboxhightemalarm_ischeck_;
  bool ctrolboxfrozentemalarm_ischeck_;
  bool bmsmodcomlostalarm_ischeck_;
  bool emergency_status_stop_ischeck_;
  bool ecanexternsnsorndeoff_ischeck_;
  bool zmqtransnodeoff_ischeck_;
  bool joytestnodeoff_ischeck_;
  bool ph3readnodeoff_ischeck_;
  bool ph3readcomlost_ischeck_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ParamConfig_2eproto();
  friend void protobuf_AssignDesc_ParamConfig_2eproto();
  friend void protobuf_ShutdownFile_ParamConfig_2eproto();

  void InitAsDefaultInstance();
  static ParamConfig_Config_Alarm_Mode* default_instance_;
};
// -------------------------------------------------------------------

class ParamConfig : public ::google::protobuf::Message {
 public:
  ParamConfig();
  virtual ~ParamConfig();

  ParamConfig(const ParamConfig& from);

  inline ParamConfig& operator=(const ParamConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamConfig& default_instance();

  void Swap(ParamConfig* other);

  // implements Message ----------------------------------------------

  ParamConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamConfig& from);
  void MergeFrom(const ParamConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamConfig_Config_Mode_Driver Config_Mode_Driver;
  typedef ParamConfig_Config_Error_Mode Config_Error_Mode;
  typedef ParamConfig_Config_Alarm_Mode Config_Alarm_Mode;

  // accessors -------------------------------------------------------

  // optional .ParamConfig.Config_Mode_Driver Config_Driver_Msg = 1;
  inline bool has_config_driver_msg() const;
  inline void clear_config_driver_msg();
  static const int kConfigDriverMsgFieldNumber = 1;
  inline const ::ParamConfig_Config_Mode_Driver& config_driver_msg() const;
  inline ::ParamConfig_Config_Mode_Driver* mutable_config_driver_msg();
  inline ::ParamConfig_Config_Mode_Driver* release_config_driver_msg();
  inline void set_allocated_config_driver_msg(::ParamConfig_Config_Mode_Driver* config_driver_msg);

  // optional .ParamConfig.Config_Error_Mode Config_Error_Msg = 2;
  inline bool has_config_error_msg() const;
  inline void clear_config_error_msg();
  static const int kConfigErrorMsgFieldNumber = 2;
  inline const ::ParamConfig_Config_Error_Mode& config_error_msg() const;
  inline ::ParamConfig_Config_Error_Mode* mutable_config_error_msg();
  inline ::ParamConfig_Config_Error_Mode* release_config_error_msg();
  inline void set_allocated_config_error_msg(::ParamConfig_Config_Error_Mode* config_error_msg);

  // optional .ParamConfig.Config_Alarm_Mode Config_Alarm_Msg = 3;
  inline bool has_config_alarm_msg() const;
  inline void clear_config_alarm_msg();
  static const int kConfigAlarmMsgFieldNumber = 3;
  inline const ::ParamConfig_Config_Alarm_Mode& config_alarm_msg() const;
  inline ::ParamConfig_Config_Alarm_Mode* mutable_config_alarm_msg();
  inline ::ParamConfig_Config_Alarm_Mode* release_config_alarm_msg();
  inline void set_allocated_config_alarm_msg(::ParamConfig_Config_Alarm_Mode* config_alarm_msg);

  // optional .ExternSensorConfig Config_extern_Msg = 4;
  inline bool has_config_extern_msg() const;
  inline void clear_config_extern_msg();
  static const int kConfigExternMsgFieldNumber = 4;
  inline const ::ExternSensorConfig& config_extern_msg() const;
  inline ::ExternSensorConfig* mutable_config_extern_msg();
  inline ::ExternSensorConfig* release_config_extern_msg();
  inline void set_allocated_config_extern_msg(::ExternSensorConfig* config_extern_msg);

  // @@protoc_insertion_point(class_scope:ParamConfig)
 private:
  inline void set_has_config_driver_msg();
  inline void clear_has_config_driver_msg();
  inline void set_has_config_error_msg();
  inline void clear_has_config_error_msg();
  inline void set_has_config_alarm_msg();
  inline void clear_has_config_alarm_msg();
  inline void set_has_config_extern_msg();
  inline void clear_has_config_extern_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ParamConfig_Config_Mode_Driver* config_driver_msg_;
  ::ParamConfig_Config_Error_Mode* config_error_msg_;
  ::ParamConfig_Config_Alarm_Mode* config_alarm_msg_;
  ::ExternSensorConfig* config_extern_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ParamConfig_2eproto();
  friend void protobuf_AssignDesc_ParamConfig_2eproto();
  friend void protobuf_ShutdownFile_ParamConfig_2eproto();

  void InitAsDefaultInstance();
  static ParamConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ParamConfig_Config_Mode_Driver

// optional int32 autorun_speed = 1;
inline bool ParamConfig_Config_Mode_Driver::has_autorun_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamConfig_Config_Mode_Driver::set_has_autorun_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamConfig_Config_Mode_Driver::clear_has_autorun_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamConfig_Config_Mode_Driver::clear_autorun_speed() {
  autorun_speed_ = 0;
  clear_has_autorun_speed();
}
inline ::google::protobuf::int32 ParamConfig_Config_Mode_Driver::autorun_speed() const {
  return autorun_speed_;
}
inline void ParamConfig_Config_Mode_Driver::set_autorun_speed(::google::protobuf::int32 value) {
  set_has_autorun_speed();
  autorun_speed_ = value;
}

// optional int32 autorun_angel = 2;
inline bool ParamConfig_Config_Mode_Driver::has_autorun_angel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamConfig_Config_Mode_Driver::set_has_autorun_angel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamConfig_Config_Mode_Driver::clear_has_autorun_angel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamConfig_Config_Mode_Driver::clear_autorun_angel() {
  autorun_angel_ = 0;
  clear_has_autorun_angel();
}
inline ::google::protobuf::int32 ParamConfig_Config_Mode_Driver::autorun_angel() const {
  return autorun_angel_;
}
inline void ParamConfig_Config_Mode_Driver::set_autorun_angel(::google::protobuf::int32 value) {
  set_has_autorun_angel();
  autorun_angel_ = value;
}

// optional int32 remote_speed = 3;
inline bool ParamConfig_Config_Mode_Driver::has_remote_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamConfig_Config_Mode_Driver::set_has_remote_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamConfig_Config_Mode_Driver::clear_has_remote_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamConfig_Config_Mode_Driver::clear_remote_speed() {
  remote_speed_ = 0;
  clear_has_remote_speed();
}
inline ::google::protobuf::int32 ParamConfig_Config_Mode_Driver::remote_speed() const {
  return remote_speed_;
}
inline void ParamConfig_Config_Mode_Driver::set_remote_speed(::google::protobuf::int32 value) {
  set_has_remote_speed();
  remote_speed_ = value;
}

// optional int32 remote_angel = 4;
inline bool ParamConfig_Config_Mode_Driver::has_remote_angel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamConfig_Config_Mode_Driver::set_has_remote_angel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamConfig_Config_Mode_Driver::clear_has_remote_angel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamConfig_Config_Mode_Driver::clear_remote_angel() {
  remote_angel_ = 0;
  clear_has_remote_angel();
}
inline ::google::protobuf::int32 ParamConfig_Config_Mode_Driver::remote_angel() const {
  return remote_angel_;
}
inline void ParamConfig_Config_Mode_Driver::set_remote_angel(::google::protobuf::int32 value) {
  set_has_remote_angel();
  remote_angel_ = value;
}

// optional int32 remote_AcceVelocity = 5;
inline bool ParamConfig_Config_Mode_Driver::has_remote_accevelocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParamConfig_Config_Mode_Driver::set_has_remote_accevelocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParamConfig_Config_Mode_Driver::clear_has_remote_accevelocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParamConfig_Config_Mode_Driver::clear_remote_accevelocity() {
  remote_accevelocity_ = 0;
  clear_has_remote_accevelocity();
}
inline ::google::protobuf::int32 ParamConfig_Config_Mode_Driver::remote_accevelocity() const {
  return remote_accevelocity_;
}
inline void ParamConfig_Config_Mode_Driver::set_remote_accevelocity(::google::protobuf::int32 value) {
  set_has_remote_accevelocity();
  remote_accevelocity_ = value;
}

// optional float ReductionRatiol = 6;
inline bool ParamConfig_Config_Mode_Driver::has_reductionratiol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParamConfig_Config_Mode_Driver::set_has_reductionratiol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParamConfig_Config_Mode_Driver::clear_has_reductionratiol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParamConfig_Config_Mode_Driver::clear_reductionratiol() {
  reductionratiol_ = 0;
  clear_has_reductionratiol();
}
inline float ParamConfig_Config_Mode_Driver::reductionratiol() const {
  return reductionratiol_;
}
inline void ParamConfig_Config_Mode_Driver::set_reductionratiol(float value) {
  set_has_reductionratiol();
  reductionratiol_ = value;
}

// optional float WheelSsize = 7;
inline bool ParamConfig_Config_Mode_Driver::has_wheelssize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParamConfig_Config_Mode_Driver::set_has_wheelssize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParamConfig_Config_Mode_Driver::clear_has_wheelssize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParamConfig_Config_Mode_Driver::clear_wheelssize() {
  wheelssize_ = 0;
  clear_has_wheelssize();
}
inline float ParamConfig_Config_Mode_Driver::wheelssize() const {
  return wheelssize_;
}
inline void ParamConfig_Config_Mode_Driver::set_wheelssize(float value) {
  set_has_wheelssize();
  wheelssize_ = value;
}

// optional float RWheelSsize = 8;
inline bool ParamConfig_Config_Mode_Driver::has_rwheelssize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParamConfig_Config_Mode_Driver::set_has_rwheelssize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParamConfig_Config_Mode_Driver::clear_has_rwheelssize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParamConfig_Config_Mode_Driver::clear_rwheelssize() {
  rwheelssize_ = 0;
  clear_has_rwheelssize();
}
inline float ParamConfig_Config_Mode_Driver::rwheelssize() const {
  return rwheelssize_;
}
inline void ParamConfig_Config_Mode_Driver::set_rwheelssize(float value) {
  set_has_rwheelssize();
  rwheelssize_ = value;
}

// optional float LWheelSsize = 9;
inline bool ParamConfig_Config_Mode_Driver::has_lwheelssize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParamConfig_Config_Mode_Driver::set_has_lwheelssize() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParamConfig_Config_Mode_Driver::clear_has_lwheelssize() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParamConfig_Config_Mode_Driver::clear_lwheelssize() {
  lwheelssize_ = 0;
  clear_has_lwheelssize();
}
inline float ParamConfig_Config_Mode_Driver::lwheelssize() const {
  return lwheelssize_;
}
inline void ParamConfig_Config_Mode_Driver::set_lwheelssize(float value) {
  set_has_lwheelssize();
  lwheelssize_ = value;
}

// optional int32 EcounterRpm = 10;
inline bool ParamConfig_Config_Mode_Driver::has_ecounterrpm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParamConfig_Config_Mode_Driver::set_has_ecounterrpm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParamConfig_Config_Mode_Driver::clear_has_ecounterrpm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParamConfig_Config_Mode_Driver::clear_ecounterrpm() {
  ecounterrpm_ = 0;
  clear_has_ecounterrpm();
}
inline ::google::protobuf::int32 ParamConfig_Config_Mode_Driver::ecounterrpm() const {
  return ecounterrpm_;
}
inline void ParamConfig_Config_Mode_Driver::set_ecounterrpm(::google::protobuf::int32 value) {
  set_has_ecounterrpm();
  ecounterrpm_ = value;
}

// -------------------------------------------------------------------

// ParamConfig_Config_Error_Mode

// optional bool CarLeftFDriverError_Ischeck = 1;
inline bool ParamConfig_Config_Error_Mode::has_carleftfdrivererror_ischeck() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_carleftfdrivererror_ischeck() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_carleftfdrivererror_ischeck() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamConfig_Config_Error_Mode::clear_carleftfdrivererror_ischeck() {
  carleftfdrivererror_ischeck_ = false;
  clear_has_carleftfdrivererror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::carleftfdrivererror_ischeck() const {
  return carleftfdrivererror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_carleftfdrivererror_ischeck(bool value) {
  set_has_carleftfdrivererror_ischeck();
  carleftfdrivererror_ischeck_ = value;
}

// optional bool CarRightFDriverError_Ischeck = 2;
inline bool ParamConfig_Config_Error_Mode::has_carrightfdrivererror_ischeck() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_carrightfdrivererror_ischeck() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_carrightfdrivererror_ischeck() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamConfig_Config_Error_Mode::clear_carrightfdrivererror_ischeck() {
  carrightfdrivererror_ischeck_ = false;
  clear_has_carrightfdrivererror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::carrightfdrivererror_ischeck() const {
  return carrightfdrivererror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_carrightfdrivererror_ischeck(bool value) {
  set_has_carrightfdrivererror_ischeck();
  carrightfdrivererror_ischeck_ = value;
}

// optional bool CarLeftBDriverError_Ischeck = 3;
inline bool ParamConfig_Config_Error_Mode::has_carleftbdrivererror_ischeck() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_carleftbdrivererror_ischeck() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_carleftbdrivererror_ischeck() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamConfig_Config_Error_Mode::clear_carleftbdrivererror_ischeck() {
  carleftbdrivererror_ischeck_ = false;
  clear_has_carleftbdrivererror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::carleftbdrivererror_ischeck() const {
  return carleftbdrivererror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_carleftbdrivererror_ischeck(bool value) {
  set_has_carleftbdrivererror_ischeck();
  carleftbdrivererror_ischeck_ = value;
}

// optional bool CarRightBDriverError_Ischeck = 4;
inline bool ParamConfig_Config_Error_Mode::has_carrightbdrivererror_ischeck() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_carrightbdrivererror_ischeck() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_carrightbdrivererror_ischeck() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamConfig_Config_Error_Mode::clear_carrightbdrivererror_ischeck() {
  carrightbdrivererror_ischeck_ = false;
  clear_has_carrightbdrivererror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::carrightbdrivererror_ischeck() const {
  return carrightbdrivererror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_carrightbdrivererror_ischeck(bool value) {
  set_has_carrightbdrivererror_ischeck();
  carrightbdrivererror_ischeck_ = value;
}

// optional bool LeftFDriverComError_Ischeck = 5;
inline bool ParamConfig_Config_Error_Mode::has_leftfdrivercomerror_ischeck() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_leftfdrivercomerror_ischeck() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_leftfdrivercomerror_ischeck() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParamConfig_Config_Error_Mode::clear_leftfdrivercomerror_ischeck() {
  leftfdrivercomerror_ischeck_ = false;
  clear_has_leftfdrivercomerror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::leftfdrivercomerror_ischeck() const {
  return leftfdrivercomerror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_leftfdrivercomerror_ischeck(bool value) {
  set_has_leftfdrivercomerror_ischeck();
  leftfdrivercomerror_ischeck_ = value;
}

// optional bool RightFDriverComError_Ischeck = 6;
inline bool ParamConfig_Config_Error_Mode::has_rightfdrivercomerror_ischeck() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_rightfdrivercomerror_ischeck() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_rightfdrivercomerror_ischeck() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParamConfig_Config_Error_Mode::clear_rightfdrivercomerror_ischeck() {
  rightfdrivercomerror_ischeck_ = false;
  clear_has_rightfdrivercomerror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::rightfdrivercomerror_ischeck() const {
  return rightfdrivercomerror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_rightfdrivercomerror_ischeck(bool value) {
  set_has_rightfdrivercomerror_ischeck();
  rightfdrivercomerror_ischeck_ = value;
}

// optional bool LeftBDriverComError_Ischeck = 7;
inline bool ParamConfig_Config_Error_Mode::has_leftbdrivercomerror_ischeck() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_leftbdrivercomerror_ischeck() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_leftbdrivercomerror_ischeck() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParamConfig_Config_Error_Mode::clear_leftbdrivercomerror_ischeck() {
  leftbdrivercomerror_ischeck_ = false;
  clear_has_leftbdrivercomerror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::leftbdrivercomerror_ischeck() const {
  return leftbdrivercomerror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_leftbdrivercomerror_ischeck(bool value) {
  set_has_leftbdrivercomerror_ischeck();
  leftbdrivercomerror_ischeck_ = value;
}

// optional bool RightBDriverComError_Ischeck = 8;
inline bool ParamConfig_Config_Error_Mode::has_rightbdrivercomerror_ischeck() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_rightbdrivercomerror_ischeck() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_rightbdrivercomerror_ischeck() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParamConfig_Config_Error_Mode::clear_rightbdrivercomerror_ischeck() {
  rightbdrivercomerror_ischeck_ = false;
  clear_has_rightbdrivercomerror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::rightbdrivercomerror_ischeck() const {
  return rightbdrivercomerror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_rightbdrivercomerror_ischeck(bool value) {
  set_has_rightbdrivercomerror_ischeck();
  rightbdrivercomerror_ischeck_ = value;
}

// optional bool ExternComDevError_Ischeck = 9;
inline bool ParamConfig_Config_Error_Mode::has_externcomdeverror_ischeck() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_externcomdeverror_ischeck() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_externcomdeverror_ischeck() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParamConfig_Config_Error_Mode::clear_externcomdeverror_ischeck() {
  externcomdeverror_ischeck_ = false;
  clear_has_externcomdeverror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::externcomdeverror_ischeck() const {
  return externcomdeverror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_externcomdeverror_ischeck(bool value) {
  set_has_externcomdeverror_ischeck();
  externcomdeverror_ischeck_ = value;
}

// optional bool BMSSysError_Ischeck = 10;
inline bool ParamConfig_Config_Error_Mode::has_bmssyserror_ischeck() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_bmssyserror_ischeck() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_bmssyserror_ischeck() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParamConfig_Config_Error_Mode::clear_bmssyserror_ischeck() {
  bmssyserror_ischeck_ = false;
  clear_has_bmssyserror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::bmssyserror_ischeck() const {
  return bmssyserror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_bmssyserror_ischeck(bool value) {
  set_has_bmssyserror_ischeck();
  bmssyserror_ischeck_ = value;
}

// optional bool ObstacleStopError_Ischeck = 11;
inline bool ParamConfig_Config_Error_Mode::has_obstaclestoperror_ischeck() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_obstaclestoperror_ischeck() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_obstaclestoperror_ischeck() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ParamConfig_Config_Error_Mode::clear_obstaclestoperror_ischeck() {
  obstaclestoperror_ischeck_ = false;
  clear_has_obstaclestoperror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::obstaclestoperror_ischeck() const {
  return obstaclestoperror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_obstaclestoperror_ischeck(bool value) {
  set_has_obstaclestoperror_ischeck();
  obstaclestoperror_ischeck_ = value;
}

// optional bool CashSwitchStopError_Ischeck = 12;
inline bool ParamConfig_Config_Error_Mode::has_cashswitchstoperror_ischeck() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_cashswitchstoperror_ischeck() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_cashswitchstoperror_ischeck() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ParamConfig_Config_Error_Mode::clear_cashswitchstoperror_ischeck() {
  cashswitchstoperror_ischeck_ = false;
  clear_has_cashswitchstoperror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::cashswitchstoperror_ischeck() const {
  return cashswitchstoperror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_cashswitchstoperror_ischeck(bool value) {
  set_has_cashswitchstoperror_ischeck();
  cashswitchstoperror_ischeck_ = value;
}

// optional bool CurrentOverloadError_Ischeck = 13;
inline bool ParamConfig_Config_Error_Mode::has_currentoverloaderror_ischeck() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_currentoverloaderror_ischeck() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_currentoverloaderror_ischeck() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ParamConfig_Config_Error_Mode::clear_currentoverloaderror_ischeck() {
  currentoverloaderror_ischeck_ = false;
  clear_has_currentoverloaderror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::currentoverloaderror_ischeck() const {
  return currentoverloaderror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_currentoverloaderror_ischeck(bool value) {
  set_has_currentoverloaderror_ischeck();
  currentoverloaderror_ischeck_ = value;
}

// optional bool xrs2015_driverNodeOFF_Ischeck = 14;
inline bool ParamConfig_Config_Error_Mode::has_xrs2015_drivernodeoff_ischeck() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_xrs2015_drivernodeoff_ischeck() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_xrs2015_drivernodeoff_ischeck() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ParamConfig_Config_Error_Mode::clear_xrs2015_drivernodeoff_ischeck() {
  xrs2015_drivernodeoff_ischeck_ = false;
  clear_has_xrs2015_drivernodeoff_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::xrs2015_drivernodeoff_ischeck() const {
  return xrs2015_drivernodeoff_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_xrs2015_drivernodeoff_ischeck(bool value) {
  set_has_xrs2015_drivernodeoff_ischeck();
  xrs2015_drivernodeoff_ischeck_ = value;
}

// optional bool BObstacleStopError_Ischeck = 15;
inline bool ParamConfig_Config_Error_Mode::has_bobstaclestoperror_ischeck() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_bobstaclestoperror_ischeck() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_bobstaclestoperror_ischeck() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ParamConfig_Config_Error_Mode::clear_bobstaclestoperror_ischeck() {
  bobstaclestoperror_ischeck_ = false;
  clear_has_bobstaclestoperror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::bobstaclestoperror_ischeck() const {
  return bobstaclestoperror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_bobstaclestoperror_ischeck(bool value) {
  set_has_bobstaclestoperror_ischeck();
  bobstaclestoperror_ischeck_ = value;
}

// optional bool DropStopError_Ischeck = 16;
inline bool ParamConfig_Config_Error_Mode::has_dropstoperror_ischeck() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ParamConfig_Config_Error_Mode::set_has_dropstoperror_ischeck() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ParamConfig_Config_Error_Mode::clear_has_dropstoperror_ischeck() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ParamConfig_Config_Error_Mode::clear_dropstoperror_ischeck() {
  dropstoperror_ischeck_ = false;
  clear_has_dropstoperror_ischeck();
}
inline bool ParamConfig_Config_Error_Mode::dropstoperror_ischeck() const {
  return dropstoperror_ischeck_;
}
inline void ParamConfig_Config_Error_Mode::set_dropstoperror_ischeck(bool value) {
  set_has_dropstoperror_ischeck();
  dropstoperror_ischeck_ = value;
}

// -------------------------------------------------------------------

// ParamConfig_Config_Alarm_Mode

// optional bool CtrolBoxHighTemAlarm_Ischeck = 1;
inline bool ParamConfig_Config_Alarm_Mode::has_ctrolboxhightemalarm_ischeck() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamConfig_Config_Alarm_Mode::set_has_ctrolboxhightemalarm_ischeck() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_has_ctrolboxhightemalarm_ischeck() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_ctrolboxhightemalarm_ischeck() {
  ctrolboxhightemalarm_ischeck_ = false;
  clear_has_ctrolboxhightemalarm_ischeck();
}
inline bool ParamConfig_Config_Alarm_Mode::ctrolboxhightemalarm_ischeck() const {
  return ctrolboxhightemalarm_ischeck_;
}
inline void ParamConfig_Config_Alarm_Mode::set_ctrolboxhightemalarm_ischeck(bool value) {
  set_has_ctrolboxhightemalarm_ischeck();
  ctrolboxhightemalarm_ischeck_ = value;
}

// optional bool CtrolBoxFrozenTemAlarm_Ischeck = 2;
inline bool ParamConfig_Config_Alarm_Mode::has_ctrolboxfrozentemalarm_ischeck() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamConfig_Config_Alarm_Mode::set_has_ctrolboxfrozentemalarm_ischeck() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_has_ctrolboxfrozentemalarm_ischeck() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_ctrolboxfrozentemalarm_ischeck() {
  ctrolboxfrozentemalarm_ischeck_ = false;
  clear_has_ctrolboxfrozentemalarm_ischeck();
}
inline bool ParamConfig_Config_Alarm_Mode::ctrolboxfrozentemalarm_ischeck() const {
  return ctrolboxfrozentemalarm_ischeck_;
}
inline void ParamConfig_Config_Alarm_Mode::set_ctrolboxfrozentemalarm_ischeck(bool value) {
  set_has_ctrolboxfrozentemalarm_ischeck();
  ctrolboxfrozentemalarm_ischeck_ = value;
}

// optional bool BMSModComLostAlarm_Ischeck = 3;
inline bool ParamConfig_Config_Alarm_Mode::has_bmsmodcomlostalarm_ischeck() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamConfig_Config_Alarm_Mode::set_has_bmsmodcomlostalarm_ischeck() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_has_bmsmodcomlostalarm_ischeck() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_bmsmodcomlostalarm_ischeck() {
  bmsmodcomlostalarm_ischeck_ = false;
  clear_has_bmsmodcomlostalarm_ischeck();
}
inline bool ParamConfig_Config_Alarm_Mode::bmsmodcomlostalarm_ischeck() const {
  return bmsmodcomlostalarm_ischeck_;
}
inline void ParamConfig_Config_Alarm_Mode::set_bmsmodcomlostalarm_ischeck(bool value) {
  set_has_bmsmodcomlostalarm_ischeck();
  bmsmodcomlostalarm_ischeck_ = value;
}

// optional bool Emergency_Status_stop_Ischeck = 4;
inline bool ParamConfig_Config_Alarm_Mode::has_emergency_status_stop_ischeck() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamConfig_Config_Alarm_Mode::set_has_emergency_status_stop_ischeck() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_has_emergency_status_stop_ischeck() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_emergency_status_stop_ischeck() {
  emergency_status_stop_ischeck_ = false;
  clear_has_emergency_status_stop_ischeck();
}
inline bool ParamConfig_Config_Alarm_Mode::emergency_status_stop_ischeck() const {
  return emergency_status_stop_ischeck_;
}
inline void ParamConfig_Config_Alarm_Mode::set_emergency_status_stop_ischeck(bool value) {
  set_has_emergency_status_stop_ischeck();
  emergency_status_stop_ischeck_ = value;
}

// optional bool EcanExternSnsorNdeOFF_Ischeck = 5;
inline bool ParamConfig_Config_Alarm_Mode::has_ecanexternsnsorndeoff_ischeck() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParamConfig_Config_Alarm_Mode::set_has_ecanexternsnsorndeoff_ischeck() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_has_ecanexternsnsorndeoff_ischeck() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_ecanexternsnsorndeoff_ischeck() {
  ecanexternsnsorndeoff_ischeck_ = false;
  clear_has_ecanexternsnsorndeoff_ischeck();
}
inline bool ParamConfig_Config_Alarm_Mode::ecanexternsnsorndeoff_ischeck() const {
  return ecanexternsnsorndeoff_ischeck_;
}
inline void ParamConfig_Config_Alarm_Mode::set_ecanexternsnsorndeoff_ischeck(bool value) {
  set_has_ecanexternsnsorndeoff_ischeck();
  ecanexternsnsorndeoff_ischeck_ = value;
}

// optional bool ZmqTransNodeOFF_Ischeck = 6;
inline bool ParamConfig_Config_Alarm_Mode::has_zmqtransnodeoff_ischeck() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParamConfig_Config_Alarm_Mode::set_has_zmqtransnodeoff_ischeck() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_has_zmqtransnodeoff_ischeck() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_zmqtransnodeoff_ischeck() {
  zmqtransnodeoff_ischeck_ = false;
  clear_has_zmqtransnodeoff_ischeck();
}
inline bool ParamConfig_Config_Alarm_Mode::zmqtransnodeoff_ischeck() const {
  return zmqtransnodeoff_ischeck_;
}
inline void ParamConfig_Config_Alarm_Mode::set_zmqtransnodeoff_ischeck(bool value) {
  set_has_zmqtransnodeoff_ischeck();
  zmqtransnodeoff_ischeck_ = value;
}

// optional bool JoyTestNodeOFF_Ischeck = 7;
inline bool ParamConfig_Config_Alarm_Mode::has_joytestnodeoff_ischeck() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParamConfig_Config_Alarm_Mode::set_has_joytestnodeoff_ischeck() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_has_joytestnodeoff_ischeck() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_joytestnodeoff_ischeck() {
  joytestnodeoff_ischeck_ = false;
  clear_has_joytestnodeoff_ischeck();
}
inline bool ParamConfig_Config_Alarm_Mode::joytestnodeoff_ischeck() const {
  return joytestnodeoff_ischeck_;
}
inline void ParamConfig_Config_Alarm_Mode::set_joytestnodeoff_ischeck(bool value) {
  set_has_joytestnodeoff_ischeck();
  joytestnodeoff_ischeck_ = value;
}

// optional bool Ph3ReadNodeOFF_Ischeck = 8;
inline bool ParamConfig_Config_Alarm_Mode::has_ph3readnodeoff_ischeck() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParamConfig_Config_Alarm_Mode::set_has_ph3readnodeoff_ischeck() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_has_ph3readnodeoff_ischeck() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_ph3readnodeoff_ischeck() {
  ph3readnodeoff_ischeck_ = false;
  clear_has_ph3readnodeoff_ischeck();
}
inline bool ParamConfig_Config_Alarm_Mode::ph3readnodeoff_ischeck() const {
  return ph3readnodeoff_ischeck_;
}
inline void ParamConfig_Config_Alarm_Mode::set_ph3readnodeoff_ischeck(bool value) {
  set_has_ph3readnodeoff_ischeck();
  ph3readnodeoff_ischeck_ = value;
}

// optional bool Ph3ReadComLost_Ischeck = 9;
inline bool ParamConfig_Config_Alarm_Mode::has_ph3readcomlost_ischeck() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParamConfig_Config_Alarm_Mode::set_has_ph3readcomlost_ischeck() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_has_ph3readcomlost_ischeck() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParamConfig_Config_Alarm_Mode::clear_ph3readcomlost_ischeck() {
  ph3readcomlost_ischeck_ = false;
  clear_has_ph3readcomlost_ischeck();
}
inline bool ParamConfig_Config_Alarm_Mode::ph3readcomlost_ischeck() const {
  return ph3readcomlost_ischeck_;
}
inline void ParamConfig_Config_Alarm_Mode::set_ph3readcomlost_ischeck(bool value) {
  set_has_ph3readcomlost_ischeck();
  ph3readcomlost_ischeck_ = value;
}

// -------------------------------------------------------------------

// ParamConfig

// optional .ParamConfig.Config_Mode_Driver Config_Driver_Msg = 1;
inline bool ParamConfig::has_config_driver_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamConfig::set_has_config_driver_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamConfig::clear_has_config_driver_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamConfig::clear_config_driver_msg() {
  if (config_driver_msg_ != NULL) config_driver_msg_->::ParamConfig_Config_Mode_Driver::Clear();
  clear_has_config_driver_msg();
}
inline const ::ParamConfig_Config_Mode_Driver& ParamConfig::config_driver_msg() const {
  return config_driver_msg_ != NULL ? *config_driver_msg_ : *default_instance_->config_driver_msg_;
}
inline ::ParamConfig_Config_Mode_Driver* ParamConfig::mutable_config_driver_msg() {
  set_has_config_driver_msg();
  if (config_driver_msg_ == NULL) config_driver_msg_ = new ::ParamConfig_Config_Mode_Driver;
  return config_driver_msg_;
}
inline ::ParamConfig_Config_Mode_Driver* ParamConfig::release_config_driver_msg() {
  clear_has_config_driver_msg();
  ::ParamConfig_Config_Mode_Driver* temp = config_driver_msg_;
  config_driver_msg_ = NULL;
  return temp;
}
inline void ParamConfig::set_allocated_config_driver_msg(::ParamConfig_Config_Mode_Driver* config_driver_msg) {
  delete config_driver_msg_;
  config_driver_msg_ = config_driver_msg;
  if (config_driver_msg) {
    set_has_config_driver_msg();
  } else {
    clear_has_config_driver_msg();
  }
}

// optional .ParamConfig.Config_Error_Mode Config_Error_Msg = 2;
inline bool ParamConfig::has_config_error_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamConfig::set_has_config_error_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamConfig::clear_has_config_error_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamConfig::clear_config_error_msg() {
  if (config_error_msg_ != NULL) config_error_msg_->::ParamConfig_Config_Error_Mode::Clear();
  clear_has_config_error_msg();
}
inline const ::ParamConfig_Config_Error_Mode& ParamConfig::config_error_msg() const {
  return config_error_msg_ != NULL ? *config_error_msg_ : *default_instance_->config_error_msg_;
}
inline ::ParamConfig_Config_Error_Mode* ParamConfig::mutable_config_error_msg() {
  set_has_config_error_msg();
  if (config_error_msg_ == NULL) config_error_msg_ = new ::ParamConfig_Config_Error_Mode;
  return config_error_msg_;
}
inline ::ParamConfig_Config_Error_Mode* ParamConfig::release_config_error_msg() {
  clear_has_config_error_msg();
  ::ParamConfig_Config_Error_Mode* temp = config_error_msg_;
  config_error_msg_ = NULL;
  return temp;
}
inline void ParamConfig::set_allocated_config_error_msg(::ParamConfig_Config_Error_Mode* config_error_msg) {
  delete config_error_msg_;
  config_error_msg_ = config_error_msg;
  if (config_error_msg) {
    set_has_config_error_msg();
  } else {
    clear_has_config_error_msg();
  }
}

// optional .ParamConfig.Config_Alarm_Mode Config_Alarm_Msg = 3;
inline bool ParamConfig::has_config_alarm_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamConfig::set_has_config_alarm_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamConfig::clear_has_config_alarm_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamConfig::clear_config_alarm_msg() {
  if (config_alarm_msg_ != NULL) config_alarm_msg_->::ParamConfig_Config_Alarm_Mode::Clear();
  clear_has_config_alarm_msg();
}
inline const ::ParamConfig_Config_Alarm_Mode& ParamConfig::config_alarm_msg() const {
  return config_alarm_msg_ != NULL ? *config_alarm_msg_ : *default_instance_->config_alarm_msg_;
}
inline ::ParamConfig_Config_Alarm_Mode* ParamConfig::mutable_config_alarm_msg() {
  set_has_config_alarm_msg();
  if (config_alarm_msg_ == NULL) config_alarm_msg_ = new ::ParamConfig_Config_Alarm_Mode;
  return config_alarm_msg_;
}
inline ::ParamConfig_Config_Alarm_Mode* ParamConfig::release_config_alarm_msg() {
  clear_has_config_alarm_msg();
  ::ParamConfig_Config_Alarm_Mode* temp = config_alarm_msg_;
  config_alarm_msg_ = NULL;
  return temp;
}
inline void ParamConfig::set_allocated_config_alarm_msg(::ParamConfig_Config_Alarm_Mode* config_alarm_msg) {
  delete config_alarm_msg_;
  config_alarm_msg_ = config_alarm_msg;
  if (config_alarm_msg) {
    set_has_config_alarm_msg();
  } else {
    clear_has_config_alarm_msg();
  }
}

// optional .ExternSensorConfig Config_extern_Msg = 4;
inline bool ParamConfig::has_config_extern_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamConfig::set_has_config_extern_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamConfig::clear_has_config_extern_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamConfig::clear_config_extern_msg() {
  if (config_extern_msg_ != NULL) config_extern_msg_->::ExternSensorConfig::Clear();
  clear_has_config_extern_msg();
}
inline const ::ExternSensorConfig& ParamConfig::config_extern_msg() const {
  return config_extern_msg_ != NULL ? *config_extern_msg_ : *default_instance_->config_extern_msg_;
}
inline ::ExternSensorConfig* ParamConfig::mutable_config_extern_msg() {
  set_has_config_extern_msg();
  if (config_extern_msg_ == NULL) config_extern_msg_ = new ::ExternSensorConfig;
  return config_extern_msg_;
}
inline ::ExternSensorConfig* ParamConfig::release_config_extern_msg() {
  clear_has_config_extern_msg();
  ::ExternSensorConfig* temp = config_extern_msg_;
  config_extern_msg_ = NULL;
  return temp;
}
inline void ParamConfig::set_allocated_config_extern_msg(::ExternSensorConfig* config_extern_msg) {
  delete config_extern_msg_;
  config_extern_msg_ = config_extern_msg;
  if (config_extern_msg) {
    set_has_config_extern_msg();
  } else {
    clear_has_config_extern_msg();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ParamConfig_2eproto__INCLUDED
