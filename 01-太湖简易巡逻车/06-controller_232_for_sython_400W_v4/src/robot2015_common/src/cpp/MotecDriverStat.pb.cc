// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MotecDriverStat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MotecDriverStat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MotecDriverStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotecDriverStat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MotecDriverStat_2eproto() {
  protobuf_AddDesc_MotecDriverStat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MotecDriverStat.proto");
  GOOGLE_CHECK(file != NULL);
  MotecDriverStat_descriptor_ = file->message_type(0);
  static const int MotecDriverStat_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, m_drivstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, m_serialno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_rated_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_rated_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_baudrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_rated_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_encoder_ppr_hi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_encoder_ppr_lo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_quick_soft_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_clear_error_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_quickstop_deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_softstop_deceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_current_kp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_current_ki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_position_kp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_position_ki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_velocity_kp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_velocity_ki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_velocity_feedf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_acceleration_feedf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_reserved_148_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_axisq_actual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_hall_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_motor_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_digital_in_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_contprot_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_maxvelocity_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_max_current_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_i2t_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_ipm_temperature_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_ipm_temperature_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_i2t_actual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_reserved299_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, ctrl_ctrl_vel_actual_),
  };
  MotecDriverStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotecDriverStat_descriptor_,
      MotecDriverStat::default_instance_,
      MotecDriverStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotecDriverStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotecDriverStat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MotecDriverStat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotecDriverStat_descriptor_, &MotecDriverStat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MotecDriverStat_2eproto() {
  delete MotecDriverStat::default_instance_;
  delete MotecDriverStat_reflection_;
}

void protobuf_AddDesc_MotecDriverStat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MotecDriverStat.proto\"\361\007\n\017MotecDriverS"
    "tat\022\024\n\014m_DrivStatus\030\001 \001(\005\022\022\n\nm_SerialNo\030"
    "\002 \001(\005\022\032\n\022CTRL_RATED_VOLTAGE\030\003 \001(\005\022\032\n\022CTR"
    "L_RATED_CURRENT\030\004 \001(\005\022\024\n\014CTRL_ADDRESS\030\005 "
    "\001(\005\022\025\n\rCTRL_BAUDRATE\030\006 \001(\005\022\030\n\020CTRL_RATED"
    "_POWER\030\007 \001(\005\022\033\n\023CTRL_ENCODER_PPR_HI\030\010 \001("
    "\005\022\033\n\023CTRL_ENCODER_PPR_LO\030\t \001(\005\022\034\n\024CTRL_Q"
    "UICK_SOFT_STOP\030\n \001(\005\022\035\n\025CTRL_CLEAR_ERROR"
    "_FLAG\030\013 \001(\005\022#\n\033CTRL_QUICKSTOP_DECELERATI"
    "ON\030\014 \001(\005\022\"\n\032CTRL_SOFTSTOP_DECELERATION\030\r"
    " \001(\005\022\027\n\017CTRL_CURRENT_KP\030\016 \001(\005\022\027\n\017CTRL_CU"
    "RRENT_KI\030\017 \001(\005\022\030\n\020CTRL_POSITION_KP\030\020 \001(\005"
    "\022\030\n\020CTRL_POSITION_KI\030\021 \001(\005\022\030\n\020CTRL_VELOC"
    "ITY_KP\030\022 \001(\005\022\030\n\020CTRL_VELOCITY_KI\030\023 \001(\005\022\033"
    "\n\023CTRL_VELOCITY_FEEDF\030\024 \001(\005\022\037\n\027CTRL_ACCE"
    "LERATION_FEEDF\030\025 \001(\005\022\031\n\021CTRL_RESERVED_14"
    "8\030\026 \001(\005\022\031\n\021CTRL_AXISQ_ACTUAL\030\027 \001(\005\022\030\n\020CT"
    "RL_HALL_STATUS\030\030 \001(\005\022\036\n\026CTRL_MOTOR_TEMPE"
    "RATURE\030\031 \001(\005\022\036\n\026CTRL_DIGITAL_IN_STATUS\030\032"
    " \001(\005\022\035\n\025CTRL_CONTPROT_CURRENT\030\033 \001(\005\022\036\n\026C"
    "TRL_MAXVELOCITY_LIMIT\030\034 \001(\005\022\036\n\026CTRL_MAX_"
    "CURRENT_LIMIT\030\035 \001(\005\022\025\n\rCTRL_I2T_TIME\030\036 \001"
    "(\005\022\"\n\032CTRL_IPM_TEMPERATURE_ALARM\030\037 \001(\005\022\""
    "\n\032CTRL_IPM_TEMPERATURE_FAULT\030  \001(\005\022\027\n\017CT"
    "RL_I2T_ACTUAL\030! \001(\005\022\030\n\020CTRL_RESERVED299\030"
    "\" \001(\005\022\034\n\024CTRL_CTRL_VEL_ACTUAL\030# \001(\005", 1035);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MotecDriverStat.proto", &protobuf_RegisterTypes);
  MotecDriverStat::default_instance_ = new MotecDriverStat();
  MotecDriverStat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MotecDriverStat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MotecDriverStat_2eproto {
  StaticDescriptorInitializer_MotecDriverStat_2eproto() {
    protobuf_AddDesc_MotecDriverStat_2eproto();
  }
} static_descriptor_initializer_MotecDriverStat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MotecDriverStat::kMDrivStatusFieldNumber;
const int MotecDriverStat::kMSerialNoFieldNumber;
const int MotecDriverStat::kCTRLRATEDVOLTAGEFieldNumber;
const int MotecDriverStat::kCTRLRATEDCURRENTFieldNumber;
const int MotecDriverStat::kCTRLADDRESSFieldNumber;
const int MotecDriverStat::kCTRLBAUDRATEFieldNumber;
const int MotecDriverStat::kCTRLRATEDPOWERFieldNumber;
const int MotecDriverStat::kCTRLENCODERPPRHIFieldNumber;
const int MotecDriverStat::kCTRLENCODERPPRLOFieldNumber;
const int MotecDriverStat::kCTRLQUICKSOFTSTOPFieldNumber;
const int MotecDriverStat::kCTRLCLEARERRORFLAGFieldNumber;
const int MotecDriverStat::kCTRLQUICKSTOPDECELERATIONFieldNumber;
const int MotecDriverStat::kCTRLSOFTSTOPDECELERATIONFieldNumber;
const int MotecDriverStat::kCTRLCURRENTKPFieldNumber;
const int MotecDriverStat::kCTRLCURRENTKIFieldNumber;
const int MotecDriverStat::kCTRLPOSITIONKPFieldNumber;
const int MotecDriverStat::kCTRLPOSITIONKIFieldNumber;
const int MotecDriverStat::kCTRLVELOCITYKPFieldNumber;
const int MotecDriverStat::kCTRLVELOCITYKIFieldNumber;
const int MotecDriverStat::kCTRLVELOCITYFEEDFFieldNumber;
const int MotecDriverStat::kCTRLACCELERATIONFEEDFFieldNumber;
const int MotecDriverStat::kCTRLRESERVED148FieldNumber;
const int MotecDriverStat::kCTRLAXISQACTUALFieldNumber;
const int MotecDriverStat::kCTRLHALLSTATUSFieldNumber;
const int MotecDriverStat::kCTRLMOTORTEMPERATUREFieldNumber;
const int MotecDriverStat::kCTRLDIGITALINSTATUSFieldNumber;
const int MotecDriverStat::kCTRLCONTPROTCURRENTFieldNumber;
const int MotecDriverStat::kCTRLMAXVELOCITYLIMITFieldNumber;
const int MotecDriverStat::kCTRLMAXCURRENTLIMITFieldNumber;
const int MotecDriverStat::kCTRLI2TTIMEFieldNumber;
const int MotecDriverStat::kCTRLIPMTEMPERATUREALARMFieldNumber;
const int MotecDriverStat::kCTRLIPMTEMPERATUREFAULTFieldNumber;
const int MotecDriverStat::kCTRLI2TACTUALFieldNumber;
const int MotecDriverStat::kCTRLRESERVED299FieldNumber;
const int MotecDriverStat::kCTRLCTRLVELACTUALFieldNumber;
#endif  // !_MSC_VER

MotecDriverStat::MotecDriverStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MotecDriverStat::InitAsDefaultInstance() {
}

MotecDriverStat::MotecDriverStat(const MotecDriverStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MotecDriverStat::SharedCtor() {
  _cached_size_ = 0;
  m_drivstatus_ = 0;
  m_serialno_ = 0;
  ctrl_rated_voltage_ = 0;
  ctrl_rated_current_ = 0;
  ctrl_address_ = 0;
  ctrl_baudrate_ = 0;
  ctrl_rated_power_ = 0;
  ctrl_encoder_ppr_hi_ = 0;
  ctrl_encoder_ppr_lo_ = 0;
  ctrl_quick_soft_stop_ = 0;
  ctrl_clear_error_flag_ = 0;
  ctrl_quickstop_deceleration_ = 0;
  ctrl_softstop_deceleration_ = 0;
  ctrl_current_kp_ = 0;
  ctrl_current_ki_ = 0;
  ctrl_position_kp_ = 0;
  ctrl_position_ki_ = 0;
  ctrl_velocity_kp_ = 0;
  ctrl_velocity_ki_ = 0;
  ctrl_velocity_feedf_ = 0;
  ctrl_acceleration_feedf_ = 0;
  ctrl_reserved_148_ = 0;
  ctrl_axisq_actual_ = 0;
  ctrl_hall_status_ = 0;
  ctrl_motor_temperature_ = 0;
  ctrl_digital_in_status_ = 0;
  ctrl_contprot_current_ = 0;
  ctrl_maxvelocity_limit_ = 0;
  ctrl_max_current_limit_ = 0;
  ctrl_i2t_time_ = 0;
  ctrl_ipm_temperature_alarm_ = 0;
  ctrl_ipm_temperature_fault_ = 0;
  ctrl_i2t_actual_ = 0;
  ctrl_reserved299_ = 0;
  ctrl_ctrl_vel_actual_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotecDriverStat::~MotecDriverStat() {
  SharedDtor();
}

void MotecDriverStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MotecDriverStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotecDriverStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotecDriverStat_descriptor_;
}

const MotecDriverStat& MotecDriverStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MotecDriverStat_2eproto();
  return *default_instance_;
}

MotecDriverStat* MotecDriverStat::default_instance_ = NULL;

MotecDriverStat* MotecDriverStat::New() const {
  return new MotecDriverStat;
}

void MotecDriverStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_drivstatus_ = 0;
    m_serialno_ = 0;
    ctrl_rated_voltage_ = 0;
    ctrl_rated_current_ = 0;
    ctrl_address_ = 0;
    ctrl_baudrate_ = 0;
    ctrl_rated_power_ = 0;
    ctrl_encoder_ppr_hi_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ctrl_encoder_ppr_lo_ = 0;
    ctrl_quick_soft_stop_ = 0;
    ctrl_clear_error_flag_ = 0;
    ctrl_quickstop_deceleration_ = 0;
    ctrl_softstop_deceleration_ = 0;
    ctrl_current_kp_ = 0;
    ctrl_current_ki_ = 0;
    ctrl_position_kp_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ctrl_position_ki_ = 0;
    ctrl_velocity_kp_ = 0;
    ctrl_velocity_ki_ = 0;
    ctrl_velocity_feedf_ = 0;
    ctrl_acceleration_feedf_ = 0;
    ctrl_reserved_148_ = 0;
    ctrl_axisq_actual_ = 0;
    ctrl_hall_status_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ctrl_motor_temperature_ = 0;
    ctrl_digital_in_status_ = 0;
    ctrl_contprot_current_ = 0;
    ctrl_maxvelocity_limit_ = 0;
    ctrl_max_current_limit_ = 0;
    ctrl_i2t_time_ = 0;
    ctrl_ipm_temperature_alarm_ = 0;
    ctrl_ipm_temperature_fault_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    ctrl_i2t_actual_ = 0;
    ctrl_reserved299_ = 0;
    ctrl_ctrl_vel_actual_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotecDriverStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_DrivStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_drivstatus_)));
          set_has_m_drivstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_SerialNo;
        break;
      }

      // optional int32 m_SerialNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_SerialNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_serialno_)));
          set_has_m_serialno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CTRL_RATED_VOLTAGE;
        break;
      }

      // optional int32 CTRL_RATED_VOLTAGE = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_RATED_VOLTAGE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_rated_voltage_)));
          set_has_ctrl_rated_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CTRL_RATED_CURRENT;
        break;
      }

      // optional int32 CTRL_RATED_CURRENT = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_RATED_CURRENT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_rated_current_)));
          set_has_ctrl_rated_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CTRL_ADDRESS;
        break;
      }

      // optional int32 CTRL_ADDRESS = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_ADDRESS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_address_)));
          set_has_ctrl_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CTRL_BAUDRATE;
        break;
      }

      // optional int32 CTRL_BAUDRATE = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_BAUDRATE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_baudrate_)));
          set_has_ctrl_baudrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CTRL_RATED_POWER;
        break;
      }

      // optional int32 CTRL_RATED_POWER = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_RATED_POWER:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_rated_power_)));
          set_has_ctrl_rated_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CTRL_ENCODER_PPR_HI;
        break;
      }

      // optional int32 CTRL_ENCODER_PPR_HI = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_ENCODER_PPR_HI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_encoder_ppr_hi_)));
          set_has_ctrl_encoder_ppr_hi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CTRL_ENCODER_PPR_LO;
        break;
      }

      // optional int32 CTRL_ENCODER_PPR_LO = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_ENCODER_PPR_LO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_encoder_ppr_lo_)));
          set_has_ctrl_encoder_ppr_lo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CTRL_QUICK_SOFT_STOP;
        break;
      }

      // optional int32 CTRL_QUICK_SOFT_STOP = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_QUICK_SOFT_STOP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_quick_soft_stop_)));
          set_has_ctrl_quick_soft_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CTRL_CLEAR_ERROR_FLAG;
        break;
      }

      // optional int32 CTRL_CLEAR_ERROR_FLAG = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_CLEAR_ERROR_FLAG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_clear_error_flag_)));
          set_has_ctrl_clear_error_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CTRL_QUICKSTOP_DECELERATION;
        break;
      }

      // optional int32 CTRL_QUICKSTOP_DECELERATION = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_QUICKSTOP_DECELERATION:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_quickstop_deceleration_)));
          set_has_ctrl_quickstop_deceleration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CTRL_SOFTSTOP_DECELERATION;
        break;
      }

      // optional int32 CTRL_SOFTSTOP_DECELERATION = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_SOFTSTOP_DECELERATION:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_softstop_deceleration_)));
          set_has_ctrl_softstop_deceleration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CTRL_CURRENT_KP;
        break;
      }

      // optional int32 CTRL_CURRENT_KP = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_CURRENT_KP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_current_kp_)));
          set_has_ctrl_current_kp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CTRL_CURRENT_KI;
        break;
      }

      // optional int32 CTRL_CURRENT_KI = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_CURRENT_KI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_current_ki_)));
          set_has_ctrl_current_ki();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_CTRL_POSITION_KP;
        break;
      }

      // optional int32 CTRL_POSITION_KP = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_POSITION_KP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_position_kp_)));
          set_has_ctrl_position_kp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_CTRL_POSITION_KI;
        break;
      }

      // optional int32 CTRL_POSITION_KI = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_POSITION_KI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_position_ki_)));
          set_has_ctrl_position_ki();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_CTRL_VELOCITY_KP;
        break;
      }

      // optional int32 CTRL_VELOCITY_KP = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_VELOCITY_KP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_velocity_kp_)));
          set_has_ctrl_velocity_kp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_CTRL_VELOCITY_KI;
        break;
      }

      // optional int32 CTRL_VELOCITY_KI = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_VELOCITY_KI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_velocity_ki_)));
          set_has_ctrl_velocity_ki();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_CTRL_VELOCITY_FEEDF;
        break;
      }

      // optional int32 CTRL_VELOCITY_FEEDF = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_VELOCITY_FEEDF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_velocity_feedf_)));
          set_has_ctrl_velocity_feedf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_CTRL_ACCELERATION_FEEDF;
        break;
      }

      // optional int32 CTRL_ACCELERATION_FEEDF = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_ACCELERATION_FEEDF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_acceleration_feedf_)));
          set_has_ctrl_acceleration_feedf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_CTRL_RESERVED_148;
        break;
      }

      // optional int32 CTRL_RESERVED_148 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_RESERVED_148:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_reserved_148_)));
          set_has_ctrl_reserved_148();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_CTRL_AXISQ_ACTUAL;
        break;
      }

      // optional int32 CTRL_AXISQ_ACTUAL = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_AXISQ_ACTUAL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_axisq_actual_)));
          set_has_ctrl_axisq_actual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_CTRL_HALL_STATUS;
        break;
      }

      // optional int32 CTRL_HALL_STATUS = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_HALL_STATUS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_hall_status_)));
          set_has_ctrl_hall_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_CTRL_MOTOR_TEMPERATURE;
        break;
      }

      // optional int32 CTRL_MOTOR_TEMPERATURE = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_MOTOR_TEMPERATURE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_motor_temperature_)));
          set_has_ctrl_motor_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_CTRL_DIGITAL_IN_STATUS;
        break;
      }

      // optional int32 CTRL_DIGITAL_IN_STATUS = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_DIGITAL_IN_STATUS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_digital_in_status_)));
          set_has_ctrl_digital_in_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_CTRL_CONTPROT_CURRENT;
        break;
      }

      // optional int32 CTRL_CONTPROT_CURRENT = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_CONTPROT_CURRENT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_contprot_current_)));
          set_has_ctrl_contprot_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_CTRL_MAXVELOCITY_LIMIT;
        break;
      }

      // optional int32 CTRL_MAXVELOCITY_LIMIT = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_MAXVELOCITY_LIMIT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_maxvelocity_limit_)));
          set_has_ctrl_maxvelocity_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_CTRL_MAX_CURRENT_LIMIT;
        break;
      }

      // optional int32 CTRL_MAX_CURRENT_LIMIT = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_MAX_CURRENT_LIMIT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_max_current_limit_)));
          set_has_ctrl_max_current_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_CTRL_I2T_TIME;
        break;
      }

      // optional int32 CTRL_I2T_TIME = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_I2T_TIME:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_i2t_time_)));
          set_has_ctrl_i2t_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_CTRL_IPM_TEMPERATURE_ALARM;
        break;
      }

      // optional int32 CTRL_IPM_TEMPERATURE_ALARM = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_IPM_TEMPERATURE_ALARM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_ipm_temperature_alarm_)));
          set_has_ctrl_ipm_temperature_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_CTRL_IPM_TEMPERATURE_FAULT;
        break;
      }

      // optional int32 CTRL_IPM_TEMPERATURE_FAULT = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_IPM_TEMPERATURE_FAULT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_ipm_temperature_fault_)));
          set_has_ctrl_ipm_temperature_fault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_CTRL_I2T_ACTUAL;
        break;
      }

      // optional int32 CTRL_I2T_ACTUAL = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_I2T_ACTUAL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_i2t_actual_)));
          set_has_ctrl_i2t_actual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_CTRL_RESERVED299;
        break;
      }

      // optional int32 CTRL_RESERVED299 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_RESERVED299:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_reserved299_)));
          set_has_ctrl_reserved299();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_CTRL_CTRL_VEL_ACTUAL;
        break;
      }

      // optional int32 CTRL_CTRL_VEL_ACTUAL = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CTRL_CTRL_VEL_ACTUAL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_ctrl_vel_actual_)));
          set_has_ctrl_ctrl_vel_actual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotecDriverStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_DrivStatus = 1;
  if (has_m_drivstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_drivstatus(), output);
  }

  // optional int32 m_SerialNo = 2;
  if (has_m_serialno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_serialno(), output);
  }

  // optional int32 CTRL_RATED_VOLTAGE = 3;
  if (has_ctrl_rated_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ctrl_rated_voltage(), output);
  }

  // optional int32 CTRL_RATED_CURRENT = 4;
  if (has_ctrl_rated_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ctrl_rated_current(), output);
  }

  // optional int32 CTRL_ADDRESS = 5;
  if (has_ctrl_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ctrl_address(), output);
  }

  // optional int32 CTRL_BAUDRATE = 6;
  if (has_ctrl_baudrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ctrl_baudrate(), output);
  }

  // optional int32 CTRL_RATED_POWER = 7;
  if (has_ctrl_rated_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ctrl_rated_power(), output);
  }

  // optional int32 CTRL_ENCODER_PPR_HI = 8;
  if (has_ctrl_encoder_ppr_hi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ctrl_encoder_ppr_hi(), output);
  }

  // optional int32 CTRL_ENCODER_PPR_LO = 9;
  if (has_ctrl_encoder_ppr_lo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ctrl_encoder_ppr_lo(), output);
  }

  // optional int32 CTRL_QUICK_SOFT_STOP = 10;
  if (has_ctrl_quick_soft_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ctrl_quick_soft_stop(), output);
  }

  // optional int32 CTRL_CLEAR_ERROR_FLAG = 11;
  if (has_ctrl_clear_error_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ctrl_clear_error_flag(), output);
  }

  // optional int32 CTRL_QUICKSTOP_DECELERATION = 12;
  if (has_ctrl_quickstop_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ctrl_quickstop_deceleration(), output);
  }

  // optional int32 CTRL_SOFTSTOP_DECELERATION = 13;
  if (has_ctrl_softstop_deceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ctrl_softstop_deceleration(), output);
  }

  // optional int32 CTRL_CURRENT_KP = 14;
  if (has_ctrl_current_kp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ctrl_current_kp(), output);
  }

  // optional int32 CTRL_CURRENT_KI = 15;
  if (has_ctrl_current_ki()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ctrl_current_ki(), output);
  }

  // optional int32 CTRL_POSITION_KP = 16;
  if (has_ctrl_position_kp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->ctrl_position_kp(), output);
  }

  // optional int32 CTRL_POSITION_KI = 17;
  if (has_ctrl_position_ki()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->ctrl_position_ki(), output);
  }

  // optional int32 CTRL_VELOCITY_KP = 18;
  if (has_ctrl_velocity_kp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ctrl_velocity_kp(), output);
  }

  // optional int32 CTRL_VELOCITY_KI = 19;
  if (has_ctrl_velocity_ki()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->ctrl_velocity_ki(), output);
  }

  // optional int32 CTRL_VELOCITY_FEEDF = 20;
  if (has_ctrl_velocity_feedf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->ctrl_velocity_feedf(), output);
  }

  // optional int32 CTRL_ACCELERATION_FEEDF = 21;
  if (has_ctrl_acceleration_feedf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->ctrl_acceleration_feedf(), output);
  }

  // optional int32 CTRL_RESERVED_148 = 22;
  if (has_ctrl_reserved_148()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->ctrl_reserved_148(), output);
  }

  // optional int32 CTRL_AXISQ_ACTUAL = 23;
  if (has_ctrl_axisq_actual()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->ctrl_axisq_actual(), output);
  }

  // optional int32 CTRL_HALL_STATUS = 24;
  if (has_ctrl_hall_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->ctrl_hall_status(), output);
  }

  // optional int32 CTRL_MOTOR_TEMPERATURE = 25;
  if (has_ctrl_motor_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ctrl_motor_temperature(), output);
  }

  // optional int32 CTRL_DIGITAL_IN_STATUS = 26;
  if (has_ctrl_digital_in_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ctrl_digital_in_status(), output);
  }

  // optional int32 CTRL_CONTPROT_CURRENT = 27;
  if (has_ctrl_contprot_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->ctrl_contprot_current(), output);
  }

  // optional int32 CTRL_MAXVELOCITY_LIMIT = 28;
  if (has_ctrl_maxvelocity_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->ctrl_maxvelocity_limit(), output);
  }

  // optional int32 CTRL_MAX_CURRENT_LIMIT = 29;
  if (has_ctrl_max_current_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->ctrl_max_current_limit(), output);
  }

  // optional int32 CTRL_I2T_TIME = 30;
  if (has_ctrl_i2t_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->ctrl_i2t_time(), output);
  }

  // optional int32 CTRL_IPM_TEMPERATURE_ALARM = 31;
  if (has_ctrl_ipm_temperature_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->ctrl_ipm_temperature_alarm(), output);
  }

  // optional int32 CTRL_IPM_TEMPERATURE_FAULT = 32;
  if (has_ctrl_ipm_temperature_fault()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->ctrl_ipm_temperature_fault(), output);
  }

  // optional int32 CTRL_I2T_ACTUAL = 33;
  if (has_ctrl_i2t_actual()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->ctrl_i2t_actual(), output);
  }

  // optional int32 CTRL_RESERVED299 = 34;
  if (has_ctrl_reserved299()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->ctrl_reserved299(), output);
  }

  // optional int32 CTRL_CTRL_VEL_ACTUAL = 35;
  if (has_ctrl_ctrl_vel_actual()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->ctrl_ctrl_vel_actual(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MotecDriverStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_DrivStatus = 1;
  if (has_m_drivstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_drivstatus(), target);
  }

  // optional int32 m_SerialNo = 2;
  if (has_m_serialno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_serialno(), target);
  }

  // optional int32 CTRL_RATED_VOLTAGE = 3;
  if (has_ctrl_rated_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ctrl_rated_voltage(), target);
  }

  // optional int32 CTRL_RATED_CURRENT = 4;
  if (has_ctrl_rated_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ctrl_rated_current(), target);
  }

  // optional int32 CTRL_ADDRESS = 5;
  if (has_ctrl_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ctrl_address(), target);
  }

  // optional int32 CTRL_BAUDRATE = 6;
  if (has_ctrl_baudrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ctrl_baudrate(), target);
  }

  // optional int32 CTRL_RATED_POWER = 7;
  if (has_ctrl_rated_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ctrl_rated_power(), target);
  }

  // optional int32 CTRL_ENCODER_PPR_HI = 8;
  if (has_ctrl_encoder_ppr_hi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ctrl_encoder_ppr_hi(), target);
  }

  // optional int32 CTRL_ENCODER_PPR_LO = 9;
  if (has_ctrl_encoder_ppr_lo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ctrl_encoder_ppr_lo(), target);
  }

  // optional int32 CTRL_QUICK_SOFT_STOP = 10;
  if (has_ctrl_quick_soft_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ctrl_quick_soft_stop(), target);
  }

  // optional int32 CTRL_CLEAR_ERROR_FLAG = 11;
  if (has_ctrl_clear_error_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ctrl_clear_error_flag(), target);
  }

  // optional int32 CTRL_QUICKSTOP_DECELERATION = 12;
  if (has_ctrl_quickstop_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ctrl_quickstop_deceleration(), target);
  }

  // optional int32 CTRL_SOFTSTOP_DECELERATION = 13;
  if (has_ctrl_softstop_deceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ctrl_softstop_deceleration(), target);
  }

  // optional int32 CTRL_CURRENT_KP = 14;
  if (has_ctrl_current_kp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ctrl_current_kp(), target);
  }

  // optional int32 CTRL_CURRENT_KI = 15;
  if (has_ctrl_current_ki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ctrl_current_ki(), target);
  }

  // optional int32 CTRL_POSITION_KP = 16;
  if (has_ctrl_position_kp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->ctrl_position_kp(), target);
  }

  // optional int32 CTRL_POSITION_KI = 17;
  if (has_ctrl_position_ki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->ctrl_position_ki(), target);
  }

  // optional int32 CTRL_VELOCITY_KP = 18;
  if (has_ctrl_velocity_kp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->ctrl_velocity_kp(), target);
  }

  // optional int32 CTRL_VELOCITY_KI = 19;
  if (has_ctrl_velocity_ki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->ctrl_velocity_ki(), target);
  }

  // optional int32 CTRL_VELOCITY_FEEDF = 20;
  if (has_ctrl_velocity_feedf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->ctrl_velocity_feedf(), target);
  }

  // optional int32 CTRL_ACCELERATION_FEEDF = 21;
  if (has_ctrl_acceleration_feedf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->ctrl_acceleration_feedf(), target);
  }

  // optional int32 CTRL_RESERVED_148 = 22;
  if (has_ctrl_reserved_148()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->ctrl_reserved_148(), target);
  }

  // optional int32 CTRL_AXISQ_ACTUAL = 23;
  if (has_ctrl_axisq_actual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->ctrl_axisq_actual(), target);
  }

  // optional int32 CTRL_HALL_STATUS = 24;
  if (has_ctrl_hall_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->ctrl_hall_status(), target);
  }

  // optional int32 CTRL_MOTOR_TEMPERATURE = 25;
  if (has_ctrl_motor_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ctrl_motor_temperature(), target);
  }

  // optional int32 CTRL_DIGITAL_IN_STATUS = 26;
  if (has_ctrl_digital_in_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ctrl_digital_in_status(), target);
  }

  // optional int32 CTRL_CONTPROT_CURRENT = 27;
  if (has_ctrl_contprot_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->ctrl_contprot_current(), target);
  }

  // optional int32 CTRL_MAXVELOCITY_LIMIT = 28;
  if (has_ctrl_maxvelocity_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->ctrl_maxvelocity_limit(), target);
  }

  // optional int32 CTRL_MAX_CURRENT_LIMIT = 29;
  if (has_ctrl_max_current_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->ctrl_max_current_limit(), target);
  }

  // optional int32 CTRL_I2T_TIME = 30;
  if (has_ctrl_i2t_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->ctrl_i2t_time(), target);
  }

  // optional int32 CTRL_IPM_TEMPERATURE_ALARM = 31;
  if (has_ctrl_ipm_temperature_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->ctrl_ipm_temperature_alarm(), target);
  }

  // optional int32 CTRL_IPM_TEMPERATURE_FAULT = 32;
  if (has_ctrl_ipm_temperature_fault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->ctrl_ipm_temperature_fault(), target);
  }

  // optional int32 CTRL_I2T_ACTUAL = 33;
  if (has_ctrl_i2t_actual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->ctrl_i2t_actual(), target);
  }

  // optional int32 CTRL_RESERVED299 = 34;
  if (has_ctrl_reserved299()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->ctrl_reserved299(), target);
  }

  // optional int32 CTRL_CTRL_VEL_ACTUAL = 35;
  if (has_ctrl_ctrl_vel_actual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->ctrl_ctrl_vel_actual(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MotecDriverStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_DrivStatus = 1;
    if (has_m_drivstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_drivstatus());
    }

    // optional int32 m_SerialNo = 2;
    if (has_m_serialno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_serialno());
    }

    // optional int32 CTRL_RATED_VOLTAGE = 3;
    if (has_ctrl_rated_voltage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_rated_voltage());
    }

    // optional int32 CTRL_RATED_CURRENT = 4;
    if (has_ctrl_rated_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_rated_current());
    }

    // optional int32 CTRL_ADDRESS = 5;
    if (has_ctrl_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_address());
    }

    // optional int32 CTRL_BAUDRATE = 6;
    if (has_ctrl_baudrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_baudrate());
    }

    // optional int32 CTRL_RATED_POWER = 7;
    if (has_ctrl_rated_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_rated_power());
    }

    // optional int32 CTRL_ENCODER_PPR_HI = 8;
    if (has_ctrl_encoder_ppr_hi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_encoder_ppr_hi());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 CTRL_ENCODER_PPR_LO = 9;
    if (has_ctrl_encoder_ppr_lo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_encoder_ppr_lo());
    }

    // optional int32 CTRL_QUICK_SOFT_STOP = 10;
    if (has_ctrl_quick_soft_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_quick_soft_stop());
    }

    // optional int32 CTRL_CLEAR_ERROR_FLAG = 11;
    if (has_ctrl_clear_error_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_clear_error_flag());
    }

    // optional int32 CTRL_QUICKSTOP_DECELERATION = 12;
    if (has_ctrl_quickstop_deceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_quickstop_deceleration());
    }

    // optional int32 CTRL_SOFTSTOP_DECELERATION = 13;
    if (has_ctrl_softstop_deceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_softstop_deceleration());
    }

    // optional int32 CTRL_CURRENT_KP = 14;
    if (has_ctrl_current_kp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_current_kp());
    }

    // optional int32 CTRL_CURRENT_KI = 15;
    if (has_ctrl_current_ki()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_current_ki());
    }

    // optional int32 CTRL_POSITION_KP = 16;
    if (has_ctrl_position_kp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_position_kp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 CTRL_POSITION_KI = 17;
    if (has_ctrl_position_ki()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_position_ki());
    }

    // optional int32 CTRL_VELOCITY_KP = 18;
    if (has_ctrl_velocity_kp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_velocity_kp());
    }

    // optional int32 CTRL_VELOCITY_KI = 19;
    if (has_ctrl_velocity_ki()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_velocity_ki());
    }

    // optional int32 CTRL_VELOCITY_FEEDF = 20;
    if (has_ctrl_velocity_feedf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_velocity_feedf());
    }

    // optional int32 CTRL_ACCELERATION_FEEDF = 21;
    if (has_ctrl_acceleration_feedf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_acceleration_feedf());
    }

    // optional int32 CTRL_RESERVED_148 = 22;
    if (has_ctrl_reserved_148()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_reserved_148());
    }

    // optional int32 CTRL_AXISQ_ACTUAL = 23;
    if (has_ctrl_axisq_actual()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_axisq_actual());
    }

    // optional int32 CTRL_HALL_STATUS = 24;
    if (has_ctrl_hall_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_hall_status());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 CTRL_MOTOR_TEMPERATURE = 25;
    if (has_ctrl_motor_temperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_motor_temperature());
    }

    // optional int32 CTRL_DIGITAL_IN_STATUS = 26;
    if (has_ctrl_digital_in_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_digital_in_status());
    }

    // optional int32 CTRL_CONTPROT_CURRENT = 27;
    if (has_ctrl_contprot_current()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_contprot_current());
    }

    // optional int32 CTRL_MAXVELOCITY_LIMIT = 28;
    if (has_ctrl_maxvelocity_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_maxvelocity_limit());
    }

    // optional int32 CTRL_MAX_CURRENT_LIMIT = 29;
    if (has_ctrl_max_current_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_max_current_limit());
    }

    // optional int32 CTRL_I2T_TIME = 30;
    if (has_ctrl_i2t_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_i2t_time());
    }

    // optional int32 CTRL_IPM_TEMPERATURE_ALARM = 31;
    if (has_ctrl_ipm_temperature_alarm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_ipm_temperature_alarm());
    }

    // optional int32 CTRL_IPM_TEMPERATURE_FAULT = 32;
    if (has_ctrl_ipm_temperature_fault()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_ipm_temperature_fault());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 CTRL_I2T_ACTUAL = 33;
    if (has_ctrl_i2t_actual()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_i2t_actual());
    }

    // optional int32 CTRL_RESERVED299 = 34;
    if (has_ctrl_reserved299()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_reserved299());
    }

    // optional int32 CTRL_CTRL_VEL_ACTUAL = 35;
    if (has_ctrl_ctrl_vel_actual()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_ctrl_vel_actual());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotecDriverStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotecDriverStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotecDriverStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotecDriverStat::MergeFrom(const MotecDriverStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_drivstatus()) {
      set_m_drivstatus(from.m_drivstatus());
    }
    if (from.has_m_serialno()) {
      set_m_serialno(from.m_serialno());
    }
    if (from.has_ctrl_rated_voltage()) {
      set_ctrl_rated_voltage(from.ctrl_rated_voltage());
    }
    if (from.has_ctrl_rated_current()) {
      set_ctrl_rated_current(from.ctrl_rated_current());
    }
    if (from.has_ctrl_address()) {
      set_ctrl_address(from.ctrl_address());
    }
    if (from.has_ctrl_baudrate()) {
      set_ctrl_baudrate(from.ctrl_baudrate());
    }
    if (from.has_ctrl_rated_power()) {
      set_ctrl_rated_power(from.ctrl_rated_power());
    }
    if (from.has_ctrl_encoder_ppr_hi()) {
      set_ctrl_encoder_ppr_hi(from.ctrl_encoder_ppr_hi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ctrl_encoder_ppr_lo()) {
      set_ctrl_encoder_ppr_lo(from.ctrl_encoder_ppr_lo());
    }
    if (from.has_ctrl_quick_soft_stop()) {
      set_ctrl_quick_soft_stop(from.ctrl_quick_soft_stop());
    }
    if (from.has_ctrl_clear_error_flag()) {
      set_ctrl_clear_error_flag(from.ctrl_clear_error_flag());
    }
    if (from.has_ctrl_quickstop_deceleration()) {
      set_ctrl_quickstop_deceleration(from.ctrl_quickstop_deceleration());
    }
    if (from.has_ctrl_softstop_deceleration()) {
      set_ctrl_softstop_deceleration(from.ctrl_softstop_deceleration());
    }
    if (from.has_ctrl_current_kp()) {
      set_ctrl_current_kp(from.ctrl_current_kp());
    }
    if (from.has_ctrl_current_ki()) {
      set_ctrl_current_ki(from.ctrl_current_ki());
    }
    if (from.has_ctrl_position_kp()) {
      set_ctrl_position_kp(from.ctrl_position_kp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ctrl_position_ki()) {
      set_ctrl_position_ki(from.ctrl_position_ki());
    }
    if (from.has_ctrl_velocity_kp()) {
      set_ctrl_velocity_kp(from.ctrl_velocity_kp());
    }
    if (from.has_ctrl_velocity_ki()) {
      set_ctrl_velocity_ki(from.ctrl_velocity_ki());
    }
    if (from.has_ctrl_velocity_feedf()) {
      set_ctrl_velocity_feedf(from.ctrl_velocity_feedf());
    }
    if (from.has_ctrl_acceleration_feedf()) {
      set_ctrl_acceleration_feedf(from.ctrl_acceleration_feedf());
    }
    if (from.has_ctrl_reserved_148()) {
      set_ctrl_reserved_148(from.ctrl_reserved_148());
    }
    if (from.has_ctrl_axisq_actual()) {
      set_ctrl_axisq_actual(from.ctrl_axisq_actual());
    }
    if (from.has_ctrl_hall_status()) {
      set_ctrl_hall_status(from.ctrl_hall_status());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ctrl_motor_temperature()) {
      set_ctrl_motor_temperature(from.ctrl_motor_temperature());
    }
    if (from.has_ctrl_digital_in_status()) {
      set_ctrl_digital_in_status(from.ctrl_digital_in_status());
    }
    if (from.has_ctrl_contprot_current()) {
      set_ctrl_contprot_current(from.ctrl_contprot_current());
    }
    if (from.has_ctrl_maxvelocity_limit()) {
      set_ctrl_maxvelocity_limit(from.ctrl_maxvelocity_limit());
    }
    if (from.has_ctrl_max_current_limit()) {
      set_ctrl_max_current_limit(from.ctrl_max_current_limit());
    }
    if (from.has_ctrl_i2t_time()) {
      set_ctrl_i2t_time(from.ctrl_i2t_time());
    }
    if (from.has_ctrl_ipm_temperature_alarm()) {
      set_ctrl_ipm_temperature_alarm(from.ctrl_ipm_temperature_alarm());
    }
    if (from.has_ctrl_ipm_temperature_fault()) {
      set_ctrl_ipm_temperature_fault(from.ctrl_ipm_temperature_fault());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ctrl_i2t_actual()) {
      set_ctrl_i2t_actual(from.ctrl_i2t_actual());
    }
    if (from.has_ctrl_reserved299()) {
      set_ctrl_reserved299(from.ctrl_reserved299());
    }
    if (from.has_ctrl_ctrl_vel_actual()) {
      set_ctrl_ctrl_vel_actual(from.ctrl_ctrl_vel_actual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotecDriverStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotecDriverStat::CopyFrom(const MotecDriverStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotecDriverStat::IsInitialized() const {

  return true;
}

void MotecDriverStat::Swap(MotecDriverStat* other) {
  if (other != this) {
    std::swap(m_drivstatus_, other->m_drivstatus_);
    std::swap(m_serialno_, other->m_serialno_);
    std::swap(ctrl_rated_voltage_, other->ctrl_rated_voltage_);
    std::swap(ctrl_rated_current_, other->ctrl_rated_current_);
    std::swap(ctrl_address_, other->ctrl_address_);
    std::swap(ctrl_baudrate_, other->ctrl_baudrate_);
    std::swap(ctrl_rated_power_, other->ctrl_rated_power_);
    std::swap(ctrl_encoder_ppr_hi_, other->ctrl_encoder_ppr_hi_);
    std::swap(ctrl_encoder_ppr_lo_, other->ctrl_encoder_ppr_lo_);
    std::swap(ctrl_quick_soft_stop_, other->ctrl_quick_soft_stop_);
    std::swap(ctrl_clear_error_flag_, other->ctrl_clear_error_flag_);
    std::swap(ctrl_quickstop_deceleration_, other->ctrl_quickstop_deceleration_);
    std::swap(ctrl_softstop_deceleration_, other->ctrl_softstop_deceleration_);
    std::swap(ctrl_current_kp_, other->ctrl_current_kp_);
    std::swap(ctrl_current_ki_, other->ctrl_current_ki_);
    std::swap(ctrl_position_kp_, other->ctrl_position_kp_);
    std::swap(ctrl_position_ki_, other->ctrl_position_ki_);
    std::swap(ctrl_velocity_kp_, other->ctrl_velocity_kp_);
    std::swap(ctrl_velocity_ki_, other->ctrl_velocity_ki_);
    std::swap(ctrl_velocity_feedf_, other->ctrl_velocity_feedf_);
    std::swap(ctrl_acceleration_feedf_, other->ctrl_acceleration_feedf_);
    std::swap(ctrl_reserved_148_, other->ctrl_reserved_148_);
    std::swap(ctrl_axisq_actual_, other->ctrl_axisq_actual_);
    std::swap(ctrl_hall_status_, other->ctrl_hall_status_);
    std::swap(ctrl_motor_temperature_, other->ctrl_motor_temperature_);
    std::swap(ctrl_digital_in_status_, other->ctrl_digital_in_status_);
    std::swap(ctrl_contprot_current_, other->ctrl_contprot_current_);
    std::swap(ctrl_maxvelocity_limit_, other->ctrl_maxvelocity_limit_);
    std::swap(ctrl_max_current_limit_, other->ctrl_max_current_limit_);
    std::swap(ctrl_i2t_time_, other->ctrl_i2t_time_);
    std::swap(ctrl_ipm_temperature_alarm_, other->ctrl_ipm_temperature_alarm_);
    std::swap(ctrl_ipm_temperature_fault_, other->ctrl_ipm_temperature_fault_);
    std::swap(ctrl_i2t_actual_, other->ctrl_i2t_actual_);
    std::swap(ctrl_reserved299_, other->ctrl_reserved299_);
    std::swap(ctrl_ctrl_vel_actual_, other->ctrl_ctrl_vel_actual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotecDriverStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotecDriverStat_descriptor_;
  metadata.reflection = MotecDriverStat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
