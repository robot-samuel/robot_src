// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExternSensorConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExternSensorConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ExternSensorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternSensorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternSensorConfig_Config_Mode_fan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternSensorConfig_Config_Mode_fan_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExternSensorConfig_2eproto() {
  protobuf_AddDesc_ExternSensorConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExternSensorConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ExternSensorConfig_descriptor_ = file->message_type(0);
  static const int ExternSensorConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig, led_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig, config_fan_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig, led_flight_),
  };
  ExternSensorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternSensorConfig_descriptor_,
      ExternSensorConfig::default_instance_,
      ExternSensorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternSensorConfig));
  ExternSensorConfig_Config_Mode_fan_descriptor_ = ExternSensorConfig_descriptor_->nested_type(0);
  static const int ExternSensorConfig_Config_Mode_fan_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig_Config_Mode_fan, fan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig_Config_Mode_fan, fan_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig_Config_Mode_fan, vaule_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig_Config_Mode_fan, vaule_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig_Config_Mode_fan, ctrl_switch_),
  };
  ExternSensorConfig_Config_Mode_fan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternSensorConfig_Config_Mode_fan_descriptor_,
      ExternSensorConfig_Config_Mode_fan::default_instance_,
      ExternSensorConfig_Config_Mode_fan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig_Config_Mode_fan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSensorConfig_Config_Mode_fan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternSensorConfig_Config_Mode_fan));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExternSensorConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternSensorConfig_descriptor_, &ExternSensorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternSensorConfig_Config_Mode_fan_descriptor_, &ExternSensorConfig_Config_Mode_fan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExternSensorConfig_2eproto() {
  delete ExternSensorConfig::default_instance_;
  delete ExternSensorConfig_reflection_;
  delete ExternSensorConfig_Config_Mode_fan::default_instance_;
  delete ExternSensorConfig_Config_Mode_fan_reflection_;
}

void protobuf_AddDesc_ExternSensorConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ExternSensorConfig.proto\"\355\001\n\022ExternSen"
    "sorConfig\022\021\n\tLed_Color\030\001 \001(\005\022;\n\016Config_f"
    "an_Msg\030\002 \003(\0132#.ExternSensorConfig.Config"
    "_Mode_fan\022\022\n\nLed_Flight\030\003 \001(\005\032s\n\017Config_"
    "Mode_fan\022\016\n\006fan_ID\030\001 \001(\005\022\022\n\nfan_enable\030\002"
    " \001(\005\022\022\n\nvaule_open\030\003 \001(\002\022\023\n\013vaule_close\030"
    "\004 \001(\002\022\023\n\013Ctrl_switch\030\005 \001(\002", 266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExternSensorConfig.proto", &protobuf_RegisterTypes);
  ExternSensorConfig::default_instance_ = new ExternSensorConfig();
  ExternSensorConfig_Config_Mode_fan::default_instance_ = new ExternSensorConfig_Config_Mode_fan();
  ExternSensorConfig::default_instance_->InitAsDefaultInstance();
  ExternSensorConfig_Config_Mode_fan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExternSensorConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExternSensorConfig_2eproto {
  StaticDescriptorInitializer_ExternSensorConfig_2eproto() {
    protobuf_AddDesc_ExternSensorConfig_2eproto();
  }
} static_descriptor_initializer_ExternSensorConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ExternSensorConfig_Config_Mode_fan::kFanIDFieldNumber;
const int ExternSensorConfig_Config_Mode_fan::kFanEnableFieldNumber;
const int ExternSensorConfig_Config_Mode_fan::kVauleOpenFieldNumber;
const int ExternSensorConfig_Config_Mode_fan::kVauleCloseFieldNumber;
const int ExternSensorConfig_Config_Mode_fan::kCtrlSwitchFieldNumber;
#endif  // !_MSC_VER

ExternSensorConfig_Config_Mode_fan::ExternSensorConfig_Config_Mode_fan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternSensorConfig_Config_Mode_fan::InitAsDefaultInstance() {
}

ExternSensorConfig_Config_Mode_fan::ExternSensorConfig_Config_Mode_fan(const ExternSensorConfig_Config_Mode_fan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternSensorConfig_Config_Mode_fan::SharedCtor() {
  _cached_size_ = 0;
  fan_id_ = 0;
  fan_enable_ = 0;
  vaule_open_ = 0;
  vaule_close_ = 0;
  ctrl_switch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternSensorConfig_Config_Mode_fan::~ExternSensorConfig_Config_Mode_fan() {
  SharedDtor();
}

void ExternSensorConfig_Config_Mode_fan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternSensorConfig_Config_Mode_fan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternSensorConfig_Config_Mode_fan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternSensorConfig_Config_Mode_fan_descriptor_;
}

const ExternSensorConfig_Config_Mode_fan& ExternSensorConfig_Config_Mode_fan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternSensorConfig_2eproto();
  return *default_instance_;
}

ExternSensorConfig_Config_Mode_fan* ExternSensorConfig_Config_Mode_fan::default_instance_ = NULL;

ExternSensorConfig_Config_Mode_fan* ExternSensorConfig_Config_Mode_fan::New() const {
  return new ExternSensorConfig_Config_Mode_fan;
}

void ExternSensorConfig_Config_Mode_fan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fan_id_ = 0;
    fan_enable_ = 0;
    vaule_open_ = 0;
    vaule_close_ = 0;
    ctrl_switch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternSensorConfig_Config_Mode_fan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fan_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fan_id_)));
          set_has_fan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fan_enable;
        break;
      }

      // optional int32 fan_enable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fan_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fan_enable_)));
          set_has_fan_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_vaule_open;
        break;
      }

      // optional float vaule_open = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vaule_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vaule_open_)));
          set_has_vaule_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_vaule_close;
        break;
      }

      // optional float vaule_close = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vaule_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vaule_close_)));
          set_has_vaule_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Ctrl_switch;
        break;
      }

      // optional float Ctrl_switch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Ctrl_switch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctrl_switch_)));
          set_has_ctrl_switch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternSensorConfig_Config_Mode_fan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fan_ID = 1;
  if (has_fan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fan_id(), output);
  }

  // optional int32 fan_enable = 2;
  if (has_fan_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fan_enable(), output);
  }

  // optional float vaule_open = 3;
  if (has_vaule_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->vaule_open(), output);
  }

  // optional float vaule_close = 4;
  if (has_vaule_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->vaule_close(), output);
  }

  // optional float Ctrl_switch = 5;
  if (has_ctrl_switch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ctrl_switch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternSensorConfig_Config_Mode_fan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fan_ID = 1;
  if (has_fan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fan_id(), target);
  }

  // optional int32 fan_enable = 2;
  if (has_fan_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fan_enable(), target);
  }

  // optional float vaule_open = 3;
  if (has_vaule_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->vaule_open(), target);
  }

  // optional float vaule_close = 4;
  if (has_vaule_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->vaule_close(), target);
  }

  // optional float Ctrl_switch = 5;
  if (has_ctrl_switch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ctrl_switch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternSensorConfig_Config_Mode_fan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fan_ID = 1;
    if (has_fan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fan_id());
    }

    // optional int32 fan_enable = 2;
    if (has_fan_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fan_enable());
    }

    // optional float vaule_open = 3;
    if (has_vaule_open()) {
      total_size += 1 + 4;
    }

    // optional float vaule_close = 4;
    if (has_vaule_close()) {
      total_size += 1 + 4;
    }

    // optional float Ctrl_switch = 5;
    if (has_ctrl_switch()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternSensorConfig_Config_Mode_fan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternSensorConfig_Config_Mode_fan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternSensorConfig_Config_Mode_fan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternSensorConfig_Config_Mode_fan::MergeFrom(const ExternSensorConfig_Config_Mode_fan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fan_id()) {
      set_fan_id(from.fan_id());
    }
    if (from.has_fan_enable()) {
      set_fan_enable(from.fan_enable());
    }
    if (from.has_vaule_open()) {
      set_vaule_open(from.vaule_open());
    }
    if (from.has_vaule_close()) {
      set_vaule_close(from.vaule_close());
    }
    if (from.has_ctrl_switch()) {
      set_ctrl_switch(from.ctrl_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternSensorConfig_Config_Mode_fan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternSensorConfig_Config_Mode_fan::CopyFrom(const ExternSensorConfig_Config_Mode_fan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternSensorConfig_Config_Mode_fan::IsInitialized() const {

  return true;
}

void ExternSensorConfig_Config_Mode_fan::Swap(ExternSensorConfig_Config_Mode_fan* other) {
  if (other != this) {
    std::swap(fan_id_, other->fan_id_);
    std::swap(fan_enable_, other->fan_enable_);
    std::swap(vaule_open_, other->vaule_open_);
    std::swap(vaule_close_, other->vaule_close_);
    std::swap(ctrl_switch_, other->ctrl_switch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternSensorConfig_Config_Mode_fan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternSensorConfig_Config_Mode_fan_descriptor_;
  metadata.reflection = ExternSensorConfig_Config_Mode_fan_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ExternSensorConfig::kLedColorFieldNumber;
const int ExternSensorConfig::kConfigFanMsgFieldNumber;
const int ExternSensorConfig::kLedFlightFieldNumber;
#endif  // !_MSC_VER

ExternSensorConfig::ExternSensorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternSensorConfig::InitAsDefaultInstance() {
}

ExternSensorConfig::ExternSensorConfig(const ExternSensorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternSensorConfig::SharedCtor() {
  _cached_size_ = 0;
  led_color_ = 0;
  led_flight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternSensorConfig::~ExternSensorConfig() {
  SharedDtor();
}

void ExternSensorConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternSensorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternSensorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternSensorConfig_descriptor_;
}

const ExternSensorConfig& ExternSensorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExternSensorConfig_2eproto();
  return *default_instance_;
}

ExternSensorConfig* ExternSensorConfig::default_instance_ = NULL;

ExternSensorConfig* ExternSensorConfig::New() const {
  return new ExternSensorConfig;
}

void ExternSensorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    led_color_ = 0;
    led_flight_ = 0;
  }
  config_fan_msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternSensorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Led_Color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &led_color_)));
          set_has_led_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Config_fan_Msg;
        break;
      }

      // repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Config_fan_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config_fan_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Config_fan_Msg;
        if (input->ExpectTag(24)) goto parse_Led_Flight;
        break;
      }

      // optional int32 Led_Flight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Led_Flight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &led_flight_)));
          set_has_led_flight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternSensorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Led_Color = 1;
  if (has_led_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->led_color(), output);
  }

  // repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
  for (int i = 0; i < this->config_fan_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->config_fan_msg(i), output);
  }

  // optional int32 Led_Flight = 3;
  if (has_led_flight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->led_flight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternSensorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Led_Color = 1;
  if (has_led_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->led_color(), target);
  }

  // repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
  for (int i = 0; i < this->config_fan_msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->config_fan_msg(i), target);
  }

  // optional int32 Led_Flight = 3;
  if (has_led_flight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->led_flight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternSensorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Led_Color = 1;
    if (has_led_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->led_color());
    }

    // optional int32 Led_Flight = 3;
    if (has_led_flight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->led_flight());
    }

  }
  // repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
  total_size += 1 * this->config_fan_msg_size();
  for (int i = 0; i < this->config_fan_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config_fan_msg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternSensorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternSensorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternSensorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternSensorConfig::MergeFrom(const ExternSensorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  config_fan_msg_.MergeFrom(from.config_fan_msg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_led_color()) {
      set_led_color(from.led_color());
    }
    if (from.has_led_flight()) {
      set_led_flight(from.led_flight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternSensorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternSensorConfig::CopyFrom(const ExternSensorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternSensorConfig::IsInitialized() const {

  return true;
}

void ExternSensorConfig::Swap(ExternSensorConfig* other) {
  if (other != this) {
    std::swap(led_color_, other->led_color_);
    config_fan_msg_.Swap(&other->config_fan_msg_);
    std::swap(led_flight_, other->led_flight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternSensorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternSensorConfig_descriptor_;
  metadata.reflection = ExternSensorConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
