// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ParamConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ParamConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ParamConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamConfig_Config_Mode_Driver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamConfig_Config_Mode_Driver_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamConfig_Config_Error_Mode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamConfig_Config_Error_Mode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamConfig_Config_Alarm_Mode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamConfig_Config_Alarm_Mode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ParamConfig_2eproto() {
  protobuf_AddDesc_ParamConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ParamConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ParamConfig_descriptor_ = file->message_type(0);
  static const int ParamConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig, config_driver_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig, config_error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig, config_alarm_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig, config_extern_msg_),
  };
  ParamConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParamConfig_descriptor_,
      ParamConfig::default_instance_,
      ParamConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParamConfig));
  ParamConfig_Config_Mode_Driver_descriptor_ = ParamConfig_descriptor_->nested_type(0);
  static const int ParamConfig_Config_Mode_Driver_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, autorun_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, autorun_angel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, remote_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, remote_angel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, remote_accevelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, reductionratiol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, wheelssize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, rwheelssize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, lwheelssize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, ecounterrpm_),
  };
  ParamConfig_Config_Mode_Driver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParamConfig_Config_Mode_Driver_descriptor_,
      ParamConfig_Config_Mode_Driver::default_instance_,
      ParamConfig_Config_Mode_Driver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Mode_Driver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParamConfig_Config_Mode_Driver));
  ParamConfig_Config_Error_Mode_descriptor_ = ParamConfig_descriptor_->nested_type(1);
  static const int ParamConfig_Config_Error_Mode_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, carleftfdrivererror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, carrightfdrivererror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, carleftbdrivererror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, carrightbdrivererror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, leftfdrivercomerror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, rightfdrivercomerror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, leftbdrivercomerror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, rightbdrivercomerror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, externcomdeverror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, bmssyserror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, obstaclestoperror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, cashswitchstoperror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, currentoverloaderror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, xrs2015_drivernodeoff_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, bobstaclestoperror_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, dropstoperror_ischeck_),
  };
  ParamConfig_Config_Error_Mode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParamConfig_Config_Error_Mode_descriptor_,
      ParamConfig_Config_Error_Mode::default_instance_,
      ParamConfig_Config_Error_Mode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Error_Mode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParamConfig_Config_Error_Mode));
  ParamConfig_Config_Alarm_Mode_descriptor_ = ParamConfig_descriptor_->nested_type(2);
  static const int ParamConfig_Config_Alarm_Mode_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, ctrolboxhightemalarm_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, ctrolboxfrozentemalarm_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, bmsmodcomlostalarm_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, emergency_status_stop_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, ecanexternsnsorndeoff_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, zmqtransnodeoff_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, joytestnodeoff_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, ph3readnodeoff_ischeck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, ph3readcomlost_ischeck_),
  };
  ParamConfig_Config_Alarm_Mode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParamConfig_Config_Alarm_Mode_descriptor_,
      ParamConfig_Config_Alarm_Mode::default_instance_,
      ParamConfig_Config_Alarm_Mode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamConfig_Config_Alarm_Mode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParamConfig_Config_Alarm_Mode));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ParamConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParamConfig_descriptor_, &ParamConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParamConfig_Config_Mode_Driver_descriptor_, &ParamConfig_Config_Mode_Driver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParamConfig_Config_Error_Mode_descriptor_, &ParamConfig_Config_Error_Mode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParamConfig_Config_Alarm_Mode_descriptor_, &ParamConfig_Config_Alarm_Mode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ParamConfig_2eproto() {
  delete ParamConfig::default_instance_;
  delete ParamConfig_reflection_;
  delete ParamConfig_Config_Mode_Driver::default_instance_;
  delete ParamConfig_Config_Mode_Driver_reflection_;
  delete ParamConfig_Config_Error_Mode::default_instance_;
  delete ParamConfig_Config_Error_Mode_reflection_;
  delete ParamConfig_Config_Alarm_Mode::default_instance_;
  delete ParamConfig_Config_Alarm_Mode_reflection_;
}

void protobuf_AddDesc_ParamConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ExternSensorConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ParamConfig.proto\032\030ExternSensorConfig."
    "proto\"\230\013\n\013ParamConfig\022:\n\021Config_Driver_M"
    "sg\030\001 \001(\0132\037.ParamConfig.Config_Mode_Drive"
    "r\0228\n\020Config_Error_Msg\030\002 \001(\0132\036.ParamConfi"
    "g.Config_Error_Mode\0228\n\020Config_Alarm_Msg\030"
    "\003 \001(\0132\036.ParamConfig.Config_Alarm_Mode\022.\n"
    "\021Config_extern_Msg\030\004 \001(\0132\023.ExternSensorC"
    "onfig\032\367\001\n\022Config_Mode_Driver\022\025\n\rautorun_"
    "speed\030\001 \001(\005\022\025\n\rautorun_angel\030\002 \001(\005\022\024\n\014re"
    "mote_speed\030\003 \001(\005\022\024\n\014remote_angel\030\004 \001(\005\022\033"
    "\n\023remote_AcceVelocity\030\005 \001(\005\022\027\n\017Reduction"
    "Ratiol\030\006 \001(\002\022\022\n\nWheelSsize\030\007 \001(\002\022\023\n\013RWhe"
    "elSsize\030\010 \001(\002\022\023\n\013LWheelSsize\030\t \001(\002\022\023\n\013Ec"
    "ounterRpm\030\n \001(\005\032\327\004\n\021Config_Error_Mode\022#\n"
    "\033CarLeftFDriverError_Ischeck\030\001 \001(\010\022$\n\034Ca"
    "rRightFDriverError_Ischeck\030\002 \001(\010\022#\n\033CarL"
    "eftBDriverError_Ischeck\030\003 \001(\010\022$\n\034CarRigh"
    "tBDriverError_Ischeck\030\004 \001(\010\022#\n\033LeftFDriv"
    "erComError_Ischeck\030\005 \001(\010\022$\n\034RightFDriver"
    "ComError_Ischeck\030\006 \001(\010\022#\n\033LeftBDriverCom"
    "Error_Ischeck\030\007 \001(\010\022$\n\034RightBDriverComEr"
    "ror_Ischeck\030\010 \001(\010\022!\n\031ExternComDevError_I"
    "scheck\030\t \001(\010\022\033\n\023BMSSysError_Ischeck\030\n \001("
    "\010\022!\n\031ObstacleStopError_Ischeck\030\013 \001(\010\022#\n\033"
    "CashSwitchStopError_Ischeck\030\014 \001(\010\022$\n\034Cur"
    "rentOverloadError_Ischeck\030\r \001(\010\022%\n\035xrs20"
    "15_driverNodeOFF_Ischeck\030\016 \001(\010\022\"\n\032BObsta"
    "cleStopError_Ischeck\030\017 \001(\010\022\035\n\025DropStopEr"
    "ror_Ischeck\030\020 \001(\010\032\324\002\n\021Config_Alarm_Mode\022"
    "$\n\034CtrolBoxHighTemAlarm_Ischeck\030\001 \001(\010\022&\n"
    "\036CtrolBoxFrozenTemAlarm_Ischeck\030\002 \001(\010\022\"\n"
    "\032BMSModComLostAlarm_Ischeck\030\003 \001(\010\022%\n\035Eme"
    "rgency_Status_stop_Ischeck\030\004 \001(\010\022%\n\035Ecan"
    "ExternSnsorNdeOFF_Ischeck\030\005 \001(\010\022\037\n\027ZmqTr"
    "ansNodeOFF_Ischeck\030\006 \001(\010\022\036\n\026JoyTestNodeO"
    "FF_Ischeck\030\007 \001(\010\022\036\n\026Ph3ReadNodeOFF_Ische"
    "ck\030\010 \001(\010\022\036\n\026Ph3ReadComLost_Ischeck\030\t \001(\010", 1480);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ParamConfig.proto", &protobuf_RegisterTypes);
  ParamConfig::default_instance_ = new ParamConfig();
  ParamConfig_Config_Mode_Driver::default_instance_ = new ParamConfig_Config_Mode_Driver();
  ParamConfig_Config_Error_Mode::default_instance_ = new ParamConfig_Config_Error_Mode();
  ParamConfig_Config_Alarm_Mode::default_instance_ = new ParamConfig_Config_Alarm_Mode();
  ParamConfig::default_instance_->InitAsDefaultInstance();
  ParamConfig_Config_Mode_Driver::default_instance_->InitAsDefaultInstance();
  ParamConfig_Config_Error_Mode::default_instance_->InitAsDefaultInstance();
  ParamConfig_Config_Alarm_Mode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ParamConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ParamConfig_2eproto {
  StaticDescriptorInitializer_ParamConfig_2eproto() {
    protobuf_AddDesc_ParamConfig_2eproto();
  }
} static_descriptor_initializer_ParamConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ParamConfig_Config_Mode_Driver::kAutorunSpeedFieldNumber;
const int ParamConfig_Config_Mode_Driver::kAutorunAngelFieldNumber;
const int ParamConfig_Config_Mode_Driver::kRemoteSpeedFieldNumber;
const int ParamConfig_Config_Mode_Driver::kRemoteAngelFieldNumber;
const int ParamConfig_Config_Mode_Driver::kRemoteAcceVelocityFieldNumber;
const int ParamConfig_Config_Mode_Driver::kReductionRatiolFieldNumber;
const int ParamConfig_Config_Mode_Driver::kWheelSsizeFieldNumber;
const int ParamConfig_Config_Mode_Driver::kRWheelSsizeFieldNumber;
const int ParamConfig_Config_Mode_Driver::kLWheelSsizeFieldNumber;
const int ParamConfig_Config_Mode_Driver::kEcounterRpmFieldNumber;
#endif  // !_MSC_VER

ParamConfig_Config_Mode_Driver::ParamConfig_Config_Mode_Driver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParamConfig_Config_Mode_Driver::InitAsDefaultInstance() {
}

ParamConfig_Config_Mode_Driver::ParamConfig_Config_Mode_Driver(const ParamConfig_Config_Mode_Driver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParamConfig_Config_Mode_Driver::SharedCtor() {
  _cached_size_ = 0;
  autorun_speed_ = 0;
  autorun_angel_ = 0;
  remote_speed_ = 0;
  remote_angel_ = 0;
  remote_accevelocity_ = 0;
  reductionratiol_ = 0;
  wheelssize_ = 0;
  rwheelssize_ = 0;
  lwheelssize_ = 0;
  ecounterrpm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamConfig_Config_Mode_Driver::~ParamConfig_Config_Mode_Driver() {
  SharedDtor();
}

void ParamConfig_Config_Mode_Driver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParamConfig_Config_Mode_Driver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamConfig_Config_Mode_Driver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamConfig_Config_Mode_Driver_descriptor_;
}

const ParamConfig_Config_Mode_Driver& ParamConfig_Config_Mode_Driver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ParamConfig_2eproto();
  return *default_instance_;
}

ParamConfig_Config_Mode_Driver* ParamConfig_Config_Mode_Driver::default_instance_ = NULL;

ParamConfig_Config_Mode_Driver* ParamConfig_Config_Mode_Driver::New() const {
  return new ParamConfig_Config_Mode_Driver;
}

void ParamConfig_Config_Mode_Driver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    autorun_speed_ = 0;
    autorun_angel_ = 0;
    remote_speed_ = 0;
    remote_angel_ = 0;
    remote_accevelocity_ = 0;
    reductionratiol_ = 0;
    wheelssize_ = 0;
    rwheelssize_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lwheelssize_ = 0;
    ecounterrpm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParamConfig_Config_Mode_Driver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autorun_speed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autorun_speed_)));
          set_has_autorun_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_autorun_angel;
        break;
      }

      // optional int32 autorun_angel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autorun_angel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autorun_angel_)));
          set_has_autorun_angel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remote_speed;
        break;
      }

      // optional int32 remote_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remote_speed_)));
          set_has_remote_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remote_angel;
        break;
      }

      // optional int32 remote_angel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_angel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remote_angel_)));
          set_has_remote_angel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remote_AcceVelocity;
        break;
      }

      // optional int32 remote_AcceVelocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_AcceVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remote_accevelocity_)));
          set_has_remote_accevelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_ReductionRatiol;
        break;
      }

      // optional float ReductionRatiol = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ReductionRatiol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reductionratiol_)));
          set_has_reductionratiol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_WheelSsize;
        break;
      }

      // optional float WheelSsize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_WheelSsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheelssize_)));
          set_has_wheelssize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_RWheelSsize;
        break;
      }

      // optional float RWheelSsize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RWheelSsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rwheelssize_)));
          set_has_rwheelssize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_LWheelSsize;
        break;
      }

      // optional float LWheelSsize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_LWheelSsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lwheelssize_)));
          set_has_lwheelssize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_EcounterRpm;
        break;
      }

      // optional int32 EcounterRpm = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EcounterRpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ecounterrpm_)));
          set_has_ecounterrpm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParamConfig_Config_Mode_Driver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 autorun_speed = 1;
  if (has_autorun_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autorun_speed(), output);
  }

  // optional int32 autorun_angel = 2;
  if (has_autorun_angel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->autorun_angel(), output);
  }

  // optional int32 remote_speed = 3;
  if (has_remote_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remote_speed(), output);
  }

  // optional int32 remote_angel = 4;
  if (has_remote_angel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remote_angel(), output);
  }

  // optional int32 remote_AcceVelocity = 5;
  if (has_remote_accevelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remote_accevelocity(), output);
  }

  // optional float ReductionRatiol = 6;
  if (has_reductionratiol()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->reductionratiol(), output);
  }

  // optional float WheelSsize = 7;
  if (has_wheelssize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->wheelssize(), output);
  }

  // optional float RWheelSsize = 8;
  if (has_rwheelssize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rwheelssize(), output);
  }

  // optional float LWheelSsize = 9;
  if (has_lwheelssize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->lwheelssize(), output);
  }

  // optional int32 EcounterRpm = 10;
  if (has_ecounterrpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ecounterrpm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParamConfig_Config_Mode_Driver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 autorun_speed = 1;
  if (has_autorun_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autorun_speed(), target);
  }

  // optional int32 autorun_angel = 2;
  if (has_autorun_angel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->autorun_angel(), target);
  }

  // optional int32 remote_speed = 3;
  if (has_remote_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remote_speed(), target);
  }

  // optional int32 remote_angel = 4;
  if (has_remote_angel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remote_angel(), target);
  }

  // optional int32 remote_AcceVelocity = 5;
  if (has_remote_accevelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remote_accevelocity(), target);
  }

  // optional float ReductionRatiol = 6;
  if (has_reductionratiol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->reductionratiol(), target);
  }

  // optional float WheelSsize = 7;
  if (has_wheelssize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->wheelssize(), target);
  }

  // optional float RWheelSsize = 8;
  if (has_rwheelssize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rwheelssize(), target);
  }

  // optional float LWheelSsize = 9;
  if (has_lwheelssize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->lwheelssize(), target);
  }

  // optional int32 EcounterRpm = 10;
  if (has_ecounterrpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ecounterrpm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParamConfig_Config_Mode_Driver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autorun_speed = 1;
    if (has_autorun_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autorun_speed());
    }

    // optional int32 autorun_angel = 2;
    if (has_autorun_angel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autorun_angel());
    }

    // optional int32 remote_speed = 3;
    if (has_remote_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remote_speed());
    }

    // optional int32 remote_angel = 4;
    if (has_remote_angel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remote_angel());
    }

    // optional int32 remote_AcceVelocity = 5;
    if (has_remote_accevelocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remote_accevelocity());
    }

    // optional float ReductionRatiol = 6;
    if (has_reductionratiol()) {
      total_size += 1 + 4;
    }

    // optional float WheelSsize = 7;
    if (has_wheelssize()) {
      total_size += 1 + 4;
    }

    // optional float RWheelSsize = 8;
    if (has_rwheelssize()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float LWheelSsize = 9;
    if (has_lwheelssize()) {
      total_size += 1 + 4;
    }

    // optional int32 EcounterRpm = 10;
    if (has_ecounterrpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ecounterrpm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamConfig_Config_Mode_Driver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParamConfig_Config_Mode_Driver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParamConfig_Config_Mode_Driver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParamConfig_Config_Mode_Driver::MergeFrom(const ParamConfig_Config_Mode_Driver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autorun_speed()) {
      set_autorun_speed(from.autorun_speed());
    }
    if (from.has_autorun_angel()) {
      set_autorun_angel(from.autorun_angel());
    }
    if (from.has_remote_speed()) {
      set_remote_speed(from.remote_speed());
    }
    if (from.has_remote_angel()) {
      set_remote_angel(from.remote_angel());
    }
    if (from.has_remote_accevelocity()) {
      set_remote_accevelocity(from.remote_accevelocity());
    }
    if (from.has_reductionratiol()) {
      set_reductionratiol(from.reductionratiol());
    }
    if (from.has_wheelssize()) {
      set_wheelssize(from.wheelssize());
    }
    if (from.has_rwheelssize()) {
      set_rwheelssize(from.rwheelssize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lwheelssize()) {
      set_lwheelssize(from.lwheelssize());
    }
    if (from.has_ecounterrpm()) {
      set_ecounterrpm(from.ecounterrpm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParamConfig_Config_Mode_Driver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamConfig_Config_Mode_Driver::CopyFrom(const ParamConfig_Config_Mode_Driver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamConfig_Config_Mode_Driver::IsInitialized() const {

  return true;
}

void ParamConfig_Config_Mode_Driver::Swap(ParamConfig_Config_Mode_Driver* other) {
  if (other != this) {
    std::swap(autorun_speed_, other->autorun_speed_);
    std::swap(autorun_angel_, other->autorun_angel_);
    std::swap(remote_speed_, other->remote_speed_);
    std::swap(remote_angel_, other->remote_angel_);
    std::swap(remote_accevelocity_, other->remote_accevelocity_);
    std::swap(reductionratiol_, other->reductionratiol_);
    std::swap(wheelssize_, other->wheelssize_);
    std::swap(rwheelssize_, other->rwheelssize_);
    std::swap(lwheelssize_, other->lwheelssize_);
    std::swap(ecounterrpm_, other->ecounterrpm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParamConfig_Config_Mode_Driver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamConfig_Config_Mode_Driver_descriptor_;
  metadata.reflection = ParamConfig_Config_Mode_Driver_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ParamConfig_Config_Error_Mode::kCarLeftFDriverErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kCarRightFDriverErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kCarLeftBDriverErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kCarRightBDriverErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kLeftFDriverComErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kRightFDriverComErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kLeftBDriverComErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kRightBDriverComErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kExternComDevErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kBMSSysErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kObstacleStopErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kCashSwitchStopErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kCurrentOverloadErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kXrs2015DriverNodeOFFIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kBObstacleStopErrorIscheckFieldNumber;
const int ParamConfig_Config_Error_Mode::kDropStopErrorIscheckFieldNumber;
#endif  // !_MSC_VER

ParamConfig_Config_Error_Mode::ParamConfig_Config_Error_Mode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParamConfig_Config_Error_Mode::InitAsDefaultInstance() {
}

ParamConfig_Config_Error_Mode::ParamConfig_Config_Error_Mode(const ParamConfig_Config_Error_Mode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParamConfig_Config_Error_Mode::SharedCtor() {
  _cached_size_ = 0;
  carleftfdrivererror_ischeck_ = false;
  carrightfdrivererror_ischeck_ = false;
  carleftbdrivererror_ischeck_ = false;
  carrightbdrivererror_ischeck_ = false;
  leftfdrivercomerror_ischeck_ = false;
  rightfdrivercomerror_ischeck_ = false;
  leftbdrivercomerror_ischeck_ = false;
  rightbdrivercomerror_ischeck_ = false;
  externcomdeverror_ischeck_ = false;
  bmssyserror_ischeck_ = false;
  obstaclestoperror_ischeck_ = false;
  cashswitchstoperror_ischeck_ = false;
  currentoverloaderror_ischeck_ = false;
  xrs2015_drivernodeoff_ischeck_ = false;
  bobstaclestoperror_ischeck_ = false;
  dropstoperror_ischeck_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamConfig_Config_Error_Mode::~ParamConfig_Config_Error_Mode() {
  SharedDtor();
}

void ParamConfig_Config_Error_Mode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParamConfig_Config_Error_Mode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamConfig_Config_Error_Mode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamConfig_Config_Error_Mode_descriptor_;
}

const ParamConfig_Config_Error_Mode& ParamConfig_Config_Error_Mode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ParamConfig_2eproto();
  return *default_instance_;
}

ParamConfig_Config_Error_Mode* ParamConfig_Config_Error_Mode::default_instance_ = NULL;

ParamConfig_Config_Error_Mode* ParamConfig_Config_Error_Mode::New() const {
  return new ParamConfig_Config_Error_Mode;
}

void ParamConfig_Config_Error_Mode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    carleftfdrivererror_ischeck_ = false;
    carrightfdrivererror_ischeck_ = false;
    carleftbdrivererror_ischeck_ = false;
    carrightbdrivererror_ischeck_ = false;
    leftfdrivercomerror_ischeck_ = false;
    rightfdrivercomerror_ischeck_ = false;
    leftbdrivercomerror_ischeck_ = false;
    rightbdrivercomerror_ischeck_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    externcomdeverror_ischeck_ = false;
    bmssyserror_ischeck_ = false;
    obstaclestoperror_ischeck_ = false;
    cashswitchstoperror_ischeck_ = false;
    currentoverloaderror_ischeck_ = false;
    xrs2015_drivernodeoff_ischeck_ = false;
    bobstaclestoperror_ischeck_ = false;
    dropstoperror_ischeck_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParamConfig_Config_Error_Mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool CarLeftFDriverError_Ischeck = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &carleftfdrivererror_ischeck_)));
          set_has_carleftfdrivererror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CarRightFDriverError_Ischeck;
        break;
      }

      // optional bool CarRightFDriverError_Ischeck = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CarRightFDriverError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &carrightfdrivererror_ischeck_)));
          set_has_carrightfdrivererror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CarLeftBDriverError_Ischeck;
        break;
      }

      // optional bool CarLeftBDriverError_Ischeck = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CarLeftBDriverError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &carleftbdrivererror_ischeck_)));
          set_has_carleftbdrivererror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CarRightBDriverError_Ischeck;
        break;
      }

      // optional bool CarRightBDriverError_Ischeck = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CarRightBDriverError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &carrightbdrivererror_ischeck_)));
          set_has_carrightbdrivererror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LeftFDriverComError_Ischeck;
        break;
      }

      // optional bool LeftFDriverComError_Ischeck = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftFDriverComError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leftfdrivercomerror_ischeck_)));
          set_has_leftfdrivercomerror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RightFDriverComError_Ischeck;
        break;
      }

      // optional bool RightFDriverComError_Ischeck = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RightFDriverComError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rightfdrivercomerror_ischeck_)));
          set_has_rightfdrivercomerror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LeftBDriverComError_Ischeck;
        break;
      }

      // optional bool LeftBDriverComError_Ischeck = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftBDriverComError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leftbdrivercomerror_ischeck_)));
          set_has_leftbdrivercomerror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_RightBDriverComError_Ischeck;
        break;
      }

      // optional bool RightBDriverComError_Ischeck = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RightBDriverComError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rightbdrivercomerror_ischeck_)));
          set_has_rightbdrivercomerror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ExternComDevError_Ischeck;
        break;
      }

      // optional bool ExternComDevError_Ischeck = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExternComDevError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &externcomdeverror_ischeck_)));
          set_has_externcomdeverror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BMSSysError_Ischeck;
        break;
      }

      // optional bool BMSSysError_Ischeck = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMSSysError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmssyserror_ischeck_)));
          set_has_bmssyserror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ObstacleStopError_Ischeck;
        break;
      }

      // optional bool ObstacleStopError_Ischeck = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObstacleStopError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obstaclestoperror_ischeck_)));
          set_has_obstaclestoperror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CashSwitchStopError_Ischeck;
        break;
      }

      // optional bool CashSwitchStopError_Ischeck = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CashSwitchStopError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cashswitchstoperror_ischeck_)));
          set_has_cashswitchstoperror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CurrentOverloadError_Ischeck;
        break;
      }

      // optional bool CurrentOverloadError_Ischeck = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrentOverloadError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &currentoverloaderror_ischeck_)));
          set_has_currentoverloaderror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_xrs2015_driverNodeOFF_Ischeck;
        break;
      }

      // optional bool xrs2015_driverNodeOFF_Ischeck = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xrs2015_driverNodeOFF_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xrs2015_drivernodeoff_ischeck_)));
          set_has_xrs2015_drivernodeoff_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_BObstacleStopError_Ischeck;
        break;
      }

      // optional bool BObstacleStopError_Ischeck = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BObstacleStopError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bobstaclestoperror_ischeck_)));
          set_has_bobstaclestoperror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_DropStopError_Ischeck;
        break;
      }

      // optional bool DropStopError_Ischeck = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DropStopError_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dropstoperror_ischeck_)));
          set_has_dropstoperror_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParamConfig_Config_Error_Mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool CarLeftFDriverError_Ischeck = 1;
  if (has_carleftfdrivererror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->carleftfdrivererror_ischeck(), output);
  }

  // optional bool CarRightFDriverError_Ischeck = 2;
  if (has_carrightfdrivererror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->carrightfdrivererror_ischeck(), output);
  }

  // optional bool CarLeftBDriverError_Ischeck = 3;
  if (has_carleftbdrivererror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->carleftbdrivererror_ischeck(), output);
  }

  // optional bool CarRightBDriverError_Ischeck = 4;
  if (has_carrightbdrivererror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->carrightbdrivererror_ischeck(), output);
  }

  // optional bool LeftFDriverComError_Ischeck = 5;
  if (has_leftfdrivercomerror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->leftfdrivercomerror_ischeck(), output);
  }

  // optional bool RightFDriverComError_Ischeck = 6;
  if (has_rightfdrivercomerror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->rightfdrivercomerror_ischeck(), output);
  }

  // optional bool LeftBDriverComError_Ischeck = 7;
  if (has_leftbdrivercomerror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->leftbdrivercomerror_ischeck(), output);
  }

  // optional bool RightBDriverComError_Ischeck = 8;
  if (has_rightbdrivercomerror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->rightbdrivercomerror_ischeck(), output);
  }

  // optional bool ExternComDevError_Ischeck = 9;
  if (has_externcomdeverror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->externcomdeverror_ischeck(), output);
  }

  // optional bool BMSSysError_Ischeck = 10;
  if (has_bmssyserror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bmssyserror_ischeck(), output);
  }

  // optional bool ObstacleStopError_Ischeck = 11;
  if (has_obstaclestoperror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->obstaclestoperror_ischeck(), output);
  }

  // optional bool CashSwitchStopError_Ischeck = 12;
  if (has_cashswitchstoperror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->cashswitchstoperror_ischeck(), output);
  }

  // optional bool CurrentOverloadError_Ischeck = 13;
  if (has_currentoverloaderror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->currentoverloaderror_ischeck(), output);
  }

  // optional bool xrs2015_driverNodeOFF_Ischeck = 14;
  if (has_xrs2015_drivernodeoff_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->xrs2015_drivernodeoff_ischeck(), output);
  }

  // optional bool BObstacleStopError_Ischeck = 15;
  if (has_bobstaclestoperror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->bobstaclestoperror_ischeck(), output);
  }

  // optional bool DropStopError_Ischeck = 16;
  if (has_dropstoperror_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->dropstoperror_ischeck(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParamConfig_Config_Error_Mode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool CarLeftFDriverError_Ischeck = 1;
  if (has_carleftfdrivererror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->carleftfdrivererror_ischeck(), target);
  }

  // optional bool CarRightFDriverError_Ischeck = 2;
  if (has_carrightfdrivererror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->carrightfdrivererror_ischeck(), target);
  }

  // optional bool CarLeftBDriverError_Ischeck = 3;
  if (has_carleftbdrivererror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->carleftbdrivererror_ischeck(), target);
  }

  // optional bool CarRightBDriverError_Ischeck = 4;
  if (has_carrightbdrivererror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->carrightbdrivererror_ischeck(), target);
  }

  // optional bool LeftFDriverComError_Ischeck = 5;
  if (has_leftfdrivercomerror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->leftfdrivercomerror_ischeck(), target);
  }

  // optional bool RightFDriverComError_Ischeck = 6;
  if (has_rightfdrivercomerror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->rightfdrivercomerror_ischeck(), target);
  }

  // optional bool LeftBDriverComError_Ischeck = 7;
  if (has_leftbdrivercomerror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->leftbdrivercomerror_ischeck(), target);
  }

  // optional bool RightBDriverComError_Ischeck = 8;
  if (has_rightbdrivercomerror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->rightbdrivercomerror_ischeck(), target);
  }

  // optional bool ExternComDevError_Ischeck = 9;
  if (has_externcomdeverror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->externcomdeverror_ischeck(), target);
  }

  // optional bool BMSSysError_Ischeck = 10;
  if (has_bmssyserror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bmssyserror_ischeck(), target);
  }

  // optional bool ObstacleStopError_Ischeck = 11;
  if (has_obstaclestoperror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->obstaclestoperror_ischeck(), target);
  }

  // optional bool CashSwitchStopError_Ischeck = 12;
  if (has_cashswitchstoperror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->cashswitchstoperror_ischeck(), target);
  }

  // optional bool CurrentOverloadError_Ischeck = 13;
  if (has_currentoverloaderror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->currentoverloaderror_ischeck(), target);
  }

  // optional bool xrs2015_driverNodeOFF_Ischeck = 14;
  if (has_xrs2015_drivernodeoff_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->xrs2015_drivernodeoff_ischeck(), target);
  }

  // optional bool BObstacleStopError_Ischeck = 15;
  if (has_bobstaclestoperror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->bobstaclestoperror_ischeck(), target);
  }

  // optional bool DropStopError_Ischeck = 16;
  if (has_dropstoperror_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->dropstoperror_ischeck(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParamConfig_Config_Error_Mode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool CarLeftFDriverError_Ischeck = 1;
    if (has_carleftfdrivererror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool CarRightFDriverError_Ischeck = 2;
    if (has_carrightfdrivererror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool CarLeftBDriverError_Ischeck = 3;
    if (has_carleftbdrivererror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool CarRightBDriverError_Ischeck = 4;
    if (has_carrightbdrivererror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool LeftFDriverComError_Ischeck = 5;
    if (has_leftfdrivercomerror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool RightFDriverComError_Ischeck = 6;
    if (has_rightfdrivercomerror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool LeftBDriverComError_Ischeck = 7;
    if (has_leftbdrivercomerror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool RightBDriverComError_Ischeck = 8;
    if (has_rightbdrivercomerror_ischeck()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ExternComDevError_Ischeck = 9;
    if (has_externcomdeverror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool BMSSysError_Ischeck = 10;
    if (has_bmssyserror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool ObstacleStopError_Ischeck = 11;
    if (has_obstaclestoperror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool CashSwitchStopError_Ischeck = 12;
    if (has_cashswitchstoperror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool CurrentOverloadError_Ischeck = 13;
    if (has_currentoverloaderror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool xrs2015_driverNodeOFF_Ischeck = 14;
    if (has_xrs2015_drivernodeoff_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool BObstacleStopError_Ischeck = 15;
    if (has_bobstaclestoperror_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool DropStopError_Ischeck = 16;
    if (has_dropstoperror_ischeck()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamConfig_Config_Error_Mode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParamConfig_Config_Error_Mode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParamConfig_Config_Error_Mode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParamConfig_Config_Error_Mode::MergeFrom(const ParamConfig_Config_Error_Mode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carleftfdrivererror_ischeck()) {
      set_carleftfdrivererror_ischeck(from.carleftfdrivererror_ischeck());
    }
    if (from.has_carrightfdrivererror_ischeck()) {
      set_carrightfdrivererror_ischeck(from.carrightfdrivererror_ischeck());
    }
    if (from.has_carleftbdrivererror_ischeck()) {
      set_carleftbdrivererror_ischeck(from.carleftbdrivererror_ischeck());
    }
    if (from.has_carrightbdrivererror_ischeck()) {
      set_carrightbdrivererror_ischeck(from.carrightbdrivererror_ischeck());
    }
    if (from.has_leftfdrivercomerror_ischeck()) {
      set_leftfdrivercomerror_ischeck(from.leftfdrivercomerror_ischeck());
    }
    if (from.has_rightfdrivercomerror_ischeck()) {
      set_rightfdrivercomerror_ischeck(from.rightfdrivercomerror_ischeck());
    }
    if (from.has_leftbdrivercomerror_ischeck()) {
      set_leftbdrivercomerror_ischeck(from.leftbdrivercomerror_ischeck());
    }
    if (from.has_rightbdrivercomerror_ischeck()) {
      set_rightbdrivercomerror_ischeck(from.rightbdrivercomerror_ischeck());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_externcomdeverror_ischeck()) {
      set_externcomdeverror_ischeck(from.externcomdeverror_ischeck());
    }
    if (from.has_bmssyserror_ischeck()) {
      set_bmssyserror_ischeck(from.bmssyserror_ischeck());
    }
    if (from.has_obstaclestoperror_ischeck()) {
      set_obstaclestoperror_ischeck(from.obstaclestoperror_ischeck());
    }
    if (from.has_cashswitchstoperror_ischeck()) {
      set_cashswitchstoperror_ischeck(from.cashswitchstoperror_ischeck());
    }
    if (from.has_currentoverloaderror_ischeck()) {
      set_currentoverloaderror_ischeck(from.currentoverloaderror_ischeck());
    }
    if (from.has_xrs2015_drivernodeoff_ischeck()) {
      set_xrs2015_drivernodeoff_ischeck(from.xrs2015_drivernodeoff_ischeck());
    }
    if (from.has_bobstaclestoperror_ischeck()) {
      set_bobstaclestoperror_ischeck(from.bobstaclestoperror_ischeck());
    }
    if (from.has_dropstoperror_ischeck()) {
      set_dropstoperror_ischeck(from.dropstoperror_ischeck());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParamConfig_Config_Error_Mode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamConfig_Config_Error_Mode::CopyFrom(const ParamConfig_Config_Error_Mode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamConfig_Config_Error_Mode::IsInitialized() const {

  return true;
}

void ParamConfig_Config_Error_Mode::Swap(ParamConfig_Config_Error_Mode* other) {
  if (other != this) {
    std::swap(carleftfdrivererror_ischeck_, other->carleftfdrivererror_ischeck_);
    std::swap(carrightfdrivererror_ischeck_, other->carrightfdrivererror_ischeck_);
    std::swap(carleftbdrivererror_ischeck_, other->carleftbdrivererror_ischeck_);
    std::swap(carrightbdrivererror_ischeck_, other->carrightbdrivererror_ischeck_);
    std::swap(leftfdrivercomerror_ischeck_, other->leftfdrivercomerror_ischeck_);
    std::swap(rightfdrivercomerror_ischeck_, other->rightfdrivercomerror_ischeck_);
    std::swap(leftbdrivercomerror_ischeck_, other->leftbdrivercomerror_ischeck_);
    std::swap(rightbdrivercomerror_ischeck_, other->rightbdrivercomerror_ischeck_);
    std::swap(externcomdeverror_ischeck_, other->externcomdeverror_ischeck_);
    std::swap(bmssyserror_ischeck_, other->bmssyserror_ischeck_);
    std::swap(obstaclestoperror_ischeck_, other->obstaclestoperror_ischeck_);
    std::swap(cashswitchstoperror_ischeck_, other->cashswitchstoperror_ischeck_);
    std::swap(currentoverloaderror_ischeck_, other->currentoverloaderror_ischeck_);
    std::swap(xrs2015_drivernodeoff_ischeck_, other->xrs2015_drivernodeoff_ischeck_);
    std::swap(bobstaclestoperror_ischeck_, other->bobstaclestoperror_ischeck_);
    std::swap(dropstoperror_ischeck_, other->dropstoperror_ischeck_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParamConfig_Config_Error_Mode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamConfig_Config_Error_Mode_descriptor_;
  metadata.reflection = ParamConfig_Config_Error_Mode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ParamConfig_Config_Alarm_Mode::kCtrolBoxHighTemAlarmIscheckFieldNumber;
const int ParamConfig_Config_Alarm_Mode::kCtrolBoxFrozenTemAlarmIscheckFieldNumber;
const int ParamConfig_Config_Alarm_Mode::kBMSModComLostAlarmIscheckFieldNumber;
const int ParamConfig_Config_Alarm_Mode::kEmergencyStatusStopIscheckFieldNumber;
const int ParamConfig_Config_Alarm_Mode::kEcanExternSnsorNdeOFFIscheckFieldNumber;
const int ParamConfig_Config_Alarm_Mode::kZmqTransNodeOFFIscheckFieldNumber;
const int ParamConfig_Config_Alarm_Mode::kJoyTestNodeOFFIscheckFieldNumber;
const int ParamConfig_Config_Alarm_Mode::kPh3ReadNodeOFFIscheckFieldNumber;
const int ParamConfig_Config_Alarm_Mode::kPh3ReadComLostIscheckFieldNumber;
#endif  // !_MSC_VER

ParamConfig_Config_Alarm_Mode::ParamConfig_Config_Alarm_Mode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParamConfig_Config_Alarm_Mode::InitAsDefaultInstance() {
}

ParamConfig_Config_Alarm_Mode::ParamConfig_Config_Alarm_Mode(const ParamConfig_Config_Alarm_Mode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParamConfig_Config_Alarm_Mode::SharedCtor() {
  _cached_size_ = 0;
  ctrolboxhightemalarm_ischeck_ = false;
  ctrolboxfrozentemalarm_ischeck_ = false;
  bmsmodcomlostalarm_ischeck_ = false;
  emergency_status_stop_ischeck_ = false;
  ecanexternsnsorndeoff_ischeck_ = false;
  zmqtransnodeoff_ischeck_ = false;
  joytestnodeoff_ischeck_ = false;
  ph3readnodeoff_ischeck_ = false;
  ph3readcomlost_ischeck_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamConfig_Config_Alarm_Mode::~ParamConfig_Config_Alarm_Mode() {
  SharedDtor();
}

void ParamConfig_Config_Alarm_Mode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParamConfig_Config_Alarm_Mode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamConfig_Config_Alarm_Mode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamConfig_Config_Alarm_Mode_descriptor_;
}

const ParamConfig_Config_Alarm_Mode& ParamConfig_Config_Alarm_Mode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ParamConfig_2eproto();
  return *default_instance_;
}

ParamConfig_Config_Alarm_Mode* ParamConfig_Config_Alarm_Mode::default_instance_ = NULL;

ParamConfig_Config_Alarm_Mode* ParamConfig_Config_Alarm_Mode::New() const {
  return new ParamConfig_Config_Alarm_Mode;
}

void ParamConfig_Config_Alarm_Mode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctrolboxhightemalarm_ischeck_ = false;
    ctrolboxfrozentemalarm_ischeck_ = false;
    bmsmodcomlostalarm_ischeck_ = false;
    emergency_status_stop_ischeck_ = false;
    ecanexternsnsorndeoff_ischeck_ = false;
    zmqtransnodeoff_ischeck_ = false;
    joytestnodeoff_ischeck_ = false;
    ph3readnodeoff_ischeck_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ph3readcomlost_ischeck_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParamConfig_Config_Alarm_Mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool CtrolBoxHighTemAlarm_Ischeck = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctrolboxhightemalarm_ischeck_)));
          set_has_ctrolboxhightemalarm_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CtrolBoxFrozenTemAlarm_Ischeck;
        break;
      }

      // optional bool CtrolBoxFrozenTemAlarm_Ischeck = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CtrolBoxFrozenTemAlarm_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctrolboxfrozentemalarm_ischeck_)));
          set_has_ctrolboxfrozentemalarm_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BMSModComLostAlarm_Ischeck;
        break;
      }

      // optional bool BMSModComLostAlarm_Ischeck = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMSModComLostAlarm_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmsmodcomlostalarm_ischeck_)));
          set_has_bmsmodcomlostalarm_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Emergency_Status_stop_Ischeck;
        break;
      }

      // optional bool Emergency_Status_stop_Ischeck = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Emergency_Status_stop_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergency_status_stop_ischeck_)));
          set_has_emergency_status_stop_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_EcanExternSnsorNdeOFF_Ischeck;
        break;
      }

      // optional bool EcanExternSnsorNdeOFF_Ischeck = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EcanExternSnsorNdeOFF_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ecanexternsnsorndeoff_ischeck_)));
          set_has_ecanexternsnsorndeoff_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ZmqTransNodeOFF_Ischeck;
        break;
      }

      // optional bool ZmqTransNodeOFF_Ischeck = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZmqTransNodeOFF_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zmqtransnodeoff_ischeck_)));
          set_has_zmqtransnodeoff_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_JoyTestNodeOFF_Ischeck;
        break;
      }

      // optional bool JoyTestNodeOFF_Ischeck = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JoyTestNodeOFF_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &joytestnodeoff_ischeck_)));
          set_has_joytestnodeoff_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Ph3ReadNodeOFF_Ischeck;
        break;
      }

      // optional bool Ph3ReadNodeOFF_Ischeck = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ph3ReadNodeOFF_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ph3readnodeoff_ischeck_)));
          set_has_ph3readnodeoff_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Ph3ReadComLost_Ischeck;
        break;
      }

      // optional bool Ph3ReadComLost_Ischeck = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ph3ReadComLost_Ischeck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ph3readcomlost_ischeck_)));
          set_has_ph3readcomlost_ischeck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParamConfig_Config_Alarm_Mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool CtrolBoxHighTemAlarm_Ischeck = 1;
  if (has_ctrolboxhightemalarm_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ctrolboxhightemalarm_ischeck(), output);
  }

  // optional bool CtrolBoxFrozenTemAlarm_Ischeck = 2;
  if (has_ctrolboxfrozentemalarm_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ctrolboxfrozentemalarm_ischeck(), output);
  }

  // optional bool BMSModComLostAlarm_Ischeck = 3;
  if (has_bmsmodcomlostalarm_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bmsmodcomlostalarm_ischeck(), output);
  }

  // optional bool Emergency_Status_stop_Ischeck = 4;
  if (has_emergency_status_stop_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->emergency_status_stop_ischeck(), output);
  }

  // optional bool EcanExternSnsorNdeOFF_Ischeck = 5;
  if (has_ecanexternsnsorndeoff_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ecanexternsnsorndeoff_ischeck(), output);
  }

  // optional bool ZmqTransNodeOFF_Ischeck = 6;
  if (has_zmqtransnodeoff_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->zmqtransnodeoff_ischeck(), output);
  }

  // optional bool JoyTestNodeOFF_Ischeck = 7;
  if (has_joytestnodeoff_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->joytestnodeoff_ischeck(), output);
  }

  // optional bool Ph3ReadNodeOFF_Ischeck = 8;
  if (has_ph3readnodeoff_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ph3readnodeoff_ischeck(), output);
  }

  // optional bool Ph3ReadComLost_Ischeck = 9;
  if (has_ph3readcomlost_ischeck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ph3readcomlost_ischeck(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParamConfig_Config_Alarm_Mode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool CtrolBoxHighTemAlarm_Ischeck = 1;
  if (has_ctrolboxhightemalarm_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ctrolboxhightemalarm_ischeck(), target);
  }

  // optional bool CtrolBoxFrozenTemAlarm_Ischeck = 2;
  if (has_ctrolboxfrozentemalarm_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ctrolboxfrozentemalarm_ischeck(), target);
  }

  // optional bool BMSModComLostAlarm_Ischeck = 3;
  if (has_bmsmodcomlostalarm_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bmsmodcomlostalarm_ischeck(), target);
  }

  // optional bool Emergency_Status_stop_Ischeck = 4;
  if (has_emergency_status_stop_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->emergency_status_stop_ischeck(), target);
  }

  // optional bool EcanExternSnsorNdeOFF_Ischeck = 5;
  if (has_ecanexternsnsorndeoff_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ecanexternsnsorndeoff_ischeck(), target);
  }

  // optional bool ZmqTransNodeOFF_Ischeck = 6;
  if (has_zmqtransnodeoff_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->zmqtransnodeoff_ischeck(), target);
  }

  // optional bool JoyTestNodeOFF_Ischeck = 7;
  if (has_joytestnodeoff_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->joytestnodeoff_ischeck(), target);
  }

  // optional bool Ph3ReadNodeOFF_Ischeck = 8;
  if (has_ph3readnodeoff_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ph3readnodeoff_ischeck(), target);
  }

  // optional bool Ph3ReadComLost_Ischeck = 9;
  if (has_ph3readcomlost_ischeck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ph3readcomlost_ischeck(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParamConfig_Config_Alarm_Mode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool CtrolBoxHighTemAlarm_Ischeck = 1;
    if (has_ctrolboxhightemalarm_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool CtrolBoxFrozenTemAlarm_Ischeck = 2;
    if (has_ctrolboxfrozentemalarm_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool BMSModComLostAlarm_Ischeck = 3;
    if (has_bmsmodcomlostalarm_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool Emergency_Status_stop_Ischeck = 4;
    if (has_emergency_status_stop_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool EcanExternSnsorNdeOFF_Ischeck = 5;
    if (has_ecanexternsnsorndeoff_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool ZmqTransNodeOFF_Ischeck = 6;
    if (has_zmqtransnodeoff_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool JoyTestNodeOFF_Ischeck = 7;
    if (has_joytestnodeoff_ischeck()) {
      total_size += 1 + 1;
    }

    // optional bool Ph3ReadNodeOFF_Ischeck = 8;
    if (has_ph3readnodeoff_ischeck()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool Ph3ReadComLost_Ischeck = 9;
    if (has_ph3readcomlost_ischeck()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamConfig_Config_Alarm_Mode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParamConfig_Config_Alarm_Mode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParamConfig_Config_Alarm_Mode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParamConfig_Config_Alarm_Mode::MergeFrom(const ParamConfig_Config_Alarm_Mode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctrolboxhightemalarm_ischeck()) {
      set_ctrolboxhightemalarm_ischeck(from.ctrolboxhightemalarm_ischeck());
    }
    if (from.has_ctrolboxfrozentemalarm_ischeck()) {
      set_ctrolboxfrozentemalarm_ischeck(from.ctrolboxfrozentemalarm_ischeck());
    }
    if (from.has_bmsmodcomlostalarm_ischeck()) {
      set_bmsmodcomlostalarm_ischeck(from.bmsmodcomlostalarm_ischeck());
    }
    if (from.has_emergency_status_stop_ischeck()) {
      set_emergency_status_stop_ischeck(from.emergency_status_stop_ischeck());
    }
    if (from.has_ecanexternsnsorndeoff_ischeck()) {
      set_ecanexternsnsorndeoff_ischeck(from.ecanexternsnsorndeoff_ischeck());
    }
    if (from.has_zmqtransnodeoff_ischeck()) {
      set_zmqtransnodeoff_ischeck(from.zmqtransnodeoff_ischeck());
    }
    if (from.has_joytestnodeoff_ischeck()) {
      set_joytestnodeoff_ischeck(from.joytestnodeoff_ischeck());
    }
    if (from.has_ph3readnodeoff_ischeck()) {
      set_ph3readnodeoff_ischeck(from.ph3readnodeoff_ischeck());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ph3readcomlost_ischeck()) {
      set_ph3readcomlost_ischeck(from.ph3readcomlost_ischeck());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParamConfig_Config_Alarm_Mode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamConfig_Config_Alarm_Mode::CopyFrom(const ParamConfig_Config_Alarm_Mode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamConfig_Config_Alarm_Mode::IsInitialized() const {

  return true;
}

void ParamConfig_Config_Alarm_Mode::Swap(ParamConfig_Config_Alarm_Mode* other) {
  if (other != this) {
    std::swap(ctrolboxhightemalarm_ischeck_, other->ctrolboxhightemalarm_ischeck_);
    std::swap(ctrolboxfrozentemalarm_ischeck_, other->ctrolboxfrozentemalarm_ischeck_);
    std::swap(bmsmodcomlostalarm_ischeck_, other->bmsmodcomlostalarm_ischeck_);
    std::swap(emergency_status_stop_ischeck_, other->emergency_status_stop_ischeck_);
    std::swap(ecanexternsnsorndeoff_ischeck_, other->ecanexternsnsorndeoff_ischeck_);
    std::swap(zmqtransnodeoff_ischeck_, other->zmqtransnodeoff_ischeck_);
    std::swap(joytestnodeoff_ischeck_, other->joytestnodeoff_ischeck_);
    std::swap(ph3readnodeoff_ischeck_, other->ph3readnodeoff_ischeck_);
    std::swap(ph3readcomlost_ischeck_, other->ph3readcomlost_ischeck_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParamConfig_Config_Alarm_Mode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamConfig_Config_Alarm_Mode_descriptor_;
  metadata.reflection = ParamConfig_Config_Alarm_Mode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ParamConfig::kConfigDriverMsgFieldNumber;
const int ParamConfig::kConfigErrorMsgFieldNumber;
const int ParamConfig::kConfigAlarmMsgFieldNumber;
const int ParamConfig::kConfigExternMsgFieldNumber;
#endif  // !_MSC_VER

ParamConfig::ParamConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParamConfig::InitAsDefaultInstance() {
  config_driver_msg_ = const_cast< ::ParamConfig_Config_Mode_Driver*>(&::ParamConfig_Config_Mode_Driver::default_instance());
  config_error_msg_ = const_cast< ::ParamConfig_Config_Error_Mode*>(&::ParamConfig_Config_Error_Mode::default_instance());
  config_alarm_msg_ = const_cast< ::ParamConfig_Config_Alarm_Mode*>(&::ParamConfig_Config_Alarm_Mode::default_instance());
  config_extern_msg_ = const_cast< ::ExternSensorConfig*>(&::ExternSensorConfig::default_instance());
}

ParamConfig::ParamConfig(const ParamConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParamConfig::SharedCtor() {
  _cached_size_ = 0;
  config_driver_msg_ = NULL;
  config_error_msg_ = NULL;
  config_alarm_msg_ = NULL;
  config_extern_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamConfig::~ParamConfig() {
  SharedDtor();
}

void ParamConfig::SharedDtor() {
  if (this != default_instance_) {
    delete config_driver_msg_;
    delete config_error_msg_;
    delete config_alarm_msg_;
    delete config_extern_msg_;
  }
}

void ParamConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamConfig_descriptor_;
}

const ParamConfig& ParamConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ParamConfig_2eproto();
  return *default_instance_;
}

ParamConfig* ParamConfig::default_instance_ = NULL;

ParamConfig* ParamConfig::New() const {
  return new ParamConfig;
}

void ParamConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_config_driver_msg()) {
      if (config_driver_msg_ != NULL) config_driver_msg_->::ParamConfig_Config_Mode_Driver::Clear();
    }
    if (has_config_error_msg()) {
      if (config_error_msg_ != NULL) config_error_msg_->::ParamConfig_Config_Error_Mode::Clear();
    }
    if (has_config_alarm_msg()) {
      if (config_alarm_msg_ != NULL) config_alarm_msg_->::ParamConfig_Config_Alarm_Mode::Clear();
    }
    if (has_config_extern_msg()) {
      if (config_extern_msg_ != NULL) config_extern_msg_->::ExternSensorConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ParamConfig.Config_Mode_Driver Config_Driver_Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_driver_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Config_Error_Msg;
        break;
      }

      // optional .ParamConfig.Config_Error_Mode Config_Error_Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Config_Error_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_error_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Config_Alarm_Msg;
        break;
      }

      // optional .ParamConfig.Config_Alarm_Mode Config_Alarm_Msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Config_Alarm_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_alarm_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Config_extern_Msg;
        break;
      }

      // optional .ExternSensorConfig Config_extern_Msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Config_extern_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_extern_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ParamConfig.Config_Mode_Driver Config_Driver_Msg = 1;
  if (has_config_driver_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config_driver_msg(), output);
  }

  // optional .ParamConfig.Config_Error_Mode Config_Error_Msg = 2;
  if (has_config_error_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->config_error_msg(), output);
  }

  // optional .ParamConfig.Config_Alarm_Mode Config_Alarm_Msg = 3;
  if (has_config_alarm_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->config_alarm_msg(), output);
  }

  // optional .ExternSensorConfig Config_extern_Msg = 4;
  if (has_config_extern_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->config_extern_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParamConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ParamConfig.Config_Mode_Driver Config_Driver_Msg = 1;
  if (has_config_driver_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->config_driver_msg(), target);
  }

  // optional .ParamConfig.Config_Error_Mode Config_Error_Msg = 2;
  if (has_config_error_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->config_error_msg(), target);
  }

  // optional .ParamConfig.Config_Alarm_Mode Config_Alarm_Msg = 3;
  if (has_config_alarm_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->config_alarm_msg(), target);
  }

  // optional .ExternSensorConfig Config_extern_Msg = 4;
  if (has_config_extern_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->config_extern_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParamConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ParamConfig.Config_Mode_Driver Config_Driver_Msg = 1;
    if (has_config_driver_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_driver_msg());
    }

    // optional .ParamConfig.Config_Error_Mode Config_Error_Msg = 2;
    if (has_config_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_error_msg());
    }

    // optional .ParamConfig.Config_Alarm_Mode Config_Alarm_Msg = 3;
    if (has_config_alarm_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_alarm_msg());
    }

    // optional .ExternSensorConfig Config_extern_Msg = 4;
    if (has_config_extern_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_extern_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParamConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParamConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParamConfig::MergeFrom(const ParamConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_driver_msg()) {
      mutable_config_driver_msg()->::ParamConfig_Config_Mode_Driver::MergeFrom(from.config_driver_msg());
    }
    if (from.has_config_error_msg()) {
      mutable_config_error_msg()->::ParamConfig_Config_Error_Mode::MergeFrom(from.config_error_msg());
    }
    if (from.has_config_alarm_msg()) {
      mutable_config_alarm_msg()->::ParamConfig_Config_Alarm_Mode::MergeFrom(from.config_alarm_msg());
    }
    if (from.has_config_extern_msg()) {
      mutable_config_extern_msg()->::ExternSensorConfig::MergeFrom(from.config_extern_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParamConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamConfig::CopyFrom(const ParamConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamConfig::IsInitialized() const {

  return true;
}

void ParamConfig::Swap(ParamConfig* other) {
  if (other != this) {
    std::swap(config_driver_msg_, other->config_driver_msg_);
    std::swap(config_error_msg_, other->config_error_msg_);
    std::swap(config_alarm_msg_, other->config_alarm_msg_);
    std::swap(config_extern_msg_, other->config_extern_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParamConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamConfig_descriptor_;
  metadata.reflection = ParamConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
