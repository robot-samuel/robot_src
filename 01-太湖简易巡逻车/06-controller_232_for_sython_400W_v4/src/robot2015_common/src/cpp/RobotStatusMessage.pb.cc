// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotStatusMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RobotStatusMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RobotStatusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotStatusMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotStatusMessage_CameraServiceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotStatusMessage_CameraServiceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotStatusMessage_ImageRecognitionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotStatusMessage_ImageRecognitionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotStatusMessage_OnlineMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotStatusMessage_OnlineMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotStatusMessage_RoutePlanNaviMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotStatusMessage_RoutePlanNaviMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotStatusMessage_PanTiltCtrlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotStatusMessage_PanTiltCtrlMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotStatusMessage_ManagementSystemMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotStatusMessage_ManagementSystemMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RobotStatusMessage_2eproto() {
  protobuf_AddDesc_RobotStatusMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RobotStatusMessage.proto");
  GOOGLE_CHECK(file != NULL);
  RobotStatusMessage_descriptor_ = file->message_type(0);
  static const int RobotStatusMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage, controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage, cameraservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage, onlinemsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage, routeplannavi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage, imagerecognition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage, managementsystem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage, pantiltctrl_),
  };
  RobotStatusMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotStatusMessage_descriptor_,
      RobotStatusMessage::default_instance_,
      RobotStatusMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotStatusMessage));
  RobotStatusMessage_CameraServiceMessage_descriptor_ = RobotStatusMessage_descriptor_->nested_type(0);
  static const int RobotStatusMessage_CameraServiceMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_CameraServiceMessage, infraredcameraonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_CameraServiceMessage, normalcameraonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_CameraServiceMessage, infraredcamerafocus_),
  };
  RobotStatusMessage_CameraServiceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotStatusMessage_CameraServiceMessage_descriptor_,
      RobotStatusMessage_CameraServiceMessage::default_instance_,
      RobotStatusMessage_CameraServiceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_CameraServiceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_CameraServiceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotStatusMessage_CameraServiceMessage));
  RobotStatusMessage_ImageRecognitionMessage_descriptor_ = RobotStatusMessage_descriptor_->nested_type(1);
  static const int RobotStatusMessage_ImageRecognitionMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ImageRecognitionMessage, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ImageRecognitionMessage, tasksavepath_),
  };
  RobotStatusMessage_ImageRecognitionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotStatusMessage_ImageRecognitionMessage_descriptor_,
      RobotStatusMessage_ImageRecognitionMessage::default_instance_,
      RobotStatusMessage_ImageRecognitionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ImageRecognitionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ImageRecognitionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotStatusMessage_ImageRecognitionMessage));
  RobotStatusMessage_OnlineMessage_descriptor_ = RobotStatusMessage_descriptor_->nested_type(2);
  static const int RobotStatusMessage_OnlineMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_OnlineMessage, cameraserviceonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_OnlineMessage, routeplannavionline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_OnlineMessage, pantiltctrlonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_OnlineMessage, imagerecognitiononline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_OnlineMessage, driverctrlonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_OnlineMessage, a310cameraonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_OnlineMessage, normalcameraonline_),
  };
  RobotStatusMessage_OnlineMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotStatusMessage_OnlineMessage_descriptor_,
      RobotStatusMessage_OnlineMessage::default_instance_,
      RobotStatusMessage_OnlineMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_OnlineMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_OnlineMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotStatusMessage_OnlineMessage));
  RobotStatusMessage_RoutePlanNaviMessage_descriptor_ = RobotStatusMessage_descriptor_->nested_type(3);
  static const int RobotStatusMessage_RoutePlanNaviMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_RoutePlanNaviMessage, currentposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_RoutePlanNaviMessage, currentline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_RoutePlanNaviMessage, positionfinish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_RoutePlanNaviMessage, currenttaskendid_),
  };
  RobotStatusMessage_RoutePlanNaviMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotStatusMessage_RoutePlanNaviMessage_descriptor_,
      RobotStatusMessage_RoutePlanNaviMessage::default_instance_,
      RobotStatusMessage_RoutePlanNaviMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_RoutePlanNaviMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_RoutePlanNaviMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotStatusMessage_RoutePlanNaviMessage));
  RobotStatusMessage_PanTiltCtrlMessage_descriptor_ = RobotStatusMessage_descriptor_->nested_type(4);
  static const int RobotStatusMessage_PanTiltCtrlMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_PanTiltCtrlMessage, pantiltdevcomo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_PanTiltCtrlMessage, panpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_PanTiltCtrlMessage, tlitpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_PanTiltCtrlMessage, zoompos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_PanTiltCtrlMessage, focuspos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_PanTiltCtrlMessage, wiperstauts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_PanTiltCtrlMessage, focusstauts_),
  };
  RobotStatusMessage_PanTiltCtrlMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotStatusMessage_PanTiltCtrlMessage_descriptor_,
      RobotStatusMessage_PanTiltCtrlMessage::default_instance_,
      RobotStatusMessage_PanTiltCtrlMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_PanTiltCtrlMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_PanTiltCtrlMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotStatusMessage_PanTiltCtrlMessage));
  RobotStatusMessage_ManagementSystemMessage_descriptor_ = RobotStatusMessage_descriptor_->nested_type(5);
  static const int RobotStatusMessage_ManagementSystemMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ManagementSystemMessage, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ManagementSystemMessage, taskname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ManagementSystemMessage, meterpointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ManagementSystemMessage, meterpointname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ManagementSystemMessage, stoppointid_),
  };
  RobotStatusMessage_ManagementSystemMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotStatusMessage_ManagementSystemMessage_descriptor_,
      RobotStatusMessage_ManagementSystemMessage::default_instance_,
      RobotStatusMessage_ManagementSystemMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ManagementSystemMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotStatusMessage_ManagementSystemMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotStatusMessage_ManagementSystemMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RobotStatusMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotStatusMessage_descriptor_, &RobotStatusMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotStatusMessage_CameraServiceMessage_descriptor_, &RobotStatusMessage_CameraServiceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotStatusMessage_ImageRecognitionMessage_descriptor_, &RobotStatusMessage_ImageRecognitionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotStatusMessage_OnlineMessage_descriptor_, &RobotStatusMessage_OnlineMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotStatusMessage_RoutePlanNaviMessage_descriptor_, &RobotStatusMessage_RoutePlanNaviMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotStatusMessage_PanTiltCtrlMessage_descriptor_, &RobotStatusMessage_PanTiltCtrlMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotStatusMessage_ManagementSystemMessage_descriptor_, &RobotStatusMessage_ManagementSystemMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RobotStatusMessage_2eproto() {
  delete RobotStatusMessage::default_instance_;
  delete RobotStatusMessage_reflection_;
  delete RobotStatusMessage_CameraServiceMessage::default_instance_;
  delete RobotStatusMessage_CameraServiceMessage_reflection_;
  delete RobotStatusMessage_ImageRecognitionMessage::default_instance_;
  delete RobotStatusMessage_ImageRecognitionMessage_reflection_;
  delete RobotStatusMessage_OnlineMessage::default_instance_;
  delete RobotStatusMessage_OnlineMessage_reflection_;
  delete RobotStatusMessage_RoutePlanNaviMessage::default_instance_;
  delete RobotStatusMessage_RoutePlanNaviMessage_reflection_;
  delete RobotStatusMessage_PanTiltCtrlMessage::default_instance_;
  delete RobotStatusMessage_PanTiltCtrlMessage_reflection_;
  delete RobotStatusMessage_ManagementSystemMessage::default_instance_;
  delete RobotStatusMessage_ManagementSystemMessage_reflection_;
}

void protobuf_AddDesc_RobotStatusMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ControllerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030RobotStatusMessage.proto\032\027ControllerMe"
    "ssage.proto\"\351\t\n\022RobotStatusMessage\022\014\n\004St"
    "at\030\001 \001(\005\022&\n\nController\030\002 \001(\0132\022.Controlle"
    "rMessage\022\?\n\rCameraService\030\003 \001(\0132(.RobotS"
    "tatusMessage.CameraServiceMessage\0224\n\tOnl"
    "ineMSg\030\004 \001(\0132!.RobotStatusMessage.Online"
    "Message\022\?\n\rRoutePlanNavi\030\005 \001(\0132(.RobotSt"
    "atusMessage.RoutePlanNaviMessage\022E\n\020Imag"
    "eRecognition\030\006 \001(\0132+.RobotStatusMessage."
    "ImageRecognitionMessage\022E\n\020ManagementSys"
    "tem\030\007 \001(\0132+.RobotStatusMessage.Managemen"
    "tSystemMessage\022;\n\013PanTiltCtrl\030\010 \001(\0132&.Ro"
    "botStatusMessage.PanTiltCtrlMessage\032m\n\024C"
    "ameraServiceMessage\022\034\n\024InfraredCameraonl"
    "ine\030\001 \001(\005\022\032\n\022NormalCameraonline\030\002 \001(\005\022\033\n"
    "\023InfraredCameraFocus\030\003 \001(\005\032\?\n\027ImageRecog"
    "nitionMessage\022\016\n\006TaskID\030\001 \001(\005\022\024\n\014TaskSav"
    "ePath\030\002 \001(\005\032\324\001\n\rOnlineMessage\022\033\n\023CameraS"
    "erviceonline\030\001 \001(\005\022\033\n\023RoutePlanNavionlin"
    "e\030\002 \001(\005\022\031\n\021PanTiltCtrlonline\030\003 \001(\005\022\036\n\026Im"
    "ageRecognitiononline\030\004 \001(\005\022\030\n\020DriverCtrl"
    "online\030\005 \001(\005\022\030\n\020A310Cameraonline\030\006 \001(\005\022\032"
    "\n\022NormalCameraonline\030\007 \001(\005\032v\n\024RoutePlanN"
    "aviMessage\022\027\n\017CurrentPosition\030\001 \001(\005\022\023\n\013C"
    "urrentLine\030\002 \001(\005\022\026\n\016PositionFinish\030\003 \001(\005"
    "\022\030\n\020CurrentTaskEndID\030\004 \001(\005\032\232\001\n\022PanTiltCt"
    "rlMessage\022\026\n\016PanTiltDevComo\030\001 \001(\005\022\016\n\006Pan"
    "Pos\030\002 \001(\005\022\017\n\007TlitPos\030\003 \001(\005\022\017\n\007ZoomPos\030\004 "
    "\001(\005\022\020\n\010FocusPos\030\005 \001(\005\022\023\n\013WiperStauts\030\006 \001"
    "(\005\022\023\n\013FocusStauts\030\007 \001(\005\032~\n\027ManagementSys"
    "temMessage\022\016\n\006TaskID\030\001 \001(\t\022\020\n\010TaskName\030\002"
    " \001(\t\022\024\n\014MeterPointID\030\003 \001(\t\022\026\n\016MeterPoint"
    "Name\030\004 \001(\t\022\023\n\013StopPointid\030\005 \001(\t", 1311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RobotStatusMessage.proto", &protobuf_RegisterTypes);
  RobotStatusMessage::default_instance_ = new RobotStatusMessage();
  RobotStatusMessage_CameraServiceMessage::default_instance_ = new RobotStatusMessage_CameraServiceMessage();
  RobotStatusMessage_ImageRecognitionMessage::default_instance_ = new RobotStatusMessage_ImageRecognitionMessage();
  RobotStatusMessage_OnlineMessage::default_instance_ = new RobotStatusMessage_OnlineMessage();
  RobotStatusMessage_RoutePlanNaviMessage::default_instance_ = new RobotStatusMessage_RoutePlanNaviMessage();
  RobotStatusMessage_PanTiltCtrlMessage::default_instance_ = new RobotStatusMessage_PanTiltCtrlMessage();
  RobotStatusMessage_ManagementSystemMessage::default_instance_ = new RobotStatusMessage_ManagementSystemMessage();
  RobotStatusMessage::default_instance_->InitAsDefaultInstance();
  RobotStatusMessage_CameraServiceMessage::default_instance_->InitAsDefaultInstance();
  RobotStatusMessage_ImageRecognitionMessage::default_instance_->InitAsDefaultInstance();
  RobotStatusMessage_OnlineMessage::default_instance_->InitAsDefaultInstance();
  RobotStatusMessage_RoutePlanNaviMessage::default_instance_->InitAsDefaultInstance();
  RobotStatusMessage_PanTiltCtrlMessage::default_instance_->InitAsDefaultInstance();
  RobotStatusMessage_ManagementSystemMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RobotStatusMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RobotStatusMessage_2eproto {
  StaticDescriptorInitializer_RobotStatusMessage_2eproto() {
    protobuf_AddDesc_RobotStatusMessage_2eproto();
  }
} static_descriptor_initializer_RobotStatusMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RobotStatusMessage_CameraServiceMessage::kInfraredCameraonlineFieldNumber;
const int RobotStatusMessage_CameraServiceMessage::kNormalCameraonlineFieldNumber;
const int RobotStatusMessage_CameraServiceMessage::kInfraredCameraFocusFieldNumber;
#endif  // !_MSC_VER

RobotStatusMessage_CameraServiceMessage::RobotStatusMessage_CameraServiceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotStatusMessage_CameraServiceMessage::InitAsDefaultInstance() {
}

RobotStatusMessage_CameraServiceMessage::RobotStatusMessage_CameraServiceMessage(const RobotStatusMessage_CameraServiceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotStatusMessage_CameraServiceMessage::SharedCtor() {
  _cached_size_ = 0;
  infraredcameraonline_ = 0;
  normalcameraonline_ = 0;
  infraredcamerafocus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotStatusMessage_CameraServiceMessage::~RobotStatusMessage_CameraServiceMessage() {
  SharedDtor();
}

void RobotStatusMessage_CameraServiceMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotStatusMessage_CameraServiceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotStatusMessage_CameraServiceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotStatusMessage_CameraServiceMessage_descriptor_;
}

const RobotStatusMessage_CameraServiceMessage& RobotStatusMessage_CameraServiceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotStatusMessage_2eproto();
  return *default_instance_;
}

RobotStatusMessage_CameraServiceMessage* RobotStatusMessage_CameraServiceMessage::default_instance_ = NULL;

RobotStatusMessage_CameraServiceMessage* RobotStatusMessage_CameraServiceMessage::New() const {
  return new RobotStatusMessage_CameraServiceMessage;
}

void RobotStatusMessage_CameraServiceMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    infraredcameraonline_ = 0;
    normalcameraonline_ = 0;
    infraredcamerafocus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotStatusMessage_CameraServiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 InfraredCameraonline = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infraredcameraonline_)));
          set_has_infraredcameraonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NormalCameraonline;
        break;
      }

      // optional int32 NormalCameraonline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NormalCameraonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normalcameraonline_)));
          set_has_normalcameraonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_InfraredCameraFocus;
        break;
      }

      // optional int32 InfraredCameraFocus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InfraredCameraFocus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infraredcamerafocus_)));
          set_has_infraredcamerafocus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotStatusMessage_CameraServiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 InfraredCameraonline = 1;
  if (has_infraredcameraonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->infraredcameraonline(), output);
  }

  // optional int32 NormalCameraonline = 2;
  if (has_normalcameraonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->normalcameraonline(), output);
  }

  // optional int32 InfraredCameraFocus = 3;
  if (has_infraredcamerafocus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->infraredcamerafocus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotStatusMessage_CameraServiceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 InfraredCameraonline = 1;
  if (has_infraredcameraonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->infraredcameraonline(), target);
  }

  // optional int32 NormalCameraonline = 2;
  if (has_normalcameraonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->normalcameraonline(), target);
  }

  // optional int32 InfraredCameraFocus = 3;
  if (has_infraredcamerafocus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->infraredcamerafocus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotStatusMessage_CameraServiceMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 InfraredCameraonline = 1;
    if (has_infraredcameraonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->infraredcameraonline());
    }

    // optional int32 NormalCameraonline = 2;
    if (has_normalcameraonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normalcameraonline());
    }

    // optional int32 InfraredCameraFocus = 3;
    if (has_infraredcamerafocus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->infraredcamerafocus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotStatusMessage_CameraServiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotStatusMessage_CameraServiceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotStatusMessage_CameraServiceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotStatusMessage_CameraServiceMessage::MergeFrom(const RobotStatusMessage_CameraServiceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infraredcameraonline()) {
      set_infraredcameraonline(from.infraredcameraonline());
    }
    if (from.has_normalcameraonline()) {
      set_normalcameraonline(from.normalcameraonline());
    }
    if (from.has_infraredcamerafocus()) {
      set_infraredcamerafocus(from.infraredcamerafocus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotStatusMessage_CameraServiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotStatusMessage_CameraServiceMessage::CopyFrom(const RobotStatusMessage_CameraServiceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStatusMessage_CameraServiceMessage::IsInitialized() const {

  return true;
}

void RobotStatusMessage_CameraServiceMessage::Swap(RobotStatusMessage_CameraServiceMessage* other) {
  if (other != this) {
    std::swap(infraredcameraonline_, other->infraredcameraonline_);
    std::swap(normalcameraonline_, other->normalcameraonline_);
    std::swap(infraredcamerafocus_, other->infraredcamerafocus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotStatusMessage_CameraServiceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotStatusMessage_CameraServiceMessage_descriptor_;
  metadata.reflection = RobotStatusMessage_CameraServiceMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RobotStatusMessage_ImageRecognitionMessage::kTaskIDFieldNumber;
const int RobotStatusMessage_ImageRecognitionMessage::kTaskSavePathFieldNumber;
#endif  // !_MSC_VER

RobotStatusMessage_ImageRecognitionMessage::RobotStatusMessage_ImageRecognitionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotStatusMessage_ImageRecognitionMessage::InitAsDefaultInstance() {
}

RobotStatusMessage_ImageRecognitionMessage::RobotStatusMessage_ImageRecognitionMessage(const RobotStatusMessage_ImageRecognitionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotStatusMessage_ImageRecognitionMessage::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  tasksavepath_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotStatusMessage_ImageRecognitionMessage::~RobotStatusMessage_ImageRecognitionMessage() {
  SharedDtor();
}

void RobotStatusMessage_ImageRecognitionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotStatusMessage_ImageRecognitionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotStatusMessage_ImageRecognitionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotStatusMessage_ImageRecognitionMessage_descriptor_;
}

const RobotStatusMessage_ImageRecognitionMessage& RobotStatusMessage_ImageRecognitionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotStatusMessage_2eproto();
  return *default_instance_;
}

RobotStatusMessage_ImageRecognitionMessage* RobotStatusMessage_ImageRecognitionMessage::default_instance_ = NULL;

RobotStatusMessage_ImageRecognitionMessage* RobotStatusMessage_ImageRecognitionMessage::New() const {
  return new RobotStatusMessage_ImageRecognitionMessage;
}

void RobotStatusMessage_ImageRecognitionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0;
    tasksavepath_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotStatusMessage_ImageRecognitionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TaskSavePath;
        break;
      }

      // optional int32 TaskSavePath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TaskSavePath:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasksavepath_)));
          set_has_tasksavepath();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotStatusMessage_ImageRecognitionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TaskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 TaskSavePath = 2;
  if (has_tasksavepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tasksavepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotStatusMessage_ImageRecognitionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TaskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 TaskSavePath = 2;
  if (has_tasksavepath()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tasksavepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotStatusMessage_ImageRecognitionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 TaskSavePath = 2;
    if (has_tasksavepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasksavepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotStatusMessage_ImageRecognitionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotStatusMessage_ImageRecognitionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotStatusMessage_ImageRecognitionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotStatusMessage_ImageRecognitionMessage::MergeFrom(const RobotStatusMessage_ImageRecognitionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_tasksavepath()) {
      set_tasksavepath(from.tasksavepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotStatusMessage_ImageRecognitionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotStatusMessage_ImageRecognitionMessage::CopyFrom(const RobotStatusMessage_ImageRecognitionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStatusMessage_ImageRecognitionMessage::IsInitialized() const {

  return true;
}

void RobotStatusMessage_ImageRecognitionMessage::Swap(RobotStatusMessage_ImageRecognitionMessage* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(tasksavepath_, other->tasksavepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotStatusMessage_ImageRecognitionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotStatusMessage_ImageRecognitionMessage_descriptor_;
  metadata.reflection = RobotStatusMessage_ImageRecognitionMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RobotStatusMessage_OnlineMessage::kCameraServiceonlineFieldNumber;
const int RobotStatusMessage_OnlineMessage::kRoutePlanNavionlineFieldNumber;
const int RobotStatusMessage_OnlineMessage::kPanTiltCtrlonlineFieldNumber;
const int RobotStatusMessage_OnlineMessage::kImageRecognitiononlineFieldNumber;
const int RobotStatusMessage_OnlineMessage::kDriverCtrlonlineFieldNumber;
const int RobotStatusMessage_OnlineMessage::kA310CameraonlineFieldNumber;
const int RobotStatusMessage_OnlineMessage::kNormalCameraonlineFieldNumber;
#endif  // !_MSC_VER

RobotStatusMessage_OnlineMessage::RobotStatusMessage_OnlineMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotStatusMessage_OnlineMessage::InitAsDefaultInstance() {
}

RobotStatusMessage_OnlineMessage::RobotStatusMessage_OnlineMessage(const RobotStatusMessage_OnlineMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotStatusMessage_OnlineMessage::SharedCtor() {
  _cached_size_ = 0;
  cameraserviceonline_ = 0;
  routeplannavionline_ = 0;
  pantiltctrlonline_ = 0;
  imagerecognitiononline_ = 0;
  driverctrlonline_ = 0;
  a310cameraonline_ = 0;
  normalcameraonline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotStatusMessage_OnlineMessage::~RobotStatusMessage_OnlineMessage() {
  SharedDtor();
}

void RobotStatusMessage_OnlineMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotStatusMessage_OnlineMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotStatusMessage_OnlineMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotStatusMessage_OnlineMessage_descriptor_;
}

const RobotStatusMessage_OnlineMessage& RobotStatusMessage_OnlineMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotStatusMessage_2eproto();
  return *default_instance_;
}

RobotStatusMessage_OnlineMessage* RobotStatusMessage_OnlineMessage::default_instance_ = NULL;

RobotStatusMessage_OnlineMessage* RobotStatusMessage_OnlineMessage::New() const {
  return new RobotStatusMessage_OnlineMessage;
}

void RobotStatusMessage_OnlineMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cameraserviceonline_ = 0;
    routeplannavionline_ = 0;
    pantiltctrlonline_ = 0;
    imagerecognitiononline_ = 0;
    driverctrlonline_ = 0;
    a310cameraonline_ = 0;
    normalcameraonline_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotStatusMessage_OnlineMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CameraServiceonline = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cameraserviceonline_)));
          set_has_cameraserviceonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoutePlanNavionline;
        break;
      }

      // optional int32 RoutePlanNavionline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoutePlanNavionline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routeplannavionline_)));
          set_has_routeplannavionline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PanTiltCtrlonline;
        break;
      }

      // optional int32 PanTiltCtrlonline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PanTiltCtrlonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pantiltctrlonline_)));
          set_has_pantiltctrlonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ImageRecognitiononline;
        break;
      }

      // optional int32 ImageRecognitiononline = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ImageRecognitiononline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagerecognitiononline_)));
          set_has_imagerecognitiononline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DriverCtrlonline;
        break;
      }

      // optional int32 DriverCtrlonline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DriverCtrlonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &driverctrlonline_)));
          set_has_driverctrlonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_A310Cameraonline;
        break;
      }

      // optional int32 A310Cameraonline = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A310Cameraonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a310cameraonline_)));
          set_has_a310cameraonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_NormalCameraonline;
        break;
      }

      // optional int32 NormalCameraonline = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NormalCameraonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normalcameraonline_)));
          set_has_normalcameraonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotStatusMessage_OnlineMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CameraServiceonline = 1;
  if (has_cameraserviceonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cameraserviceonline(), output);
  }

  // optional int32 RoutePlanNavionline = 2;
  if (has_routeplannavionline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->routeplannavionline(), output);
  }

  // optional int32 PanTiltCtrlonline = 3;
  if (has_pantiltctrlonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pantiltctrlonline(), output);
  }

  // optional int32 ImageRecognitiononline = 4;
  if (has_imagerecognitiononline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->imagerecognitiononline(), output);
  }

  // optional int32 DriverCtrlonline = 5;
  if (has_driverctrlonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->driverctrlonline(), output);
  }

  // optional int32 A310Cameraonline = 6;
  if (has_a310cameraonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->a310cameraonline(), output);
  }

  // optional int32 NormalCameraonline = 7;
  if (has_normalcameraonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->normalcameraonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotStatusMessage_OnlineMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CameraServiceonline = 1;
  if (has_cameraserviceonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cameraserviceonline(), target);
  }

  // optional int32 RoutePlanNavionline = 2;
  if (has_routeplannavionline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->routeplannavionline(), target);
  }

  // optional int32 PanTiltCtrlonline = 3;
  if (has_pantiltctrlonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pantiltctrlonline(), target);
  }

  // optional int32 ImageRecognitiononline = 4;
  if (has_imagerecognitiononline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->imagerecognitiononline(), target);
  }

  // optional int32 DriverCtrlonline = 5;
  if (has_driverctrlonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->driverctrlonline(), target);
  }

  // optional int32 A310Cameraonline = 6;
  if (has_a310cameraonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->a310cameraonline(), target);
  }

  // optional int32 NormalCameraonline = 7;
  if (has_normalcameraonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->normalcameraonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotStatusMessage_OnlineMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CameraServiceonline = 1;
    if (has_cameraserviceonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cameraserviceonline());
    }

    // optional int32 RoutePlanNavionline = 2;
    if (has_routeplannavionline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routeplannavionline());
    }

    // optional int32 PanTiltCtrlonline = 3;
    if (has_pantiltctrlonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pantiltctrlonline());
    }

    // optional int32 ImageRecognitiononline = 4;
    if (has_imagerecognitiononline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagerecognitiononline());
    }

    // optional int32 DriverCtrlonline = 5;
    if (has_driverctrlonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->driverctrlonline());
    }

    // optional int32 A310Cameraonline = 6;
    if (has_a310cameraonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a310cameraonline());
    }

    // optional int32 NormalCameraonline = 7;
    if (has_normalcameraonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normalcameraonline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotStatusMessage_OnlineMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotStatusMessage_OnlineMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotStatusMessage_OnlineMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotStatusMessage_OnlineMessage::MergeFrom(const RobotStatusMessage_OnlineMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cameraserviceonline()) {
      set_cameraserviceonline(from.cameraserviceonline());
    }
    if (from.has_routeplannavionline()) {
      set_routeplannavionline(from.routeplannavionline());
    }
    if (from.has_pantiltctrlonline()) {
      set_pantiltctrlonline(from.pantiltctrlonline());
    }
    if (from.has_imagerecognitiononline()) {
      set_imagerecognitiononline(from.imagerecognitiononline());
    }
    if (from.has_driverctrlonline()) {
      set_driverctrlonline(from.driverctrlonline());
    }
    if (from.has_a310cameraonline()) {
      set_a310cameraonline(from.a310cameraonline());
    }
    if (from.has_normalcameraonline()) {
      set_normalcameraonline(from.normalcameraonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotStatusMessage_OnlineMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotStatusMessage_OnlineMessage::CopyFrom(const RobotStatusMessage_OnlineMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStatusMessage_OnlineMessage::IsInitialized() const {

  return true;
}

void RobotStatusMessage_OnlineMessage::Swap(RobotStatusMessage_OnlineMessage* other) {
  if (other != this) {
    std::swap(cameraserviceonline_, other->cameraserviceonline_);
    std::swap(routeplannavionline_, other->routeplannavionline_);
    std::swap(pantiltctrlonline_, other->pantiltctrlonline_);
    std::swap(imagerecognitiononline_, other->imagerecognitiononline_);
    std::swap(driverctrlonline_, other->driverctrlonline_);
    std::swap(a310cameraonline_, other->a310cameraonline_);
    std::swap(normalcameraonline_, other->normalcameraonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotStatusMessage_OnlineMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotStatusMessage_OnlineMessage_descriptor_;
  metadata.reflection = RobotStatusMessage_OnlineMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RobotStatusMessage_RoutePlanNaviMessage::kCurrentPositionFieldNumber;
const int RobotStatusMessage_RoutePlanNaviMessage::kCurrentLineFieldNumber;
const int RobotStatusMessage_RoutePlanNaviMessage::kPositionFinishFieldNumber;
const int RobotStatusMessage_RoutePlanNaviMessage::kCurrentTaskEndIDFieldNumber;
#endif  // !_MSC_VER

RobotStatusMessage_RoutePlanNaviMessage::RobotStatusMessage_RoutePlanNaviMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotStatusMessage_RoutePlanNaviMessage::InitAsDefaultInstance() {
}

RobotStatusMessage_RoutePlanNaviMessage::RobotStatusMessage_RoutePlanNaviMessage(const RobotStatusMessage_RoutePlanNaviMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotStatusMessage_RoutePlanNaviMessage::SharedCtor() {
  _cached_size_ = 0;
  currentposition_ = 0;
  currentline_ = 0;
  positionfinish_ = 0;
  currenttaskendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotStatusMessage_RoutePlanNaviMessage::~RobotStatusMessage_RoutePlanNaviMessage() {
  SharedDtor();
}

void RobotStatusMessage_RoutePlanNaviMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotStatusMessage_RoutePlanNaviMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotStatusMessage_RoutePlanNaviMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotStatusMessage_RoutePlanNaviMessage_descriptor_;
}

const RobotStatusMessage_RoutePlanNaviMessage& RobotStatusMessage_RoutePlanNaviMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotStatusMessage_2eproto();
  return *default_instance_;
}

RobotStatusMessage_RoutePlanNaviMessage* RobotStatusMessage_RoutePlanNaviMessage::default_instance_ = NULL;

RobotStatusMessage_RoutePlanNaviMessage* RobotStatusMessage_RoutePlanNaviMessage::New() const {
  return new RobotStatusMessage_RoutePlanNaviMessage;
}

void RobotStatusMessage_RoutePlanNaviMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currentposition_ = 0;
    currentline_ = 0;
    positionfinish_ = 0;
    currenttaskendid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotStatusMessage_RoutePlanNaviMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CurrentPosition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentposition_)));
          set_has_currentposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurrentLine;
        break;
      }

      // optional int32 CurrentLine = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrentLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentline_)));
          set_has_currentline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PositionFinish;
        break;
      }

      // optional int32 PositionFinish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PositionFinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positionfinish_)));
          set_has_positionfinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CurrentTaskEndID;
        break;
      }

      // optional int32 CurrentTaskEndID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrentTaskEndID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currenttaskendid_)));
          set_has_currenttaskendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotStatusMessage_RoutePlanNaviMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CurrentPosition = 1;
  if (has_currentposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currentposition(), output);
  }

  // optional int32 CurrentLine = 2;
  if (has_currentline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentline(), output);
  }

  // optional int32 PositionFinish = 3;
  if (has_positionfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->positionfinish(), output);
  }

  // optional int32 CurrentTaskEndID = 4;
  if (has_currenttaskendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currenttaskendid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotStatusMessage_RoutePlanNaviMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CurrentPosition = 1;
  if (has_currentposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currentposition(), target);
  }

  // optional int32 CurrentLine = 2;
  if (has_currentline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentline(), target);
  }

  // optional int32 PositionFinish = 3;
  if (has_positionfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->positionfinish(), target);
  }

  // optional int32 CurrentTaskEndID = 4;
  if (has_currenttaskendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currenttaskendid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotStatusMessage_RoutePlanNaviMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CurrentPosition = 1;
    if (has_currentposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentposition());
    }

    // optional int32 CurrentLine = 2;
    if (has_currentline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentline());
    }

    // optional int32 PositionFinish = 3;
    if (has_positionfinish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positionfinish());
    }

    // optional int32 CurrentTaskEndID = 4;
    if (has_currenttaskendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenttaskendid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotStatusMessage_RoutePlanNaviMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotStatusMessage_RoutePlanNaviMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotStatusMessage_RoutePlanNaviMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotStatusMessage_RoutePlanNaviMessage::MergeFrom(const RobotStatusMessage_RoutePlanNaviMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentposition()) {
      set_currentposition(from.currentposition());
    }
    if (from.has_currentline()) {
      set_currentline(from.currentline());
    }
    if (from.has_positionfinish()) {
      set_positionfinish(from.positionfinish());
    }
    if (from.has_currenttaskendid()) {
      set_currenttaskendid(from.currenttaskendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotStatusMessage_RoutePlanNaviMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotStatusMessage_RoutePlanNaviMessage::CopyFrom(const RobotStatusMessage_RoutePlanNaviMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStatusMessage_RoutePlanNaviMessage::IsInitialized() const {

  return true;
}

void RobotStatusMessage_RoutePlanNaviMessage::Swap(RobotStatusMessage_RoutePlanNaviMessage* other) {
  if (other != this) {
    std::swap(currentposition_, other->currentposition_);
    std::swap(currentline_, other->currentline_);
    std::swap(positionfinish_, other->positionfinish_);
    std::swap(currenttaskendid_, other->currenttaskendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotStatusMessage_RoutePlanNaviMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotStatusMessage_RoutePlanNaviMessage_descriptor_;
  metadata.reflection = RobotStatusMessage_RoutePlanNaviMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RobotStatusMessage_PanTiltCtrlMessage::kPanTiltDevComoFieldNumber;
const int RobotStatusMessage_PanTiltCtrlMessage::kPanPosFieldNumber;
const int RobotStatusMessage_PanTiltCtrlMessage::kTlitPosFieldNumber;
const int RobotStatusMessage_PanTiltCtrlMessage::kZoomPosFieldNumber;
const int RobotStatusMessage_PanTiltCtrlMessage::kFocusPosFieldNumber;
const int RobotStatusMessage_PanTiltCtrlMessage::kWiperStautsFieldNumber;
const int RobotStatusMessage_PanTiltCtrlMessage::kFocusStautsFieldNumber;
#endif  // !_MSC_VER

RobotStatusMessage_PanTiltCtrlMessage::RobotStatusMessage_PanTiltCtrlMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotStatusMessage_PanTiltCtrlMessage::InitAsDefaultInstance() {
}

RobotStatusMessage_PanTiltCtrlMessage::RobotStatusMessage_PanTiltCtrlMessage(const RobotStatusMessage_PanTiltCtrlMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotStatusMessage_PanTiltCtrlMessage::SharedCtor() {
  _cached_size_ = 0;
  pantiltdevcomo_ = 0;
  panpos_ = 0;
  tlitpos_ = 0;
  zoompos_ = 0;
  focuspos_ = 0;
  wiperstauts_ = 0;
  focusstauts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotStatusMessage_PanTiltCtrlMessage::~RobotStatusMessage_PanTiltCtrlMessage() {
  SharedDtor();
}

void RobotStatusMessage_PanTiltCtrlMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotStatusMessage_PanTiltCtrlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotStatusMessage_PanTiltCtrlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotStatusMessage_PanTiltCtrlMessage_descriptor_;
}

const RobotStatusMessage_PanTiltCtrlMessage& RobotStatusMessage_PanTiltCtrlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotStatusMessage_2eproto();
  return *default_instance_;
}

RobotStatusMessage_PanTiltCtrlMessage* RobotStatusMessage_PanTiltCtrlMessage::default_instance_ = NULL;

RobotStatusMessage_PanTiltCtrlMessage* RobotStatusMessage_PanTiltCtrlMessage::New() const {
  return new RobotStatusMessage_PanTiltCtrlMessage;
}

void RobotStatusMessage_PanTiltCtrlMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pantiltdevcomo_ = 0;
    panpos_ = 0;
    tlitpos_ = 0;
    zoompos_ = 0;
    focuspos_ = 0;
    wiperstauts_ = 0;
    focusstauts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotStatusMessage_PanTiltCtrlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PanTiltDevComo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pantiltdevcomo_)));
          set_has_pantiltdevcomo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PanPos;
        break;
      }

      // optional int32 PanPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PanPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &panpos_)));
          set_has_panpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TlitPos;
        break;
      }

      // optional int32 TlitPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TlitPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlitpos_)));
          set_has_tlitpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ZoomPos;
        break;
      }

      // optional int32 ZoomPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZoomPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoompos_)));
          set_has_zoompos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FocusPos;
        break;
      }

      // optional int32 FocusPos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FocusPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &focuspos_)));
          set_has_focuspos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_WiperStauts;
        break;
      }

      // optional int32 WiperStauts = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WiperStauts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiperstauts_)));
          set_has_wiperstauts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FocusStauts;
        break;
      }

      // optional int32 FocusStauts = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FocusStauts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &focusstauts_)));
          set_has_focusstauts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotStatusMessage_PanTiltCtrlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PanTiltDevComo = 1;
  if (has_pantiltdevcomo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pantiltdevcomo(), output);
  }

  // optional int32 PanPos = 2;
  if (has_panpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->panpos(), output);
  }

  // optional int32 TlitPos = 3;
  if (has_tlitpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tlitpos(), output);
  }

  // optional int32 ZoomPos = 4;
  if (has_zoompos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->zoompos(), output);
  }

  // optional int32 FocusPos = 5;
  if (has_focuspos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->focuspos(), output);
  }

  // optional int32 WiperStauts = 6;
  if (has_wiperstauts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wiperstauts(), output);
  }

  // optional int32 FocusStauts = 7;
  if (has_focusstauts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->focusstauts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotStatusMessage_PanTiltCtrlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PanTiltDevComo = 1;
  if (has_pantiltdevcomo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pantiltdevcomo(), target);
  }

  // optional int32 PanPos = 2;
  if (has_panpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->panpos(), target);
  }

  // optional int32 TlitPos = 3;
  if (has_tlitpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tlitpos(), target);
  }

  // optional int32 ZoomPos = 4;
  if (has_zoompos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->zoompos(), target);
  }

  // optional int32 FocusPos = 5;
  if (has_focuspos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->focuspos(), target);
  }

  // optional int32 WiperStauts = 6;
  if (has_wiperstauts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wiperstauts(), target);
  }

  // optional int32 FocusStauts = 7;
  if (has_focusstauts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->focusstauts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotStatusMessage_PanTiltCtrlMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PanTiltDevComo = 1;
    if (has_pantiltdevcomo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pantiltdevcomo());
    }

    // optional int32 PanPos = 2;
    if (has_panpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->panpos());
    }

    // optional int32 TlitPos = 3;
    if (has_tlitpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlitpos());
    }

    // optional int32 ZoomPos = 4;
    if (has_zoompos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoompos());
    }

    // optional int32 FocusPos = 5;
    if (has_focuspos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->focuspos());
    }

    // optional int32 WiperStauts = 6;
    if (has_wiperstauts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wiperstauts());
    }

    // optional int32 FocusStauts = 7;
    if (has_focusstauts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->focusstauts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotStatusMessage_PanTiltCtrlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotStatusMessage_PanTiltCtrlMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotStatusMessage_PanTiltCtrlMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotStatusMessage_PanTiltCtrlMessage::MergeFrom(const RobotStatusMessage_PanTiltCtrlMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pantiltdevcomo()) {
      set_pantiltdevcomo(from.pantiltdevcomo());
    }
    if (from.has_panpos()) {
      set_panpos(from.panpos());
    }
    if (from.has_tlitpos()) {
      set_tlitpos(from.tlitpos());
    }
    if (from.has_zoompos()) {
      set_zoompos(from.zoompos());
    }
    if (from.has_focuspos()) {
      set_focuspos(from.focuspos());
    }
    if (from.has_wiperstauts()) {
      set_wiperstauts(from.wiperstauts());
    }
    if (from.has_focusstauts()) {
      set_focusstauts(from.focusstauts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotStatusMessage_PanTiltCtrlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotStatusMessage_PanTiltCtrlMessage::CopyFrom(const RobotStatusMessage_PanTiltCtrlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStatusMessage_PanTiltCtrlMessage::IsInitialized() const {

  return true;
}

void RobotStatusMessage_PanTiltCtrlMessage::Swap(RobotStatusMessage_PanTiltCtrlMessage* other) {
  if (other != this) {
    std::swap(pantiltdevcomo_, other->pantiltdevcomo_);
    std::swap(panpos_, other->panpos_);
    std::swap(tlitpos_, other->tlitpos_);
    std::swap(zoompos_, other->zoompos_);
    std::swap(focuspos_, other->focuspos_);
    std::swap(wiperstauts_, other->wiperstauts_);
    std::swap(focusstauts_, other->focusstauts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotStatusMessage_PanTiltCtrlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotStatusMessage_PanTiltCtrlMessage_descriptor_;
  metadata.reflection = RobotStatusMessage_PanTiltCtrlMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RobotStatusMessage_ManagementSystemMessage::kTaskIDFieldNumber;
const int RobotStatusMessage_ManagementSystemMessage::kTaskNameFieldNumber;
const int RobotStatusMessage_ManagementSystemMessage::kMeterPointIDFieldNumber;
const int RobotStatusMessage_ManagementSystemMessage::kMeterPointNameFieldNumber;
const int RobotStatusMessage_ManagementSystemMessage::kStopPointidFieldNumber;
#endif  // !_MSC_VER

RobotStatusMessage_ManagementSystemMessage::RobotStatusMessage_ManagementSystemMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotStatusMessage_ManagementSystemMessage::InitAsDefaultInstance() {
}

RobotStatusMessage_ManagementSystemMessage::RobotStatusMessage_ManagementSystemMessage(const RobotStatusMessage_ManagementSystemMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotStatusMessage_ManagementSystemMessage::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meterpointid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meterpointname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stoppointid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotStatusMessage_ManagementSystemMessage::~RobotStatusMessage_ManagementSystemMessage() {
  SharedDtor();
}

void RobotStatusMessage_ManagementSystemMessage::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (meterpointid_ != &::google::protobuf::internal::kEmptyString) {
    delete meterpointid_;
  }
  if (meterpointname_ != &::google::protobuf::internal::kEmptyString) {
    delete meterpointname_;
  }
  if (stoppointid_ != &::google::protobuf::internal::kEmptyString) {
    delete stoppointid_;
  }
  if (this != default_instance_) {
  }
}

void RobotStatusMessage_ManagementSystemMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotStatusMessage_ManagementSystemMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotStatusMessage_ManagementSystemMessage_descriptor_;
}

const RobotStatusMessage_ManagementSystemMessage& RobotStatusMessage_ManagementSystemMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotStatusMessage_2eproto();
  return *default_instance_;
}

RobotStatusMessage_ManagementSystemMessage* RobotStatusMessage_ManagementSystemMessage::default_instance_ = NULL;

RobotStatusMessage_ManagementSystemMessage* RobotStatusMessage_ManagementSystemMessage::New() const {
  return new RobotStatusMessage_ManagementSystemMessage;
}

void RobotStatusMessage_ManagementSystemMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_taskname()) {
      if (taskname_ != &::google::protobuf::internal::kEmptyString) {
        taskname_->clear();
      }
    }
    if (has_meterpointid()) {
      if (meterpointid_ != &::google::protobuf::internal::kEmptyString) {
        meterpointid_->clear();
      }
    }
    if (has_meterpointname()) {
      if (meterpointname_ != &::google::protobuf::internal::kEmptyString) {
        meterpointname_->clear();
      }
    }
    if (has_stoppointid()) {
      if (stoppointid_ != &::google::protobuf::internal::kEmptyString) {
        stoppointid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotStatusMessage_ManagementSystemMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TaskName;
        break;
      }

      // optional string TaskName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TaskName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskname().data(), this->taskname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MeterPointID;
        break;
      }

      // optional string MeterPointID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MeterPointID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meterpointid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meterpointid().data(), this->meterpointid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MeterPointName;
        break;
      }

      // optional string MeterPointName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MeterPointName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meterpointname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meterpointname().data(), this->meterpointname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_StopPointid;
        break;
      }

      // optional string StopPointid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StopPointid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoppointid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stoppointid().data(), this->stoppointid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotStatusMessage_ManagementSystemMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string TaskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // optional string TaskName = 2;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->taskname(), output);
  }

  // optional string MeterPointID = 3;
  if (has_meterpointid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meterpointid().data(), this->meterpointid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->meterpointid(), output);
  }

  // optional string MeterPointName = 4;
  if (has_meterpointname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meterpointname().data(), this->meterpointname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->meterpointname(), output);
  }

  // optional string StopPointid = 5;
  if (has_stoppointid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stoppointid().data(), this->stoppointid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stoppointid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotStatusMessage_ManagementSystemMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string TaskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // optional string TaskName = 2;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->taskname(), target);
  }

  // optional string MeterPointID = 3;
  if (has_meterpointid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meterpointid().data(), this->meterpointid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->meterpointid(), target);
  }

  // optional string MeterPointName = 4;
  if (has_meterpointname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meterpointname().data(), this->meterpointname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->meterpointname(), target);
  }

  // optional string StopPointid = 5;
  if (has_stoppointid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stoppointid().data(), this->stoppointid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stoppointid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotStatusMessage_ManagementSystemMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // optional string TaskName = 2;
    if (has_taskname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskname());
    }

    // optional string MeterPointID = 3;
    if (has_meterpointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meterpointid());
    }

    // optional string MeterPointName = 4;
    if (has_meterpointname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meterpointname());
    }

    // optional string StopPointid = 5;
    if (has_stoppointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stoppointid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotStatusMessage_ManagementSystemMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotStatusMessage_ManagementSystemMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotStatusMessage_ManagementSystemMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotStatusMessage_ManagementSystemMessage::MergeFrom(const RobotStatusMessage_ManagementSystemMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_taskname()) {
      set_taskname(from.taskname());
    }
    if (from.has_meterpointid()) {
      set_meterpointid(from.meterpointid());
    }
    if (from.has_meterpointname()) {
      set_meterpointname(from.meterpointname());
    }
    if (from.has_stoppointid()) {
      set_stoppointid(from.stoppointid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotStatusMessage_ManagementSystemMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotStatusMessage_ManagementSystemMessage::CopyFrom(const RobotStatusMessage_ManagementSystemMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStatusMessage_ManagementSystemMessage::IsInitialized() const {

  return true;
}

void RobotStatusMessage_ManagementSystemMessage::Swap(RobotStatusMessage_ManagementSystemMessage* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskname_, other->taskname_);
    std::swap(meterpointid_, other->meterpointid_);
    std::swap(meterpointname_, other->meterpointname_);
    std::swap(stoppointid_, other->stoppointid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotStatusMessage_ManagementSystemMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotStatusMessage_ManagementSystemMessage_descriptor_;
  metadata.reflection = RobotStatusMessage_ManagementSystemMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RobotStatusMessage::kStatFieldNumber;
const int RobotStatusMessage::kControllerFieldNumber;
const int RobotStatusMessage::kCameraServiceFieldNumber;
const int RobotStatusMessage::kOnlineMSgFieldNumber;
const int RobotStatusMessage::kRoutePlanNaviFieldNumber;
const int RobotStatusMessage::kImageRecognitionFieldNumber;
const int RobotStatusMessage::kManagementSystemFieldNumber;
const int RobotStatusMessage::kPanTiltCtrlFieldNumber;
#endif  // !_MSC_VER

RobotStatusMessage::RobotStatusMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotStatusMessage::InitAsDefaultInstance() {
  controller_ = const_cast< ::ControllerMessage*>(&::ControllerMessage::default_instance());
  cameraservice_ = const_cast< ::RobotStatusMessage_CameraServiceMessage*>(&::RobotStatusMessage_CameraServiceMessage::default_instance());
  onlinemsg_ = const_cast< ::RobotStatusMessage_OnlineMessage*>(&::RobotStatusMessage_OnlineMessage::default_instance());
  routeplannavi_ = const_cast< ::RobotStatusMessage_RoutePlanNaviMessage*>(&::RobotStatusMessage_RoutePlanNaviMessage::default_instance());
  imagerecognition_ = const_cast< ::RobotStatusMessage_ImageRecognitionMessage*>(&::RobotStatusMessage_ImageRecognitionMessage::default_instance());
  managementsystem_ = const_cast< ::RobotStatusMessage_ManagementSystemMessage*>(&::RobotStatusMessage_ManagementSystemMessage::default_instance());
  pantiltctrl_ = const_cast< ::RobotStatusMessage_PanTiltCtrlMessage*>(&::RobotStatusMessage_PanTiltCtrlMessage::default_instance());
}

RobotStatusMessage::RobotStatusMessage(const RobotStatusMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotStatusMessage::SharedCtor() {
  _cached_size_ = 0;
  stat_ = 0;
  controller_ = NULL;
  cameraservice_ = NULL;
  onlinemsg_ = NULL;
  routeplannavi_ = NULL;
  imagerecognition_ = NULL;
  managementsystem_ = NULL;
  pantiltctrl_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotStatusMessage::~RobotStatusMessage() {
  SharedDtor();
}

void RobotStatusMessage::SharedDtor() {
  if (this != default_instance_) {
    delete controller_;
    delete cameraservice_;
    delete onlinemsg_;
    delete routeplannavi_;
    delete imagerecognition_;
    delete managementsystem_;
    delete pantiltctrl_;
  }
}

void RobotStatusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotStatusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotStatusMessage_descriptor_;
}

const RobotStatusMessage& RobotStatusMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotStatusMessage_2eproto();
  return *default_instance_;
}

RobotStatusMessage* RobotStatusMessage::default_instance_ = NULL;

RobotStatusMessage* RobotStatusMessage::New() const {
  return new RobotStatusMessage;
}

void RobotStatusMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_ = 0;
    if (has_controller()) {
      if (controller_ != NULL) controller_->::ControllerMessage::Clear();
    }
    if (has_cameraservice()) {
      if (cameraservice_ != NULL) cameraservice_->::RobotStatusMessage_CameraServiceMessage::Clear();
    }
    if (has_onlinemsg()) {
      if (onlinemsg_ != NULL) onlinemsg_->::RobotStatusMessage_OnlineMessage::Clear();
    }
    if (has_routeplannavi()) {
      if (routeplannavi_ != NULL) routeplannavi_->::RobotStatusMessage_RoutePlanNaviMessage::Clear();
    }
    if (has_imagerecognition()) {
      if (imagerecognition_ != NULL) imagerecognition_->::RobotStatusMessage_ImageRecognitionMessage::Clear();
    }
    if (has_managementsystem()) {
      if (managementsystem_ != NULL) managementsystem_->::RobotStatusMessage_ManagementSystemMessage::Clear();
    }
    if (has_pantiltctrl()) {
      if (pantiltctrl_ != NULL) pantiltctrl_->::RobotStatusMessage_PanTiltCtrlMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotStatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Controller;
        break;
      }

      // optional .ControllerMessage Controller = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Controller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CameraService;
        break;
      }

      // optional .RobotStatusMessage.CameraServiceMessage CameraService = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CameraService:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraservice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OnlineMSg;
        break;
      }

      // optional .RobotStatusMessage.OnlineMessage OnlineMSg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnlineMSg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onlinemsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RoutePlanNavi;
        break;
      }

      // optional .RobotStatusMessage.RoutePlanNaviMessage RoutePlanNavi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoutePlanNavi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routeplannavi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ImageRecognition;
        break;
      }

      // optional .RobotStatusMessage.ImageRecognitionMessage ImageRecognition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ImageRecognition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagerecognition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ManagementSystem;
        break;
      }

      // optional .RobotStatusMessage.ManagementSystemMessage ManagementSystem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ManagementSystem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_managementsystem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_PanTiltCtrl;
        break;
      }

      // optional .RobotStatusMessage.PanTiltCtrlMessage PanTiltCtrl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PanTiltCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pantiltctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotStatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Stat = 1;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stat(), output);
  }

  // optional .ControllerMessage Controller = 2;
  if (has_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->controller(), output);
  }

  // optional .RobotStatusMessage.CameraServiceMessage CameraService = 3;
  if (has_cameraservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cameraservice(), output);
  }

  // optional .RobotStatusMessage.OnlineMessage OnlineMSg = 4;
  if (has_onlinemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->onlinemsg(), output);
  }

  // optional .RobotStatusMessage.RoutePlanNaviMessage RoutePlanNavi = 5;
  if (has_routeplannavi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->routeplannavi(), output);
  }

  // optional .RobotStatusMessage.ImageRecognitionMessage ImageRecognition = 6;
  if (has_imagerecognition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->imagerecognition(), output);
  }

  // optional .RobotStatusMessage.ManagementSystemMessage ManagementSystem = 7;
  if (has_managementsystem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->managementsystem(), output);
  }

  // optional .RobotStatusMessage.PanTiltCtrlMessage PanTiltCtrl = 8;
  if (has_pantiltctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pantiltctrl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotStatusMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Stat = 1;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stat(), target);
  }

  // optional .ControllerMessage Controller = 2;
  if (has_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->controller(), target);
  }

  // optional .RobotStatusMessage.CameraServiceMessage CameraService = 3;
  if (has_cameraservice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cameraservice(), target);
  }

  // optional .RobotStatusMessage.OnlineMessage OnlineMSg = 4;
  if (has_onlinemsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->onlinemsg(), target);
  }

  // optional .RobotStatusMessage.RoutePlanNaviMessage RoutePlanNavi = 5;
  if (has_routeplannavi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->routeplannavi(), target);
  }

  // optional .RobotStatusMessage.ImageRecognitionMessage ImageRecognition = 6;
  if (has_imagerecognition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->imagerecognition(), target);
  }

  // optional .RobotStatusMessage.ManagementSystemMessage ManagementSystem = 7;
  if (has_managementsystem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->managementsystem(), target);
  }

  // optional .RobotStatusMessage.PanTiltCtrlMessage PanTiltCtrl = 8;
  if (has_pantiltctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pantiltctrl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotStatusMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Stat = 1;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat());
    }

    // optional .ControllerMessage Controller = 2;
    if (has_controller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller());
    }

    // optional .RobotStatusMessage.CameraServiceMessage CameraService = 3;
    if (has_cameraservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameraservice());
    }

    // optional .RobotStatusMessage.OnlineMessage OnlineMSg = 4;
    if (has_onlinemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onlinemsg());
    }

    // optional .RobotStatusMessage.RoutePlanNaviMessage RoutePlanNavi = 5;
    if (has_routeplannavi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routeplannavi());
    }

    // optional .RobotStatusMessage.ImageRecognitionMessage ImageRecognition = 6;
    if (has_imagerecognition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagerecognition());
    }

    // optional .RobotStatusMessage.ManagementSystemMessage ManagementSystem = 7;
    if (has_managementsystem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->managementsystem());
    }

    // optional .RobotStatusMessage.PanTiltCtrlMessage PanTiltCtrl = 8;
    if (has_pantiltctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pantiltctrl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotStatusMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotStatusMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotStatusMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotStatusMessage::MergeFrom(const RobotStatusMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat()) {
      set_stat(from.stat());
    }
    if (from.has_controller()) {
      mutable_controller()->::ControllerMessage::MergeFrom(from.controller());
    }
    if (from.has_cameraservice()) {
      mutable_cameraservice()->::RobotStatusMessage_CameraServiceMessage::MergeFrom(from.cameraservice());
    }
    if (from.has_onlinemsg()) {
      mutable_onlinemsg()->::RobotStatusMessage_OnlineMessage::MergeFrom(from.onlinemsg());
    }
    if (from.has_routeplannavi()) {
      mutable_routeplannavi()->::RobotStatusMessage_RoutePlanNaviMessage::MergeFrom(from.routeplannavi());
    }
    if (from.has_imagerecognition()) {
      mutable_imagerecognition()->::RobotStatusMessage_ImageRecognitionMessage::MergeFrom(from.imagerecognition());
    }
    if (from.has_managementsystem()) {
      mutable_managementsystem()->::RobotStatusMessage_ManagementSystemMessage::MergeFrom(from.managementsystem());
    }
    if (from.has_pantiltctrl()) {
      mutable_pantiltctrl()->::RobotStatusMessage_PanTiltCtrlMessage::MergeFrom(from.pantiltctrl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotStatusMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotStatusMessage::CopyFrom(const RobotStatusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStatusMessage::IsInitialized() const {

  return true;
}

void RobotStatusMessage::Swap(RobotStatusMessage* other) {
  if (other != this) {
    std::swap(stat_, other->stat_);
    std::swap(controller_, other->controller_);
    std::swap(cameraservice_, other->cameraservice_);
    std::swap(onlinemsg_, other->onlinemsg_);
    std::swap(routeplannavi_, other->routeplannavi_);
    std::swap(imagerecognition_, other->imagerecognition_);
    std::swap(managementsystem_, other->managementsystem_);
    std::swap(pantiltctrl_, other->pantiltctrl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotStatusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotStatusMessage_descriptor_;
  metadata.reflection = RobotStatusMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
