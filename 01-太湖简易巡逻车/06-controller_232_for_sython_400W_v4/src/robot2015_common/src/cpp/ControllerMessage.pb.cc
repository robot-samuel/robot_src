// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControllerMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ControllerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ControllerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControllerMessage_Dirver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerMessage_Dirver_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ControllerMessage_2eproto() {
  protobuf_AddDesc_ControllerMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ControllerMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ControllerMessage_descriptor_ = file->message_type(0);
  static const int ControllerMessage_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, dirvermessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, sensormsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, ctrl_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, bmsmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, errormsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, alarmmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, ultrasound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, linevelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, thvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, ph3air_),
  };
  ControllerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControllerMessage_descriptor_,
      ControllerMessage::default_instance_,
      ControllerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControllerMessage));
  ControllerMessage_Dirver_descriptor_ = ControllerMessage_descriptor_->nested_type(0);
  static const int ControllerMessage_Dirver_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, device_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, device_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, actvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, setvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, ctrl_dc_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, ctrl_ipm_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, actualpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, emergencyinputvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, motec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, actcurrent_),
  };
  ControllerMessage_Dirver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControllerMessage_Dirver_descriptor_,
      ControllerMessage_Dirver::default_instance_,
      ControllerMessage_Dirver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerMessage_Dirver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControllerMessage_Dirver));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ControllerMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControllerMessage_descriptor_, &ControllerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControllerMessage_Dirver_descriptor_, &ControllerMessage_Dirver::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ControllerMessage_2eproto() {
  delete ControllerMessage::default_instance_;
  delete ControllerMessage_reflection_;
  delete ControllerMessage_Dirver::default_instance_;
  delete ControllerMessage_Dirver_reflection_;
}

void protobuf_AddDesc_ControllerMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ExternSensor_2eproto();
  ::protobuf_AddDesc_MotecDriverStat_2eproto();
  ::protobuf_AddDesc_BMSMessage_2eproto();
  ::protobuf_AddDesc_ErrorMessage_2eproto();
  ::protobuf_AddDesc_AlarmMessage_2eproto();
  ::protobuf_AddDesc_UltrasoundMessage_2eproto();
  ::protobuf_AddDesc_ph3airmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ControllerMessage.proto\032\022ExternSensor."
    "proto\032\025MotecDriverStat.proto\032\020BMSMessage"
    ".proto\032\022ErrorMessage.proto\032\022AlarmMessage"
    ".proto\032\027UltrasoundMessage.proto\032\017ph3airm"
    "sg.proto\"\342\004\n\021ControllerMessage\022\014\n\004Stat\030\001"
    " \001(\005\0220\n\rDirverMessage\030\002 \003(\0132\031.Controller"
    "Message.Dirver\022 \n\tSensorMsg\030\003 \001(\0132\r.Exte"
    "rnSensor\022\023\n\013ctrl_device\030\004 \001(\005\022\033\n\006bmsMsg\030"
    "\005 \001(\0132\013.BmsMessage\022\037\n\010errormsg\030\006 \001(\0132\r.E"
    "rrorMessage\022\037\n\010alarmmsg\030\007 \001(\0132\r.AlarmMes"
    "sage\022&\n\nUltrasound\030\010 \001(\0132\022.UltrasoundMes"
    "sage\022\024\n\014LineVelocity\030\t \001(\002\022\022\n\nTHVelocity"
    "\030\n \001(\002\022\032\n\006ph3air\030\013 \001(\0132\n.ph3airmsg\032\210\002\n\006D"
    "irver\022\025\n\rdevice_status\030\001 \001(\005\022\022\n\ndevice_a"
    "dd\030\002 \001(\005\022\023\n\013ActVelocity\030\003 \001(\005\022\023\n\013SetVelo"
    "city\030\004 \001(\005\022\027\n\017ctrl_dc_Voltage\030\005 \001(\002\022\034\n\024C"
    "TRL_IPM_TEMPERATURE\030\006 \001(\002\022\021\n\tActualPos\030\007"
    " \001(\005\022\033\n\023EmergencyInputValue\030\010 \001(\010\022\r\n\005Err"
    "or\030\t \001(\t\022\037\n\005motec\030\n \001(\0132\020.MotecDriverSta"
    "t\022\022\n\nActCurrent\030\013 \001(\002", 781);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ControllerMessage.proto", &protobuf_RegisterTypes);
  ControllerMessage::default_instance_ = new ControllerMessage();
  ControllerMessage_Dirver::default_instance_ = new ControllerMessage_Dirver();
  ControllerMessage::default_instance_->InitAsDefaultInstance();
  ControllerMessage_Dirver::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ControllerMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ControllerMessage_2eproto {
  StaticDescriptorInitializer_ControllerMessage_2eproto() {
    protobuf_AddDesc_ControllerMessage_2eproto();
  }
} static_descriptor_initializer_ControllerMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ControllerMessage_Dirver::kDeviceStatusFieldNumber;
const int ControllerMessage_Dirver::kDeviceAddFieldNumber;
const int ControllerMessage_Dirver::kActVelocityFieldNumber;
const int ControllerMessage_Dirver::kSetVelocityFieldNumber;
const int ControllerMessage_Dirver::kCtrlDcVoltageFieldNumber;
const int ControllerMessage_Dirver::kCTRLIPMTEMPERATUREFieldNumber;
const int ControllerMessage_Dirver::kActualPosFieldNumber;
const int ControllerMessage_Dirver::kEmergencyInputValueFieldNumber;
const int ControllerMessage_Dirver::kErrorFieldNumber;
const int ControllerMessage_Dirver::kMotecFieldNumber;
const int ControllerMessage_Dirver::kActCurrentFieldNumber;
#endif  // !_MSC_VER

ControllerMessage_Dirver::ControllerMessage_Dirver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControllerMessage_Dirver::InitAsDefaultInstance() {
  motec_ = const_cast< ::MotecDriverStat*>(&::MotecDriverStat::default_instance());
}

ControllerMessage_Dirver::ControllerMessage_Dirver(const ControllerMessage_Dirver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControllerMessage_Dirver::SharedCtor() {
  _cached_size_ = 0;
  device_status_ = 0;
  device_add_ = 0;
  actvelocity_ = 0;
  setvelocity_ = 0;
  ctrl_dc_voltage_ = 0;
  ctrl_ipm_temperature_ = 0;
  actualpos_ = 0;
  emergencyinputvalue_ = false;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  motec_ = NULL;
  actcurrent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControllerMessage_Dirver::~ControllerMessage_Dirver() {
  SharedDtor();
}

void ControllerMessage_Dirver::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
    delete motec_;
  }
}

void ControllerMessage_Dirver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerMessage_Dirver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerMessage_Dirver_descriptor_;
}

const ControllerMessage_Dirver& ControllerMessage_Dirver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ControllerMessage_2eproto();
  return *default_instance_;
}

ControllerMessage_Dirver* ControllerMessage_Dirver::default_instance_ = NULL;

ControllerMessage_Dirver* ControllerMessage_Dirver::New() const {
  return new ControllerMessage_Dirver;
}

void ControllerMessage_Dirver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    device_status_ = 0;
    device_add_ = 0;
    actvelocity_ = 0;
    setvelocity_ = 0;
    ctrl_dc_voltage_ = 0;
    ctrl_ipm_temperature_ = 0;
    actualpos_ = 0;
    emergencyinputvalue_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    if (has_motec()) {
      if (motec_ != NULL) motec_->::MotecDriverStat::Clear();
    }
    actcurrent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControllerMessage_Dirver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 device_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_status_)));
          set_has_device_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_device_add;
        break;
      }

      // optional int32 device_add = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_add_)));
          set_has_device_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ActVelocity;
        break;
      }

      // optional int32 ActVelocity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actvelocity_)));
          set_has_actvelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SetVelocity;
        break;
      }

      // optional int32 SetVelocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SetVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setvelocity_)));
          set_has_setvelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_ctrl_dc_Voltage;
        break;
      }

      // optional float ctrl_dc_Voltage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ctrl_dc_Voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctrl_dc_voltage_)));
          set_has_ctrl_dc_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_CTRL_IPM_TEMPERATURE;
        break;
      }

      // optional float CTRL_IPM_TEMPERATURE = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CTRL_IPM_TEMPERATURE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctrl_ipm_temperature_)));
          set_has_ctrl_ipm_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ActualPos;
        break;
      }

      // optional int32 ActualPos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActualPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualpos_)));
          set_has_actualpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_EmergencyInputValue;
        break;
      }

      // optional bool EmergencyInputValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EmergencyInputValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergencyinputvalue_)));
          set_has_emergencyinputvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Error;
        break;
      }

      // optional string Error = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_motec;
        break;
      }

      // optional .MotecDriverStat motec = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_ActCurrent;
        break;
      }

      // optional float ActCurrent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ActCurrent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &actcurrent_)));
          set_has_actcurrent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControllerMessage_Dirver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 device_status = 1;
  if (has_device_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_status(), output);
  }

  // optional int32 device_add = 2;
  if (has_device_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->device_add(), output);
  }

  // optional int32 ActVelocity = 3;
  if (has_actvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actvelocity(), output);
  }

  // optional int32 SetVelocity = 4;
  if (has_setvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->setvelocity(), output);
  }

  // optional float ctrl_dc_Voltage = 5;
  if (has_ctrl_dc_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ctrl_dc_voltage(), output);
  }

  // optional float CTRL_IPM_TEMPERATURE = 6;
  if (has_ctrl_ipm_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ctrl_ipm_temperature(), output);
  }

  // optional int32 ActualPos = 7;
  if (has_actualpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->actualpos(), output);
  }

  // optional bool EmergencyInputValue = 8;
  if (has_emergencyinputvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->emergencyinputvalue(), output);
  }

  // optional string Error = 9;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->error(), output);
  }

  // optional .MotecDriverStat motec = 10;
  if (has_motec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->motec(), output);
  }

  // optional float ActCurrent = 11;
  if (has_actcurrent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->actcurrent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControllerMessage_Dirver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 device_status = 1;
  if (has_device_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device_status(), target);
  }

  // optional int32 device_add = 2;
  if (has_device_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->device_add(), target);
  }

  // optional int32 ActVelocity = 3;
  if (has_actvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actvelocity(), target);
  }

  // optional int32 SetVelocity = 4;
  if (has_setvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->setvelocity(), target);
  }

  // optional float ctrl_dc_Voltage = 5;
  if (has_ctrl_dc_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ctrl_dc_voltage(), target);
  }

  // optional float CTRL_IPM_TEMPERATURE = 6;
  if (has_ctrl_ipm_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ctrl_ipm_temperature(), target);
  }

  // optional int32 ActualPos = 7;
  if (has_actualpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->actualpos(), target);
  }

  // optional bool EmergencyInputValue = 8;
  if (has_emergencyinputvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->emergencyinputvalue(), target);
  }

  // optional string Error = 9;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->error(), target);
  }

  // optional .MotecDriverStat motec = 10;
  if (has_motec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->motec(), target);
  }

  // optional float ActCurrent = 11;
  if (has_actcurrent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->actcurrent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControllerMessage_Dirver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 device_status = 1;
    if (has_device_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_status());
    }

    // optional int32 device_add = 2;
    if (has_device_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_add());
    }

    // optional int32 ActVelocity = 3;
    if (has_actvelocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actvelocity());
    }

    // optional int32 SetVelocity = 4;
    if (has_setvelocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setvelocity());
    }

    // optional float ctrl_dc_Voltage = 5;
    if (has_ctrl_dc_voltage()) {
      total_size += 1 + 4;
    }

    // optional float CTRL_IPM_TEMPERATURE = 6;
    if (has_ctrl_ipm_temperature()) {
      total_size += 1 + 4;
    }

    // optional int32 ActualPos = 7;
    if (has_actualpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actualpos());
    }

    // optional bool EmergencyInputValue = 8;
    if (has_emergencyinputvalue()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Error = 9;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional .MotecDriverStat motec = 10;
    if (has_motec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motec());
    }

    // optional float ActCurrent = 11;
    if (has_actcurrent()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerMessage_Dirver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControllerMessage_Dirver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControllerMessage_Dirver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerMessage_Dirver::MergeFrom(const ControllerMessage_Dirver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_status()) {
      set_device_status(from.device_status());
    }
    if (from.has_device_add()) {
      set_device_add(from.device_add());
    }
    if (from.has_actvelocity()) {
      set_actvelocity(from.actvelocity());
    }
    if (from.has_setvelocity()) {
      set_setvelocity(from.setvelocity());
    }
    if (from.has_ctrl_dc_voltage()) {
      set_ctrl_dc_voltage(from.ctrl_dc_voltage());
    }
    if (from.has_ctrl_ipm_temperature()) {
      set_ctrl_ipm_temperature(from.ctrl_ipm_temperature());
    }
    if (from.has_actualpos()) {
      set_actualpos(from.actualpos());
    }
    if (from.has_emergencyinputvalue()) {
      set_emergencyinputvalue(from.emergencyinputvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_motec()) {
      mutable_motec()->::MotecDriverStat::MergeFrom(from.motec());
    }
    if (from.has_actcurrent()) {
      set_actcurrent(from.actcurrent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControllerMessage_Dirver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerMessage_Dirver::CopyFrom(const ControllerMessage_Dirver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerMessage_Dirver::IsInitialized() const {

  return true;
}

void ControllerMessage_Dirver::Swap(ControllerMessage_Dirver* other) {
  if (other != this) {
    std::swap(device_status_, other->device_status_);
    std::swap(device_add_, other->device_add_);
    std::swap(actvelocity_, other->actvelocity_);
    std::swap(setvelocity_, other->setvelocity_);
    std::swap(ctrl_dc_voltage_, other->ctrl_dc_voltage_);
    std::swap(ctrl_ipm_temperature_, other->ctrl_ipm_temperature_);
    std::swap(actualpos_, other->actualpos_);
    std::swap(emergencyinputvalue_, other->emergencyinputvalue_);
    std::swap(error_, other->error_);
    std::swap(motec_, other->motec_);
    std::swap(actcurrent_, other->actcurrent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControllerMessage_Dirver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerMessage_Dirver_descriptor_;
  metadata.reflection = ControllerMessage_Dirver_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ControllerMessage::kStatFieldNumber;
const int ControllerMessage::kDirverMessageFieldNumber;
const int ControllerMessage::kSensorMsgFieldNumber;
const int ControllerMessage::kCtrlDeviceFieldNumber;
const int ControllerMessage::kBmsMsgFieldNumber;
const int ControllerMessage::kErrormsgFieldNumber;
const int ControllerMessage::kAlarmmsgFieldNumber;
const int ControllerMessage::kUltrasoundFieldNumber;
const int ControllerMessage::kLineVelocityFieldNumber;
const int ControllerMessage::kTHVelocityFieldNumber;
const int ControllerMessage::kPh3AirFieldNumber;
#endif  // !_MSC_VER

ControllerMessage::ControllerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControllerMessage::InitAsDefaultInstance() {
  sensormsg_ = const_cast< ::ExternSensor*>(&::ExternSensor::default_instance());
  bmsmsg_ = const_cast< ::BmsMessage*>(&::BmsMessage::default_instance());
  errormsg_ = const_cast< ::ErrorMessage*>(&::ErrorMessage::default_instance());
  alarmmsg_ = const_cast< ::AlarmMessage*>(&::AlarmMessage::default_instance());
  ultrasound_ = const_cast< ::UltrasoundMessage*>(&::UltrasoundMessage::default_instance());
  ph3air_ = const_cast< ::ph3airmsg*>(&::ph3airmsg::default_instance());
}

ControllerMessage::ControllerMessage(const ControllerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControllerMessage::SharedCtor() {
  _cached_size_ = 0;
  stat_ = 0;
  sensormsg_ = NULL;
  ctrl_device_ = 0;
  bmsmsg_ = NULL;
  errormsg_ = NULL;
  alarmmsg_ = NULL;
  ultrasound_ = NULL;
  linevelocity_ = 0;
  thvelocity_ = 0;
  ph3air_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControllerMessage::~ControllerMessage() {
  SharedDtor();
}

void ControllerMessage::SharedDtor() {
  if (this != default_instance_) {
    delete sensormsg_;
    delete bmsmsg_;
    delete errormsg_;
    delete alarmmsg_;
    delete ultrasound_;
    delete ph3air_;
  }
}

void ControllerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerMessage_descriptor_;
}

const ControllerMessage& ControllerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ControllerMessage_2eproto();
  return *default_instance_;
}

ControllerMessage* ControllerMessage::default_instance_ = NULL;

ControllerMessage* ControllerMessage::New() const {
  return new ControllerMessage;
}

void ControllerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_ = 0;
    if (has_sensormsg()) {
      if (sensormsg_ != NULL) sensormsg_->::ExternSensor::Clear();
    }
    ctrl_device_ = 0;
    if (has_bmsmsg()) {
      if (bmsmsg_ != NULL) bmsmsg_->::BmsMessage::Clear();
    }
    if (has_errormsg()) {
      if (errormsg_ != NULL) errormsg_->::ErrorMessage::Clear();
    }
    if (has_alarmmsg()) {
      if (alarmmsg_ != NULL) alarmmsg_->::AlarmMessage::Clear();
    }
    if (has_ultrasound()) {
      if (ultrasound_ != NULL) ultrasound_->::UltrasoundMessage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    linevelocity_ = 0;
    thvelocity_ = 0;
    if (has_ph3air()) {
      if (ph3air_ != NULL) ph3air_->::ph3airmsg::Clear();
    }
  }
  dirvermessage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControllerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DirverMessage;
        break;
      }

      // repeated .ControllerMessage.Dirver DirverMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DirverMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dirvermessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DirverMessage;
        if (input->ExpectTag(26)) goto parse_SensorMsg;
        break;
      }

      // optional .ExternSensor SensorMsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SensorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensormsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ctrl_device;
        break;
      }

      // optional int32 ctrl_device = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctrl_device:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_device_)));
          set_has_ctrl_device();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bmsMsg;
        break;
      }

      // optional .BmsMessage bmsMsg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bmsMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bmsmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_errormsg;
        break;
      }

      // optional .ErrorMessage errormsg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errormsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errormsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_alarmmsg;
        break;
      }

      // optional .AlarmMessage alarmmsg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarmmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Ultrasound;
        break;
      }

      // optional .UltrasoundMessage Ultrasound = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ultrasound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ultrasound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_LineVelocity;
        break;
      }

      // optional float LineVelocity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_LineVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linevelocity_)));
          set_has_linevelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_THVelocity;
        break;
      }

      // optional float THVelocity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_THVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thvelocity_)));
          set_has_thvelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ph3air;
        break;
      }

      // optional .ph3airmsg ph3air = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ph3air:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ph3air()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControllerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Stat = 1;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stat(), output);
  }

  // repeated .ControllerMessage.Dirver DirverMessage = 2;
  for (int i = 0; i < this->dirvermessage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dirvermessage(i), output);
  }

  // optional .ExternSensor SensorMsg = 3;
  if (has_sensormsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sensormsg(), output);
  }

  // optional int32 ctrl_device = 4;
  if (has_ctrl_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ctrl_device(), output);
  }

  // optional .BmsMessage bmsMsg = 5;
  if (has_bmsmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bmsmsg(), output);
  }

  // optional .ErrorMessage errormsg = 6;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->errormsg(), output);
  }

  // optional .AlarmMessage alarmmsg = 7;
  if (has_alarmmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->alarmmsg(), output);
  }

  // optional .UltrasoundMessage Ultrasound = 8;
  if (has_ultrasound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ultrasound(), output);
  }

  // optional float LineVelocity = 9;
  if (has_linevelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->linevelocity(), output);
  }

  // optional float THVelocity = 10;
  if (has_thvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->thvelocity(), output);
  }

  // optional .ph3airmsg ph3air = 11;
  if (has_ph3air()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ph3air(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControllerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Stat = 1;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stat(), target);
  }

  // repeated .ControllerMessage.Dirver DirverMessage = 2;
  for (int i = 0; i < this->dirvermessage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dirvermessage(i), target);
  }

  // optional .ExternSensor SensorMsg = 3;
  if (has_sensormsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sensormsg(), target);
  }

  // optional int32 ctrl_device = 4;
  if (has_ctrl_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ctrl_device(), target);
  }

  // optional .BmsMessage bmsMsg = 5;
  if (has_bmsmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bmsmsg(), target);
  }

  // optional .ErrorMessage errormsg = 6;
  if (has_errormsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->errormsg(), target);
  }

  // optional .AlarmMessage alarmmsg = 7;
  if (has_alarmmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->alarmmsg(), target);
  }

  // optional .UltrasoundMessage Ultrasound = 8;
  if (has_ultrasound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ultrasound(), target);
  }

  // optional float LineVelocity = 9;
  if (has_linevelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->linevelocity(), target);
  }

  // optional float THVelocity = 10;
  if (has_thvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->thvelocity(), target);
  }

  // optional .ph3airmsg ph3air = 11;
  if (has_ph3air()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ph3air(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControllerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Stat = 1;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat());
    }

    // optional .ExternSensor SensorMsg = 3;
    if (has_sensormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensormsg());
    }

    // optional int32 ctrl_device = 4;
    if (has_ctrl_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrl_device());
    }

    // optional .BmsMessage bmsMsg = 5;
    if (has_bmsmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bmsmsg());
    }

    // optional .ErrorMessage errormsg = 6;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errormsg());
    }

    // optional .AlarmMessage alarmmsg = 7;
    if (has_alarmmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarmmsg());
    }

    // optional .UltrasoundMessage Ultrasound = 8;
    if (has_ultrasound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ultrasound());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float LineVelocity = 9;
    if (has_linevelocity()) {
      total_size += 1 + 4;
    }

    // optional float THVelocity = 10;
    if (has_thvelocity()) {
      total_size += 1 + 4;
    }

    // optional .ph3airmsg ph3air = 11;
    if (has_ph3air()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ph3air());
    }

  }
  // repeated .ControllerMessage.Dirver DirverMessage = 2;
  total_size += 1 * this->dirvermessage_size();
  for (int i = 0; i < this->dirvermessage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dirvermessage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControllerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControllerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerMessage::MergeFrom(const ControllerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  dirvermessage_.MergeFrom(from.dirvermessage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat()) {
      set_stat(from.stat());
    }
    if (from.has_sensormsg()) {
      mutable_sensormsg()->::ExternSensor::MergeFrom(from.sensormsg());
    }
    if (from.has_ctrl_device()) {
      set_ctrl_device(from.ctrl_device());
    }
    if (from.has_bmsmsg()) {
      mutable_bmsmsg()->::BmsMessage::MergeFrom(from.bmsmsg());
    }
    if (from.has_errormsg()) {
      mutable_errormsg()->::ErrorMessage::MergeFrom(from.errormsg());
    }
    if (from.has_alarmmsg()) {
      mutable_alarmmsg()->::AlarmMessage::MergeFrom(from.alarmmsg());
    }
    if (from.has_ultrasound()) {
      mutable_ultrasound()->::UltrasoundMessage::MergeFrom(from.ultrasound());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_linevelocity()) {
      set_linevelocity(from.linevelocity());
    }
    if (from.has_thvelocity()) {
      set_thvelocity(from.thvelocity());
    }
    if (from.has_ph3air()) {
      mutable_ph3air()->::ph3airmsg::MergeFrom(from.ph3air());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControllerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerMessage::CopyFrom(const ControllerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerMessage::IsInitialized() const {

  return true;
}

void ControllerMessage::Swap(ControllerMessage* other) {
  if (other != this) {
    std::swap(stat_, other->stat_);
    dirvermessage_.Swap(&other->dirvermessage_);
    std::swap(sensormsg_, other->sensormsg_);
    std::swap(ctrl_device_, other->ctrl_device_);
    std::swap(bmsmsg_, other->bmsmsg_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(alarmmsg_, other->alarmmsg_);
    std::swap(ultrasound_, other->ultrasound_);
    std::swap(linevelocity_, other->linevelocity_);
    std::swap(thvelocity_, other->thvelocity_);
    std::swap(ph3air_, other->ph3air_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControllerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerMessage_descriptor_;
  metadata.reflection = ControllerMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
