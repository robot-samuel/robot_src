// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErrorMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ErrorMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ErrorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ErrorMessage_2eproto() {
  protobuf_AddDesc_ErrorMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ErrorMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ErrorMessage_descriptor_ = file->message_type(0);
  static const int ErrorMessage_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, carleftfdrivererror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, carrightfdrivererror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, carleftbdrivererror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, carrightbdrivererror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, leftfdrivercomerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, rightfdrivercomerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, leftbdrivercomerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, rightbdrivercomerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, externcomdeverror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, bmssyserror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, obstaclestoperror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, cashswitchstoperror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, currentoverloaderror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, driverleftfnodeoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, driverleftbnodeoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, driverrightfnodeoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, driverrightbnodeoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, bobstaclestoperror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, dropstoperror_),
  };
  ErrorMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorMessage_descriptor_,
      ErrorMessage::default_instance_,
      ErrorMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ErrorMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorMessage_descriptor_, &ErrorMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ErrorMessage_2eproto() {
  delete ErrorMessage::default_instance_;
  delete ErrorMessage_reflection_;
}

void protobuf_AddDesc_ErrorMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ErrorMessage.proto\"\245\004\n\014ErrorMessage\022\033\n"
    "\023CarLeftFDriverError\030\001 \001(\010\022\034\n\024CarRightFD"
    "riverError\030\002 \001(\010\022\033\n\023CarLeftBDriverError\030"
    "\003 \001(\010\022\034\n\024CarRightBDriverError\030\004 \001(\010\022\033\n\023L"
    "eftFDriverComError\030\005 \001(\010\022\034\n\024RightFDriver"
    "ComError\030\006 \001(\010\022\033\n\023LeftBDriverComError\030\007 "
    "\001(\010\022\034\n\024RightBDriverComError\030\010 \001(\010\022\031\n\021Ext"
    "ernComDevError\030\t \001(\010\022\023\n\013BMSSysError\030\n \001("
    "\010\022\031\n\021ObstacleStopError\030\013 \001(\010\022\033\n\023CashSwit"
    "chStopError\030\014 \001(\010\022\034\n\024CurrentOverloadErro"
    "r\030\r \001(\010\022\032\n\022DriverLeftFNodeOFF\030\016 \001(\010\022\032\n\022D"
    "riverLeftBNodeOFF\030\017 \001(\010\022\033\n\023DriverRightFN"
    "odeOFF\030\020 \001(\010\022\033\n\023DriverRightBNodeOFF\030\021 \001("
    "\010\022\032\n\022BObstacleStopError\030\022 \001(\010\022\025\n\rDropSto"
    "pError\030\023 \001(\010", 572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ErrorMessage.proto", &protobuf_RegisterTypes);
  ErrorMessage::default_instance_ = new ErrorMessage();
  ErrorMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ErrorMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ErrorMessage_2eproto {
  StaticDescriptorInitializer_ErrorMessage_2eproto() {
    protobuf_AddDesc_ErrorMessage_2eproto();
  }
} static_descriptor_initializer_ErrorMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ErrorMessage::kCarLeftFDriverErrorFieldNumber;
const int ErrorMessage::kCarRightFDriverErrorFieldNumber;
const int ErrorMessage::kCarLeftBDriverErrorFieldNumber;
const int ErrorMessage::kCarRightBDriverErrorFieldNumber;
const int ErrorMessage::kLeftFDriverComErrorFieldNumber;
const int ErrorMessage::kRightFDriverComErrorFieldNumber;
const int ErrorMessage::kLeftBDriverComErrorFieldNumber;
const int ErrorMessage::kRightBDriverComErrorFieldNumber;
const int ErrorMessage::kExternComDevErrorFieldNumber;
const int ErrorMessage::kBMSSysErrorFieldNumber;
const int ErrorMessage::kObstacleStopErrorFieldNumber;
const int ErrorMessage::kCashSwitchStopErrorFieldNumber;
const int ErrorMessage::kCurrentOverloadErrorFieldNumber;
const int ErrorMessage::kDriverLeftFNodeOFFFieldNumber;
const int ErrorMessage::kDriverLeftBNodeOFFFieldNumber;
const int ErrorMessage::kDriverRightFNodeOFFFieldNumber;
const int ErrorMessage::kDriverRightBNodeOFFFieldNumber;
const int ErrorMessage::kBObstacleStopErrorFieldNumber;
const int ErrorMessage::kDropStopErrorFieldNumber;
#endif  // !_MSC_VER

ErrorMessage::ErrorMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrorMessage::InitAsDefaultInstance() {
}

ErrorMessage::ErrorMessage(const ErrorMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorMessage::SharedCtor() {
  _cached_size_ = 0;
  carleftfdrivererror_ = false;
  carrightfdrivererror_ = false;
  carleftbdrivererror_ = false;
  carrightbdrivererror_ = false;
  leftfdrivercomerror_ = false;
  rightfdrivercomerror_ = false;
  leftbdrivercomerror_ = false;
  rightbdrivercomerror_ = false;
  externcomdeverror_ = false;
  bmssyserror_ = false;
  obstaclestoperror_ = false;
  cashswitchstoperror_ = false;
  currentoverloaderror_ = false;
  driverleftfnodeoff_ = false;
  driverleftbnodeoff_ = false;
  driverrightfnodeoff_ = false;
  driverrightbnodeoff_ = false;
  bobstaclestoperror_ = false;
  dropstoperror_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorMessage::~ErrorMessage() {
  SharedDtor();
}

void ErrorMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ErrorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorMessage_descriptor_;
}

const ErrorMessage& ErrorMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ErrorMessage_2eproto();
  return *default_instance_;
}

ErrorMessage* ErrorMessage::default_instance_ = NULL;

ErrorMessage* ErrorMessage::New() const {
  return new ErrorMessage;
}

void ErrorMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    carleftfdrivererror_ = false;
    carrightfdrivererror_ = false;
    carleftbdrivererror_ = false;
    carrightbdrivererror_ = false;
    leftfdrivercomerror_ = false;
    rightfdrivercomerror_ = false;
    leftbdrivercomerror_ = false;
    rightbdrivercomerror_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    externcomdeverror_ = false;
    bmssyserror_ = false;
    obstaclestoperror_ = false;
    cashswitchstoperror_ = false;
    currentoverloaderror_ = false;
    driverleftfnodeoff_ = false;
    driverleftbnodeoff_ = false;
    driverrightfnodeoff_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    driverrightbnodeoff_ = false;
    bobstaclestoperror_ = false;
    dropstoperror_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool CarLeftFDriverError = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &carleftfdrivererror_)));
          set_has_carleftfdrivererror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CarRightFDriverError;
        break;
      }

      // optional bool CarRightFDriverError = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CarRightFDriverError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &carrightfdrivererror_)));
          set_has_carrightfdrivererror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CarLeftBDriverError;
        break;
      }

      // optional bool CarLeftBDriverError = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CarLeftBDriverError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &carleftbdrivererror_)));
          set_has_carleftbdrivererror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CarRightBDriverError;
        break;
      }

      // optional bool CarRightBDriverError = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CarRightBDriverError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &carrightbdrivererror_)));
          set_has_carrightbdrivererror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LeftFDriverComError;
        break;
      }

      // optional bool LeftFDriverComError = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftFDriverComError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leftfdrivercomerror_)));
          set_has_leftfdrivercomerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RightFDriverComError;
        break;
      }

      // optional bool RightFDriverComError = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RightFDriverComError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rightfdrivercomerror_)));
          set_has_rightfdrivercomerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LeftBDriverComError;
        break;
      }

      // optional bool LeftBDriverComError = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftBDriverComError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leftbdrivercomerror_)));
          set_has_leftbdrivercomerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_RightBDriverComError;
        break;
      }

      // optional bool RightBDriverComError = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RightBDriverComError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rightbdrivercomerror_)));
          set_has_rightbdrivercomerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ExternComDevError;
        break;
      }

      // optional bool ExternComDevError = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExternComDevError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &externcomdeverror_)));
          set_has_externcomdeverror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BMSSysError;
        break;
      }

      // optional bool BMSSysError = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMSSysError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmssyserror_)));
          set_has_bmssyserror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ObstacleStopError;
        break;
      }

      // optional bool ObstacleStopError = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObstacleStopError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obstaclestoperror_)));
          set_has_obstaclestoperror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CashSwitchStopError;
        break;
      }

      // optional bool CashSwitchStopError = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CashSwitchStopError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cashswitchstoperror_)));
          set_has_cashswitchstoperror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CurrentOverloadError;
        break;
      }

      // optional bool CurrentOverloadError = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrentOverloadError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &currentoverloaderror_)));
          set_has_currentoverloaderror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_DriverLeftFNodeOFF;
        break;
      }

      // optional bool DriverLeftFNodeOFF = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DriverLeftFNodeOFF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driverleftfnodeoff_)));
          set_has_driverleftfnodeoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_DriverLeftBNodeOFF;
        break;
      }

      // optional bool DriverLeftBNodeOFF = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DriverLeftBNodeOFF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driverleftbnodeoff_)));
          set_has_driverleftbnodeoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_DriverRightFNodeOFF;
        break;
      }

      // optional bool DriverRightFNodeOFF = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DriverRightFNodeOFF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driverrightfnodeoff_)));
          set_has_driverrightfnodeoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_DriverRightBNodeOFF;
        break;
      }

      // optional bool DriverRightBNodeOFF = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DriverRightBNodeOFF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driverrightbnodeoff_)));
          set_has_driverrightbnodeoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_BObstacleStopError;
        break;
      }

      // optional bool BObstacleStopError = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BObstacleStopError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bobstaclestoperror_)));
          set_has_bobstaclestoperror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_DropStopError;
        break;
      }

      // optional bool DropStopError = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DropStopError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dropstoperror_)));
          set_has_dropstoperror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool CarLeftFDriverError = 1;
  if (has_carleftfdrivererror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->carleftfdrivererror(), output);
  }

  // optional bool CarRightFDriverError = 2;
  if (has_carrightfdrivererror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->carrightfdrivererror(), output);
  }

  // optional bool CarLeftBDriverError = 3;
  if (has_carleftbdrivererror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->carleftbdrivererror(), output);
  }

  // optional bool CarRightBDriverError = 4;
  if (has_carrightbdrivererror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->carrightbdrivererror(), output);
  }

  // optional bool LeftFDriverComError = 5;
  if (has_leftfdrivercomerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->leftfdrivercomerror(), output);
  }

  // optional bool RightFDriverComError = 6;
  if (has_rightfdrivercomerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->rightfdrivercomerror(), output);
  }

  // optional bool LeftBDriverComError = 7;
  if (has_leftbdrivercomerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->leftbdrivercomerror(), output);
  }

  // optional bool RightBDriverComError = 8;
  if (has_rightbdrivercomerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->rightbdrivercomerror(), output);
  }

  // optional bool ExternComDevError = 9;
  if (has_externcomdeverror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->externcomdeverror(), output);
  }

  // optional bool BMSSysError = 10;
  if (has_bmssyserror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bmssyserror(), output);
  }

  // optional bool ObstacleStopError = 11;
  if (has_obstaclestoperror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->obstaclestoperror(), output);
  }

  // optional bool CashSwitchStopError = 12;
  if (has_cashswitchstoperror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->cashswitchstoperror(), output);
  }

  // optional bool CurrentOverloadError = 13;
  if (has_currentoverloaderror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->currentoverloaderror(), output);
  }

  // optional bool DriverLeftFNodeOFF = 14;
  if (has_driverleftfnodeoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->driverleftfnodeoff(), output);
  }

  // optional bool DriverLeftBNodeOFF = 15;
  if (has_driverleftbnodeoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->driverleftbnodeoff(), output);
  }

  // optional bool DriverRightFNodeOFF = 16;
  if (has_driverrightfnodeoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->driverrightfnodeoff(), output);
  }

  // optional bool DriverRightBNodeOFF = 17;
  if (has_driverrightbnodeoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->driverrightbnodeoff(), output);
  }

  // optional bool BObstacleStopError = 18;
  if (has_bobstaclestoperror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bobstaclestoperror(), output);
  }

  // optional bool DropStopError = 19;
  if (has_dropstoperror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->dropstoperror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrorMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool CarLeftFDriverError = 1;
  if (has_carleftfdrivererror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->carleftfdrivererror(), target);
  }

  // optional bool CarRightFDriverError = 2;
  if (has_carrightfdrivererror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->carrightfdrivererror(), target);
  }

  // optional bool CarLeftBDriverError = 3;
  if (has_carleftbdrivererror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->carleftbdrivererror(), target);
  }

  // optional bool CarRightBDriverError = 4;
  if (has_carrightbdrivererror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->carrightbdrivererror(), target);
  }

  // optional bool LeftFDriverComError = 5;
  if (has_leftfdrivercomerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->leftfdrivercomerror(), target);
  }

  // optional bool RightFDriverComError = 6;
  if (has_rightfdrivercomerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->rightfdrivercomerror(), target);
  }

  // optional bool LeftBDriverComError = 7;
  if (has_leftbdrivercomerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->leftbdrivercomerror(), target);
  }

  // optional bool RightBDriverComError = 8;
  if (has_rightbdrivercomerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->rightbdrivercomerror(), target);
  }

  // optional bool ExternComDevError = 9;
  if (has_externcomdeverror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->externcomdeverror(), target);
  }

  // optional bool BMSSysError = 10;
  if (has_bmssyserror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bmssyserror(), target);
  }

  // optional bool ObstacleStopError = 11;
  if (has_obstaclestoperror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->obstaclestoperror(), target);
  }

  // optional bool CashSwitchStopError = 12;
  if (has_cashswitchstoperror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->cashswitchstoperror(), target);
  }

  // optional bool CurrentOverloadError = 13;
  if (has_currentoverloaderror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->currentoverloaderror(), target);
  }

  // optional bool DriverLeftFNodeOFF = 14;
  if (has_driverleftfnodeoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->driverleftfnodeoff(), target);
  }

  // optional bool DriverLeftBNodeOFF = 15;
  if (has_driverleftbnodeoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->driverleftbnodeoff(), target);
  }

  // optional bool DriverRightFNodeOFF = 16;
  if (has_driverrightfnodeoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->driverrightfnodeoff(), target);
  }

  // optional bool DriverRightBNodeOFF = 17;
  if (has_driverrightbnodeoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->driverrightbnodeoff(), target);
  }

  // optional bool BObstacleStopError = 18;
  if (has_bobstaclestoperror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bobstaclestoperror(), target);
  }

  // optional bool DropStopError = 19;
  if (has_dropstoperror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->dropstoperror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrorMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool CarLeftFDriverError = 1;
    if (has_carleftfdrivererror()) {
      total_size += 1 + 1;
    }

    // optional bool CarRightFDriverError = 2;
    if (has_carrightfdrivererror()) {
      total_size += 1 + 1;
    }

    // optional bool CarLeftBDriverError = 3;
    if (has_carleftbdrivererror()) {
      total_size += 1 + 1;
    }

    // optional bool CarRightBDriverError = 4;
    if (has_carrightbdrivererror()) {
      total_size += 1 + 1;
    }

    // optional bool LeftFDriverComError = 5;
    if (has_leftfdrivercomerror()) {
      total_size += 1 + 1;
    }

    // optional bool RightFDriverComError = 6;
    if (has_rightfdrivercomerror()) {
      total_size += 1 + 1;
    }

    // optional bool LeftBDriverComError = 7;
    if (has_leftbdrivercomerror()) {
      total_size += 1 + 1;
    }

    // optional bool RightBDriverComError = 8;
    if (has_rightbdrivercomerror()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ExternComDevError = 9;
    if (has_externcomdeverror()) {
      total_size += 1 + 1;
    }

    // optional bool BMSSysError = 10;
    if (has_bmssyserror()) {
      total_size += 1 + 1;
    }

    // optional bool ObstacleStopError = 11;
    if (has_obstaclestoperror()) {
      total_size += 1 + 1;
    }

    // optional bool CashSwitchStopError = 12;
    if (has_cashswitchstoperror()) {
      total_size += 1 + 1;
    }

    // optional bool CurrentOverloadError = 13;
    if (has_currentoverloaderror()) {
      total_size += 1 + 1;
    }

    // optional bool DriverLeftFNodeOFF = 14;
    if (has_driverleftfnodeoff()) {
      total_size += 1 + 1;
    }

    // optional bool DriverLeftBNodeOFF = 15;
    if (has_driverleftbnodeoff()) {
      total_size += 1 + 1;
    }

    // optional bool DriverRightFNodeOFF = 16;
    if (has_driverrightfnodeoff()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool DriverRightBNodeOFF = 17;
    if (has_driverrightbnodeoff()) {
      total_size += 2 + 1;
    }

    // optional bool BObstacleStopError = 18;
    if (has_bobstaclestoperror()) {
      total_size += 2 + 1;
    }

    // optional bool DropStopError = 19;
    if (has_dropstoperror()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorMessage::MergeFrom(const ErrorMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carleftfdrivererror()) {
      set_carleftfdrivererror(from.carleftfdrivererror());
    }
    if (from.has_carrightfdrivererror()) {
      set_carrightfdrivererror(from.carrightfdrivererror());
    }
    if (from.has_carleftbdrivererror()) {
      set_carleftbdrivererror(from.carleftbdrivererror());
    }
    if (from.has_carrightbdrivererror()) {
      set_carrightbdrivererror(from.carrightbdrivererror());
    }
    if (from.has_leftfdrivercomerror()) {
      set_leftfdrivercomerror(from.leftfdrivercomerror());
    }
    if (from.has_rightfdrivercomerror()) {
      set_rightfdrivercomerror(from.rightfdrivercomerror());
    }
    if (from.has_leftbdrivercomerror()) {
      set_leftbdrivercomerror(from.leftbdrivercomerror());
    }
    if (from.has_rightbdrivercomerror()) {
      set_rightbdrivercomerror(from.rightbdrivercomerror());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_externcomdeverror()) {
      set_externcomdeverror(from.externcomdeverror());
    }
    if (from.has_bmssyserror()) {
      set_bmssyserror(from.bmssyserror());
    }
    if (from.has_obstaclestoperror()) {
      set_obstaclestoperror(from.obstaclestoperror());
    }
    if (from.has_cashswitchstoperror()) {
      set_cashswitchstoperror(from.cashswitchstoperror());
    }
    if (from.has_currentoverloaderror()) {
      set_currentoverloaderror(from.currentoverloaderror());
    }
    if (from.has_driverleftfnodeoff()) {
      set_driverleftfnodeoff(from.driverleftfnodeoff());
    }
    if (from.has_driverleftbnodeoff()) {
      set_driverleftbnodeoff(from.driverleftbnodeoff());
    }
    if (from.has_driverrightfnodeoff()) {
      set_driverrightfnodeoff(from.driverrightfnodeoff());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_driverrightbnodeoff()) {
      set_driverrightbnodeoff(from.driverrightbnodeoff());
    }
    if (from.has_bobstaclestoperror()) {
      set_bobstaclestoperror(from.bobstaclestoperror());
    }
    if (from.has_dropstoperror()) {
      set_dropstoperror(from.dropstoperror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorMessage::CopyFrom(const ErrorMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMessage::IsInitialized() const {

  return true;
}

void ErrorMessage::Swap(ErrorMessage* other) {
  if (other != this) {
    std::swap(carleftfdrivererror_, other->carleftfdrivererror_);
    std::swap(carrightfdrivererror_, other->carrightfdrivererror_);
    std::swap(carleftbdrivererror_, other->carleftbdrivererror_);
    std::swap(carrightbdrivererror_, other->carrightbdrivererror_);
    std::swap(leftfdrivercomerror_, other->leftfdrivercomerror_);
    std::swap(rightfdrivercomerror_, other->rightfdrivercomerror_);
    std::swap(leftbdrivercomerror_, other->leftbdrivercomerror_);
    std::swap(rightbdrivercomerror_, other->rightbdrivercomerror_);
    std::swap(externcomdeverror_, other->externcomdeverror_);
    std::swap(bmssyserror_, other->bmssyserror_);
    std::swap(obstaclestoperror_, other->obstaclestoperror_);
    std::swap(cashswitchstoperror_, other->cashswitchstoperror_);
    std::swap(currentoverloaderror_, other->currentoverloaderror_);
    std::swap(driverleftfnodeoff_, other->driverleftfnodeoff_);
    std::swap(driverleftbnodeoff_, other->driverleftbnodeoff_);
    std::swap(driverrightfnodeoff_, other->driverrightfnodeoff_);
    std::swap(driverrightbnodeoff_, other->driverrightbnodeoff_);
    std::swap(bobstaclestoperror_, other->bobstaclestoperror_);
    std::swap(dropstoperror_, other->dropstoperror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorMessage_descriptor_;
  metadata.reflection = ErrorMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
