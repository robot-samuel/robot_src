// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeatherMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WeatherMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WeatherMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeatherMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeatherMessage_Gps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeatherMessage_Gps_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeatherMessage_Mode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeatherMessage_Mode_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeatherMessage_Date_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeatherMessage_Date_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WeatherMessage_2eproto() {
  protobuf_AddDesc_WeatherMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WeatherMessage.proto");
  GOOGLE_CHECK(file != NULL);
  WeatherMessage_descriptor_ = file->message_type(0);
  static const int WeatherMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, gpsmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, humi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, rain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, atmpressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, modemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, winddirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, datemessage_),
  };
  WeatherMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeatherMessage_descriptor_,
      WeatherMessage::default_instance_,
      WeatherMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeatherMessage));
  WeatherMessage_Gps_descriptor_ = WeatherMessage_descriptor_->nested_type(0);
  static const int WeatherMessage_Gps_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Gps, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Gps, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Gps, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Gps, nosv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Gps, fs_),
  };
  WeatherMessage_Gps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeatherMessage_Gps_descriptor_,
      WeatherMessage_Gps::default_instance_,
      WeatherMessage_Gps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Gps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Gps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeatherMessage_Gps));
  WeatherMessage_Mode_descriptor_ = WeatherMessage_descriptor_->nested_type(1);
  static const int WeatherMessage_Mode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Mode, workmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Mode, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Mode, errorcode_),
  };
  WeatherMessage_Mode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeatherMessage_Mode_descriptor_,
      WeatherMessage_Mode::default_instance_,
      WeatherMessage_Mode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Mode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Mode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeatherMessage_Mode));
  WeatherMessage_Date_descriptor_ = WeatherMessage_descriptor_->nested_type(2);
  static const int WeatherMessage_Date_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Date, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Date, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Date, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Date, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Date, miunte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Date, second_),
  };
  WeatherMessage_Date_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeatherMessage_Date_descriptor_,
      WeatherMessage_Date::default_instance_,
      WeatherMessage_Date_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Date, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_Date, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeatherMessage_Date));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WeatherMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeatherMessage_descriptor_, &WeatherMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeatherMessage_Gps_descriptor_, &WeatherMessage_Gps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeatherMessage_Mode_descriptor_, &WeatherMessage_Mode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeatherMessage_Date_descriptor_, &WeatherMessage_Date::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WeatherMessage_2eproto() {
  delete WeatherMessage::default_instance_;
  delete WeatherMessage_reflection_;
  delete WeatherMessage_Gps::default_instance_;
  delete WeatherMessage_Gps_reflection_;
  delete WeatherMessage_Mode::default_instance_;
  delete WeatherMessage_Mode_reflection_;
  delete WeatherMessage_Date::default_instance_;
  delete WeatherMessage_Date_reflection_;
}

void protobuf_AddDesc_WeatherMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024WeatherMessage.proto\"\362\003\n\016WeatherMessag"
    "e\022\'\n\nGpsMessage\030\001 \001(\0132\023.WeatherMessage.G"
    "ps\022\014\n\004Temp\030\002 \001(\002\022\014\n\004Humi\030\003 \001(\002\022\r\n\005Speed\030"
    "\004 \001(\002\022\014\n\004Rain\030\005 \001(\002\022\023\n\013AtmPressure\030\006 \001(\002"
    "\022)\n\013ModeMessage\030\007 \001(\0132\024.WeatherMessage.M"
    "ode\022\025\n\rWindDirection\030\010 \001(\002\022)\n\013DateMessag"
    "e\030\t \001(\0132\024.WeatherMessage.Date\032a\n\003Gps\022&\n\010"
    "DateTime\030\001 \001(\0132\024.WeatherMessage.Date\022\013\n\003"
    "Lat\030\002 \001(\t\022\013\n\003Lon\030\003 \001(\t\022\014\n\004Nosv\030\004 \001(\003\022\n\n\002"
    "Fs\030\005 \001(\003\0329\n\004Mode\022\020\n\010WorkMode\030\001 \001(\003\022\014\n\004Ra"
    "te\030\002 \001(\003\022\021\n\tErrorCode\030\003 \001(\003\032^\n\004Date\022\014\n\004Y"
    "ear\030\001 \001(\005\022\r\n\005Month\030\002 \001(\005\022\013\n\003Day\030\003 \001(\005\022\014\n"
    "\004Hour\030\004 \001(\005\022\016\n\006Miunte\030\005 \001(\005\022\016\n\006Second\030\006 "
    "\001(\005", 523);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WeatherMessage.proto", &protobuf_RegisterTypes);
  WeatherMessage::default_instance_ = new WeatherMessage();
  WeatherMessage_Gps::default_instance_ = new WeatherMessage_Gps();
  WeatherMessage_Mode::default_instance_ = new WeatherMessage_Mode();
  WeatherMessage_Date::default_instance_ = new WeatherMessage_Date();
  WeatherMessage::default_instance_->InitAsDefaultInstance();
  WeatherMessage_Gps::default_instance_->InitAsDefaultInstance();
  WeatherMessage_Mode::default_instance_->InitAsDefaultInstance();
  WeatherMessage_Date::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WeatherMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WeatherMessage_2eproto {
  StaticDescriptorInitializer_WeatherMessage_2eproto() {
    protobuf_AddDesc_WeatherMessage_2eproto();
  }
} static_descriptor_initializer_WeatherMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WeatherMessage_Gps::kDateTimeFieldNumber;
const int WeatherMessage_Gps::kLatFieldNumber;
const int WeatherMessage_Gps::kLonFieldNumber;
const int WeatherMessage_Gps::kNosvFieldNumber;
const int WeatherMessage_Gps::kFsFieldNumber;
#endif  // !_MSC_VER

WeatherMessage_Gps::WeatherMessage_Gps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeatherMessage_Gps::InitAsDefaultInstance() {
  datetime_ = const_cast< ::WeatherMessage_Date*>(&::WeatherMessage_Date::default_instance());
}

WeatherMessage_Gps::WeatherMessage_Gps(const WeatherMessage_Gps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeatherMessage_Gps::SharedCtor() {
  _cached_size_ = 0;
  datetime_ = NULL;
  lat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nosv_ = GOOGLE_LONGLONG(0);
  fs_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeatherMessage_Gps::~WeatherMessage_Gps() {
  SharedDtor();
}

void WeatherMessage_Gps::SharedDtor() {
  if (lat_ != &::google::protobuf::internal::kEmptyString) {
    delete lat_;
  }
  if (lon_ != &::google::protobuf::internal::kEmptyString) {
    delete lon_;
  }
  if (this != default_instance_) {
    delete datetime_;
  }
}

void WeatherMessage_Gps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherMessage_Gps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeatherMessage_Gps_descriptor_;
}

const WeatherMessage_Gps& WeatherMessage_Gps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeatherMessage_2eproto();
  return *default_instance_;
}

WeatherMessage_Gps* WeatherMessage_Gps::default_instance_ = NULL;

WeatherMessage_Gps* WeatherMessage_Gps::New() const {
  return new WeatherMessage_Gps;
}

void WeatherMessage_Gps::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_datetime()) {
      if (datetime_ != NULL) datetime_->::WeatherMessage_Date::Clear();
    }
    if (has_lat()) {
      if (lat_ != &::google::protobuf::internal::kEmptyString) {
        lat_->clear();
      }
    }
    if (has_lon()) {
      if (lon_ != &::google::protobuf::internal::kEmptyString) {
        lon_->clear();
      }
    }
    nosv_ = GOOGLE_LONGLONG(0);
    fs_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeatherMessage_Gps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WeatherMessage.Date DateTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Lat;
        break;
      }

      // optional string Lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lat().data(), this->lat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Lon;
        break;
      }

      // optional string Lon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lon().data(), this->lon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Nosv;
        break;
      }

      // optional int64 Nosv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Nosv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nosv_)));
          set_has_nosv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Fs;
        break;
      }

      // optional int64 Fs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeatherMessage_Gps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .WeatherMessage.Date DateTime = 1;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datetime(), output);
  }

  // optional string Lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lat().data(), this->lat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lat(), output);
  }

  // optional string Lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lon().data(), this->lon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lon(), output);
  }

  // optional int64 Nosv = 4;
  if (has_nosv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->nosv(), output);
  }

  // optional int64 Fs = 5;
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->fs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeatherMessage_Gps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .WeatherMessage.Date DateTime = 1;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datetime(), target);
  }

  // optional string Lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lat().data(), this->lat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lat(), target);
  }

  // optional string Lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lon().data(), this->lon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lon(), target);
  }

  // optional int64 Nosv = 4;
  if (has_nosv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->nosv(), target);
  }

  // optional int64 Fs = 5;
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->fs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeatherMessage_Gps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .WeatherMessage.Date DateTime = 1;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datetime());
    }

    // optional string Lat = 2;
    if (has_lat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lat());
    }

    // optional string Lon = 3;
    if (has_lon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lon());
    }

    // optional int64 Nosv = 4;
    if (has_nosv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nosv());
    }

    // optional int64 Fs = 5;
    if (has_fs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherMessage_Gps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeatherMessage_Gps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeatherMessage_Gps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeatherMessage_Gps::MergeFrom(const WeatherMessage_Gps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datetime()) {
      mutable_datetime()->::WeatherMessage_Date::MergeFrom(from.datetime());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_nosv()) {
      set_nosv(from.nosv());
    }
    if (from.has_fs()) {
      set_fs(from.fs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeatherMessage_Gps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherMessage_Gps::CopyFrom(const WeatherMessage_Gps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherMessage_Gps::IsInitialized() const {

  return true;
}

void WeatherMessage_Gps::Swap(WeatherMessage_Gps* other) {
  if (other != this) {
    std::swap(datetime_, other->datetime_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(nosv_, other->nosv_);
    std::swap(fs_, other->fs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeatherMessage_Gps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeatherMessage_Gps_descriptor_;
  metadata.reflection = WeatherMessage_Gps_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WeatherMessage_Mode::kWorkModeFieldNumber;
const int WeatherMessage_Mode::kRateFieldNumber;
const int WeatherMessage_Mode::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

WeatherMessage_Mode::WeatherMessage_Mode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeatherMessage_Mode::InitAsDefaultInstance() {
}

WeatherMessage_Mode::WeatherMessage_Mode(const WeatherMessage_Mode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeatherMessage_Mode::SharedCtor() {
  _cached_size_ = 0;
  workmode_ = GOOGLE_LONGLONG(0);
  rate_ = GOOGLE_LONGLONG(0);
  errorcode_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeatherMessage_Mode::~WeatherMessage_Mode() {
  SharedDtor();
}

void WeatherMessage_Mode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeatherMessage_Mode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherMessage_Mode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeatherMessage_Mode_descriptor_;
}

const WeatherMessage_Mode& WeatherMessage_Mode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeatherMessage_2eproto();
  return *default_instance_;
}

WeatherMessage_Mode* WeatherMessage_Mode::default_instance_ = NULL;

WeatherMessage_Mode* WeatherMessage_Mode::New() const {
  return new WeatherMessage_Mode;
}

void WeatherMessage_Mode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    workmode_ = GOOGLE_LONGLONG(0);
    rate_ = GOOGLE_LONGLONG(0);
    errorcode_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeatherMessage_Mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 WorkMode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &workmode_)));
          set_has_workmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Rate;
        break;
      }

      // optional int64 Rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ErrorCode;
        break;
      }

      // optional int64 ErrorCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeatherMessage_Mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 WorkMode = 1;
  if (has_workmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->workmode(), output);
  }

  // optional int64 Rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rate(), output);
  }

  // optional int64 ErrorCode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeatherMessage_Mode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 WorkMode = 1;
  if (has_workmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->workmode(), target);
  }

  // optional int64 Rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rate(), target);
  }

  // optional int64 ErrorCode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeatherMessage_Mode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 WorkMode = 1;
    if (has_workmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->workmode());
    }

    // optional int64 Rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rate());
    }

    // optional int64 ErrorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherMessage_Mode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeatherMessage_Mode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeatherMessage_Mode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeatherMessage_Mode::MergeFrom(const WeatherMessage_Mode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workmode()) {
      set_workmode(from.workmode());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeatherMessage_Mode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherMessage_Mode::CopyFrom(const WeatherMessage_Mode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherMessage_Mode::IsInitialized() const {

  return true;
}

void WeatherMessage_Mode::Swap(WeatherMessage_Mode* other) {
  if (other != this) {
    std::swap(workmode_, other->workmode_);
    std::swap(rate_, other->rate_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeatherMessage_Mode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeatherMessage_Mode_descriptor_;
  metadata.reflection = WeatherMessage_Mode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WeatherMessage_Date::kYearFieldNumber;
const int WeatherMessage_Date::kMonthFieldNumber;
const int WeatherMessage_Date::kDayFieldNumber;
const int WeatherMessage_Date::kHourFieldNumber;
const int WeatherMessage_Date::kMiunteFieldNumber;
const int WeatherMessage_Date::kSecondFieldNumber;
#endif  // !_MSC_VER

WeatherMessage_Date::WeatherMessage_Date()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeatherMessage_Date::InitAsDefaultInstance() {
}

WeatherMessage_Date::WeatherMessage_Date(const WeatherMessage_Date& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeatherMessage_Date::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0;
  month_ = 0;
  day_ = 0;
  hour_ = 0;
  miunte_ = 0;
  second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeatherMessage_Date::~WeatherMessage_Date() {
  SharedDtor();
}

void WeatherMessage_Date::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeatherMessage_Date::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherMessage_Date::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeatherMessage_Date_descriptor_;
}

const WeatherMessage_Date& WeatherMessage_Date::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeatherMessage_2eproto();
  return *default_instance_;
}

WeatherMessage_Date* WeatherMessage_Date::default_instance_ = NULL;

WeatherMessage_Date* WeatherMessage_Date::New() const {
  return new WeatherMessage_Date;
}

void WeatherMessage_Date::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    year_ = 0;
    month_ = 0;
    day_ = 0;
    hour_ = 0;
    miunte_ = 0;
    second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeatherMessage_Date::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Year = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Month;
        break;
      }

      // optional int32 Month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Day;
        break;
      }

      // optional int32 Day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Hour;
        break;
      }

      // optional int32 Hour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Miunte;
        break;
      }

      // optional int32 Miunte = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Miunte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &miunte_)));
          set_has_miunte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Second;
        break;
      }

      // optional int32 Second = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeatherMessage_Date::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // optional int32 Month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // optional int32 Day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // optional int32 Hour = 4;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hour(), output);
  }

  // optional int32 Miunte = 5;
  if (has_miunte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->miunte(), output);
  }

  // optional int32 Second = 6;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeatherMessage_Date::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Year = 1;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // optional int32 Month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // optional int32 Day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // optional int32 Hour = 4;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hour(), target);
  }

  // optional int32 Miunte = 5;
  if (has_miunte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->miunte(), target);
  }

  // optional int32 Second = 6;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeatherMessage_Date::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 Month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 Day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 Hour = 4;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hour());
    }

    // optional int32 Miunte = 5;
    if (has_miunte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->miunte());
    }

    // optional int32 Second = 6;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherMessage_Date::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeatherMessage_Date* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeatherMessage_Date*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeatherMessage_Date::MergeFrom(const WeatherMessage_Date& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_miunte()) {
      set_miunte(from.miunte());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeatherMessage_Date::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherMessage_Date::CopyFrom(const WeatherMessage_Date& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherMessage_Date::IsInitialized() const {

  return true;
}

void WeatherMessage_Date::Swap(WeatherMessage_Date* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(miunte_, other->miunte_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeatherMessage_Date::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeatherMessage_Date_descriptor_;
  metadata.reflection = WeatherMessage_Date_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WeatherMessage::kGpsMessageFieldNumber;
const int WeatherMessage::kTempFieldNumber;
const int WeatherMessage::kHumiFieldNumber;
const int WeatherMessage::kSpeedFieldNumber;
const int WeatherMessage::kRainFieldNumber;
const int WeatherMessage::kAtmPressureFieldNumber;
const int WeatherMessage::kModeMessageFieldNumber;
const int WeatherMessage::kWindDirectionFieldNumber;
const int WeatherMessage::kDateMessageFieldNumber;
#endif  // !_MSC_VER

WeatherMessage::WeatherMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeatherMessage::InitAsDefaultInstance() {
  gpsmessage_ = const_cast< ::WeatherMessage_Gps*>(&::WeatherMessage_Gps::default_instance());
  modemessage_ = const_cast< ::WeatherMessage_Mode*>(&::WeatherMessage_Mode::default_instance());
  datemessage_ = const_cast< ::WeatherMessage_Date*>(&::WeatherMessage_Date::default_instance());
}

WeatherMessage::WeatherMessage(const WeatherMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeatherMessage::SharedCtor() {
  _cached_size_ = 0;
  gpsmessage_ = NULL;
  temp_ = 0;
  humi_ = 0;
  speed_ = 0;
  rain_ = 0;
  atmpressure_ = 0;
  modemessage_ = NULL;
  winddirection_ = 0;
  datemessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeatherMessage::~WeatherMessage() {
  SharedDtor();
}

void WeatherMessage::SharedDtor() {
  if (this != default_instance_) {
    delete gpsmessage_;
    delete modemessage_;
    delete datemessage_;
  }
}

void WeatherMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeatherMessage_descriptor_;
}

const WeatherMessage& WeatherMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeatherMessage_2eproto();
  return *default_instance_;
}

WeatherMessage* WeatherMessage::default_instance_ = NULL;

WeatherMessage* WeatherMessage::New() const {
  return new WeatherMessage;
}

void WeatherMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gpsmessage()) {
      if (gpsmessage_ != NULL) gpsmessage_->::WeatherMessage_Gps::Clear();
    }
    temp_ = 0;
    humi_ = 0;
    speed_ = 0;
    rain_ = 0;
    atmpressure_ = 0;
    if (has_modemessage()) {
      if (modemessage_ != NULL) modemessage_->::WeatherMessage_Mode::Clear();
    }
    winddirection_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_datemessage()) {
      if (datemessage_ != NULL) datemessage_->::WeatherMessage_Date::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeatherMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WeatherMessage.Gps GpsMessage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpsmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Temp;
        break;
      }

      // optional float Temp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Humi;
        break;
      }

      // optional float Humi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Humi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &humi_)));
          set_has_humi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Speed;
        break;
      }

      // optional float Speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Rain;
        break;
      }

      // optional float Rain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Rain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rain_)));
          set_has_rain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_AtmPressure;
        break;
      }

      // optional float AtmPressure = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AtmPressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &atmpressure_)));
          set_has_atmpressure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ModeMessage;
        break;
      }

      // optional .WeatherMessage.Mode ModeMessage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModeMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_WindDirection;
        break;
      }

      // optional float WindDirection = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_WindDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winddirection_)));
          set_has_winddirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_DateMessage;
        break;
      }

      // optional .WeatherMessage.Date DateMessage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DateMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeatherMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .WeatherMessage.Gps GpsMessage = 1;
  if (has_gpsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gpsmessage(), output);
  }

  // optional float Temp = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->temp(), output);
  }

  // optional float Humi = 3;
  if (has_humi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->humi(), output);
  }

  // optional float Speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // optional float Rain = 5;
  if (has_rain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rain(), output);
  }

  // optional float AtmPressure = 6;
  if (has_atmpressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->atmpressure(), output);
  }

  // optional .WeatherMessage.Mode ModeMessage = 7;
  if (has_modemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->modemessage(), output);
  }

  // optional float WindDirection = 8;
  if (has_winddirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->winddirection(), output);
  }

  // optional .WeatherMessage.Date DateMessage = 9;
  if (has_datemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->datemessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeatherMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .WeatherMessage.Gps GpsMessage = 1;
  if (has_gpsmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gpsmessage(), target);
  }

  // optional float Temp = 2;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->temp(), target);
  }

  // optional float Humi = 3;
  if (has_humi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->humi(), target);
  }

  // optional float Speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  // optional float Rain = 5;
  if (has_rain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rain(), target);
  }

  // optional float AtmPressure = 6;
  if (has_atmpressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->atmpressure(), target);
  }

  // optional .WeatherMessage.Mode ModeMessage = 7;
  if (has_modemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->modemessage(), target);
  }

  // optional float WindDirection = 8;
  if (has_winddirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->winddirection(), target);
  }

  // optional .WeatherMessage.Date DateMessage = 9;
  if (has_datemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->datemessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeatherMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .WeatherMessage.Gps GpsMessage = 1;
    if (has_gpsmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpsmessage());
    }

    // optional float Temp = 2;
    if (has_temp()) {
      total_size += 1 + 4;
    }

    // optional float Humi = 3;
    if (has_humi()) {
      total_size += 1 + 4;
    }

    // optional float Speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional float Rain = 5;
    if (has_rain()) {
      total_size += 1 + 4;
    }

    // optional float AtmPressure = 6;
    if (has_atmpressure()) {
      total_size += 1 + 4;
    }

    // optional .WeatherMessage.Mode ModeMessage = 7;
    if (has_modemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modemessage());
    }

    // optional float WindDirection = 8;
    if (has_winddirection()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .WeatherMessage.Date DateMessage = 9;
    if (has_datemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datemessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeatherMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeatherMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeatherMessage::MergeFrom(const WeatherMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gpsmessage()) {
      mutable_gpsmessage()->::WeatherMessage_Gps::MergeFrom(from.gpsmessage());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_humi()) {
      set_humi(from.humi());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_rain()) {
      set_rain(from.rain());
    }
    if (from.has_atmpressure()) {
      set_atmpressure(from.atmpressure());
    }
    if (from.has_modemessage()) {
      mutable_modemessage()->::WeatherMessage_Mode::MergeFrom(from.modemessage());
    }
    if (from.has_winddirection()) {
      set_winddirection(from.winddirection());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_datemessage()) {
      mutable_datemessage()->::WeatherMessage_Date::MergeFrom(from.datemessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeatherMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherMessage::CopyFrom(const WeatherMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherMessage::IsInitialized() const {

  return true;
}

void WeatherMessage::Swap(WeatherMessage* other) {
  if (other != this) {
    std::swap(gpsmessage_, other->gpsmessage_);
    std::swap(temp_, other->temp_);
    std::swap(humi_, other->humi_);
    std::swap(speed_, other->speed_);
    std::swap(rain_, other->rain_);
    std::swap(atmpressure_, other->atmpressure_);
    std::swap(modemessage_, other->modemessage_);
    std::swap(winddirection_, other->winddirection_);
    std::swap(datemessage_, other->datemessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeatherMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeatherMessage_descriptor_;
  metadata.reflection = WeatherMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
