// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PackageMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PackageMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PackageMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageMessage_Call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageMessage_Call_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageMessage_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageMessage_Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PackageMessage_2eproto() {
  protobuf_AddDesc_PackageMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PackageMessage.proto");
  GOOGLE_CHECK(file != NULL);
  PackageMessage_descriptor_ = file->message_type(0);
  static const int PackageMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage, callmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage, resultmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage, robotid_),
  };
  PackageMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageMessage_descriptor_,
      PackageMessage::default_instance_,
      PackageMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageMessage));
  PackageMessage_Call_descriptor_ = PackageMessage_descriptor_->nested_type(0);
  static const int PackageMessage_Call_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage_Call, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage_Call, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage_Call, parameters_),
  };
  PackageMessage_Call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageMessage_Call_descriptor_,
      PackageMessage_Call::default_instance_,
      PackageMessage_Call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage_Call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage_Call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageMessage_Call));
  PackageMessage_Result_descriptor_ = PackageMessage_descriptor_->nested_type(1);
  static const int PackageMessage_Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage_Result, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage_Result, resultdata_),
  };
  PackageMessage_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageMessage_Result_descriptor_,
      PackageMessage_Result::default_instance_,
      PackageMessage_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageMessage_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageMessage_Result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PackageMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageMessage_descriptor_, &PackageMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageMessage_Call_descriptor_, &PackageMessage_Call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageMessage_Result_descriptor_, &PackageMessage_Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PackageMessage_2eproto() {
  delete PackageMessage::default_instance_;
  delete PackageMessage_reflection_;
  delete PackageMessage_Call::default_instance_;
  delete PackageMessage_Call_reflection_;
  delete PackageMessage_Result::default_instance_;
  delete PackageMessage_Result_reflection_;
}

void protobuf_AddDesc_PackageMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024PackageMessage.proto\"\265\002\n\016PackageMessag"
    "e\022\r\n\005Token\030\001 \001(\t\022\021\n\tSessionId\030\002 \002(\t\022\014\n\004T"
    "ime\030\003 \001(\003\022\014\n\004From\030\004 \001(\t\022\n\n\002To\030\005 \001(\t\022)\n\013C"
    "allMessage\030\006 \001(\0132\024.PackageMessage.Call\022-"
    "\n\rResultMessage\030\007 \001(\0132\026.PackageMessage.R"
    "esult\022\017\n\007robotID\030\010 \001(\t\032=\n\004Call\022\017\n\007Servic"
    "e\030\001 \001(\t\022\020\n\010Function\030\002 \002(\t\022\022\n\nParameters\030"
    "\003 \003(\014\032/\n\006Result\022\021\n\tErrorCode\030\001 \002(\005\022\022\n\nRe"
    "sultData\030\002 \001(\014", 334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PackageMessage.proto", &protobuf_RegisterTypes);
  PackageMessage::default_instance_ = new PackageMessage();
  PackageMessage_Call::default_instance_ = new PackageMessage_Call();
  PackageMessage_Result::default_instance_ = new PackageMessage_Result();
  PackageMessage::default_instance_->InitAsDefaultInstance();
  PackageMessage_Call::default_instance_->InitAsDefaultInstance();
  PackageMessage_Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PackageMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PackageMessage_2eproto {
  StaticDescriptorInitializer_PackageMessage_2eproto() {
    protobuf_AddDesc_PackageMessage_2eproto();
  }
} static_descriptor_initializer_PackageMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PackageMessage_Call::kServiceFieldNumber;
const int PackageMessage_Call::kFunctionFieldNumber;
const int PackageMessage_Call::kParametersFieldNumber;
#endif  // !_MSC_VER

PackageMessage_Call::PackageMessage_Call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageMessage_Call::InitAsDefaultInstance() {
}

PackageMessage_Call::PackageMessage_Call(const PackageMessage_Call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageMessage_Call::SharedCtor() {
  _cached_size_ = 0;
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageMessage_Call::~PackageMessage_Call() {
  SharedDtor();
}

void PackageMessage_Call::SharedDtor() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (function_ != &::google::protobuf::internal::kEmptyString) {
    delete function_;
  }
  if (this != default_instance_) {
  }
}

void PackageMessage_Call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageMessage_Call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageMessage_Call_descriptor_;
}

const PackageMessage_Call& PackageMessage_Call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PackageMessage_2eproto();
  return *default_instance_;
}

PackageMessage_Call* PackageMessage_Call::default_instance_ = NULL;

PackageMessage_Call* PackageMessage_Call::New() const {
  return new PackageMessage_Call;
}

void PackageMessage_Call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::kEmptyString) {
        service_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::kEmptyString) {
        function_->clear();
      }
    }
  }
  parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageMessage_Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Service = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Function;
        break;
      }

      // required string Function = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Parameters;
        break;
      }

      // repeated bytes Parameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Parameters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageMessage_Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service(), output);
  }

  // required string Function = 2;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->function(), output);
  }

  // repeated bytes Parameters = 3;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->parameters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageMessage_Call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }

  // required string Function = 2;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->function(), target);
  }

  // repeated bytes Parameters = 3;
  for (int i = 0; i < this->parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->parameters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageMessage_Call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Service = 1;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }

    // required string Function = 2;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

  }
  // repeated bytes Parameters = 3;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->parameters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageMessage_Call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageMessage_Call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageMessage_Call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageMessage_Call::MergeFrom(const PackageMessage_Call& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_.MergeFrom(from.parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageMessage_Call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageMessage_Call::CopyFrom(const PackageMessage_Call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageMessage_Call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void PackageMessage_Call::Swap(PackageMessage_Call* other) {
  if (other != this) {
    std::swap(service_, other->service_);
    std::swap(function_, other->function_);
    parameters_.Swap(&other->parameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageMessage_Call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageMessage_Call_descriptor_;
  metadata.reflection = PackageMessage_Call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PackageMessage_Result::kErrorCodeFieldNumber;
const int PackageMessage_Result::kResultDataFieldNumber;
#endif  // !_MSC_VER

PackageMessage_Result::PackageMessage_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageMessage_Result::InitAsDefaultInstance() {
}

PackageMessage_Result::PackageMessage_Result(const PackageMessage_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageMessage_Result::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  resultdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageMessage_Result::~PackageMessage_Result() {
  SharedDtor();
}

void PackageMessage_Result::SharedDtor() {
  if (resultdata_ != &::google::protobuf::internal::kEmptyString) {
    delete resultdata_;
  }
  if (this != default_instance_) {
  }
}

void PackageMessage_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageMessage_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageMessage_Result_descriptor_;
}

const PackageMessage_Result& PackageMessage_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PackageMessage_2eproto();
  return *default_instance_;
}

PackageMessage_Result* PackageMessage_Result::default_instance_ = NULL;

PackageMessage_Result* PackageMessage_Result::New() const {
  return new PackageMessage_Result;
}

void PackageMessage_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    if (has_resultdata()) {
      if (resultdata_ != &::google::protobuf::internal::kEmptyString) {
        resultdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageMessage_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ResultData;
        break;
      }

      // optional bytes ResultData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResultData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageMessage_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ErrorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional bytes ResultData = 2;
  if (has_resultdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->resultdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageMessage_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ErrorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes ResultData = 2;
  if (has_resultdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->resultdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageMessage_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ErrorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional bytes ResultData = 2;
    if (has_resultdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageMessage_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageMessage_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageMessage_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageMessage_Result::MergeFrom(const PackageMessage_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_resultdata()) {
      set_resultdata(from.resultdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageMessage_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageMessage_Result::CopyFrom(const PackageMessage_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageMessage_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PackageMessage_Result::Swap(PackageMessage_Result* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(resultdata_, other->resultdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageMessage_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageMessage_Result_descriptor_;
  metadata.reflection = PackageMessage_Result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PackageMessage::kTokenFieldNumber;
const int PackageMessage::kSessionIdFieldNumber;
const int PackageMessage::kTimeFieldNumber;
const int PackageMessage::kFromFieldNumber;
const int PackageMessage::kToFieldNumber;
const int PackageMessage::kCallMessageFieldNumber;
const int PackageMessage::kResultMessageFieldNumber;
const int PackageMessage::kRobotIDFieldNumber;
#endif  // !_MSC_VER

PackageMessage::PackageMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageMessage::InitAsDefaultInstance() {
  callmessage_ = const_cast< ::PackageMessage_Call*>(&::PackageMessage_Call::default_instance());
  resultmessage_ = const_cast< ::PackageMessage_Result*>(&::PackageMessage_Result::default_instance());
}

PackageMessage::PackageMessage(const PackageMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageMessage::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  callmessage_ = NULL;
  resultmessage_ = NULL;
  robotid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageMessage::~PackageMessage() {
  SharedDtor();
}

void PackageMessage::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (robotid_ != &::google::protobuf::internal::kEmptyString) {
    delete robotid_;
  }
  if (this != default_instance_) {
    delete callmessage_;
    delete resultmessage_;
  }
}

void PackageMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageMessage_descriptor_;
}

const PackageMessage& PackageMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PackageMessage_2eproto();
  return *default_instance_;
}

PackageMessage* PackageMessage::default_instance_ = NULL;

PackageMessage* PackageMessage::New() const {
  return new PackageMessage;
}

void PackageMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_sessionid()) {
      if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
        sessionid_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    if (has_callmessage()) {
      if (callmessage_ != NULL) callmessage_->::PackageMessage_Call::Clear();
    }
    if (has_resultmessage()) {
      if (resultmessage_ != NULL) resultmessage_->::PackageMessage_Result::Clear();
    }
    if (has_robotid()) {
      if (robotid_ != &::google::protobuf::internal::kEmptyString) {
        robotid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SessionId;
        break;
      }

      // required string SessionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }

      // optional int64 Time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_From;
        break;
      }

      // optional string From = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_From:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_To;
        break;
      }

      // optional string To = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_To:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_CallMessage;
        break;
      }

      // optional .PackageMessage.Call CallMessage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CallMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ResultMessage;
        break;
      }

      // optional .PackageMessage.Result ResultMessage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResultMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resultmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_robotID;
        break;
      }

      // optional string robotID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robotID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robotid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->robotid().data(), this->robotid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // required string SessionId = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sessionid(), output);
  }

  // optional int64 Time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional string From = 4;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->from(), output);
  }

  // optional string To = 5;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->to(), output);
  }

  // optional .PackageMessage.Call CallMessage = 6;
  if (has_callmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->callmessage(), output);
  }

  // optional .PackageMessage.Result ResultMessage = 7;
  if (has_resultmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->resultmessage(), output);
  }

  // optional string robotID = 8;
  if (has_robotid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robotid().data(), this->robotid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->robotid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required string SessionId = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sessionid(), target);
  }

  // optional int64 Time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional string From = 4;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from(), target);
  }

  // optional string To = 5;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to(), target);
  }

  // optional .PackageMessage.Call CallMessage = 6;
  if (has_callmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->callmessage(), target);
  }

  // optional .PackageMessage.Result ResultMessage = 7;
  if (has_resultmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->resultmessage(), target);
  }

  // optional string robotID = 8;
  if (has_robotid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robotid().data(), this->robotid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->robotid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string SessionId = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionid());
    }

    // optional int64 Time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string From = 4;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // optional string To = 5;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // optional .PackageMessage.Call CallMessage = 6;
    if (has_callmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callmessage());
    }

    // optional .PackageMessage.Result ResultMessage = 7;
    if (has_resultmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resultmessage());
    }

    // optional string robotID = 8;
    if (has_robotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robotid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageMessage::MergeFrom(const PackageMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_callmessage()) {
      mutable_callmessage()->::PackageMessage_Call::MergeFrom(from.callmessage());
    }
    if (from.has_resultmessage()) {
      mutable_resultmessage()->::PackageMessage_Result::MergeFrom(from.resultmessage());
    }
    if (from.has_robotid()) {
      set_robotid(from.robotid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageMessage::CopyFrom(const PackageMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_callmessage()) {
    if (!this->callmessage().IsInitialized()) return false;
  }
  if (has_resultmessage()) {
    if (!this->resultmessage().IsInitialized()) return false;
  }
  return true;
}

void PackageMessage::Swap(PackageMessage* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(time_, other->time_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(callmessage_, other->callmessage_);
    std::swap(resultmessage_, other->resultmessage_);
    std::swap(robotid_, other->robotid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageMessage_descriptor_;
  metadata.reflection = PackageMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
