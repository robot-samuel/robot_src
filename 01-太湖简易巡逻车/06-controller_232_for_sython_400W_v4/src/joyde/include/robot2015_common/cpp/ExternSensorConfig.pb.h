// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExternSensorConfig.proto

#ifndef PROTOBUF_ExternSensorConfig_2eproto__INCLUDED
#define PROTOBUF_ExternSensorConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ExternSensorConfig_2eproto();
void protobuf_AssignDesc_ExternSensorConfig_2eproto();
void protobuf_ShutdownFile_ExternSensorConfig_2eproto();

class ExternSensorConfig;
class ExternSensorConfig_Config_Mode_fan;

// ===================================================================

class ExternSensorConfig_Config_Mode_fan : public ::google::protobuf::Message {
 public:
  ExternSensorConfig_Config_Mode_fan();
  virtual ~ExternSensorConfig_Config_Mode_fan();

  ExternSensorConfig_Config_Mode_fan(const ExternSensorConfig_Config_Mode_fan& from);

  inline ExternSensorConfig_Config_Mode_fan& operator=(const ExternSensorConfig_Config_Mode_fan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternSensorConfig_Config_Mode_fan& default_instance();

  void Swap(ExternSensorConfig_Config_Mode_fan* other);

  // implements Message ----------------------------------------------

  ExternSensorConfig_Config_Mode_fan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExternSensorConfig_Config_Mode_fan& from);
  void MergeFrom(const ExternSensorConfig_Config_Mode_fan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fan_ID = 1;
  inline bool has_fan_id() const;
  inline void clear_fan_id();
  static const int kFanIDFieldNumber = 1;
  inline ::google::protobuf::int32 fan_id() const;
  inline void set_fan_id(::google::protobuf::int32 value);

  // optional int32 fan_enable = 2;
  inline bool has_fan_enable() const;
  inline void clear_fan_enable();
  static const int kFanEnableFieldNumber = 2;
  inline ::google::protobuf::int32 fan_enable() const;
  inline void set_fan_enable(::google::protobuf::int32 value);

  // optional float vaule_open = 3;
  inline bool has_vaule_open() const;
  inline void clear_vaule_open();
  static const int kVauleOpenFieldNumber = 3;
  inline float vaule_open() const;
  inline void set_vaule_open(float value);

  // optional float vaule_close = 4;
  inline bool has_vaule_close() const;
  inline void clear_vaule_close();
  static const int kVauleCloseFieldNumber = 4;
  inline float vaule_close() const;
  inline void set_vaule_close(float value);

  // optional float Ctrl_switch = 5;
  inline bool has_ctrl_switch() const;
  inline void clear_ctrl_switch();
  static const int kCtrlSwitchFieldNumber = 5;
  inline float ctrl_switch() const;
  inline void set_ctrl_switch(float value);

  // @@protoc_insertion_point(class_scope:ExternSensorConfig.Config_Mode_fan)
 private:
  inline void set_has_fan_id();
  inline void clear_has_fan_id();
  inline void set_has_fan_enable();
  inline void clear_has_fan_enable();
  inline void set_has_vaule_open();
  inline void clear_has_vaule_open();
  inline void set_has_vaule_close();
  inline void clear_has_vaule_close();
  inline void set_has_ctrl_switch();
  inline void clear_has_ctrl_switch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fan_id_;
  ::google::protobuf::int32 fan_enable_;
  float vaule_open_;
  float vaule_close_;
  float ctrl_switch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ExternSensorConfig_2eproto();
  friend void protobuf_AssignDesc_ExternSensorConfig_2eproto();
  friend void protobuf_ShutdownFile_ExternSensorConfig_2eproto();

  void InitAsDefaultInstance();
  static ExternSensorConfig_Config_Mode_fan* default_instance_;
};
// -------------------------------------------------------------------

class ExternSensorConfig : public ::google::protobuf::Message {
 public:
  ExternSensorConfig();
  virtual ~ExternSensorConfig();

  ExternSensorConfig(const ExternSensorConfig& from);

  inline ExternSensorConfig& operator=(const ExternSensorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternSensorConfig& default_instance();

  void Swap(ExternSensorConfig* other);

  // implements Message ----------------------------------------------

  ExternSensorConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExternSensorConfig& from);
  void MergeFrom(const ExternSensorConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ExternSensorConfig_Config_Mode_fan Config_Mode_fan;

  // accessors -------------------------------------------------------

  // optional int32 Led_Color = 1;
  inline bool has_led_color() const;
  inline void clear_led_color();
  static const int kLedColorFieldNumber = 1;
  inline ::google::protobuf::int32 led_color() const;
  inline void set_led_color(::google::protobuf::int32 value);

  // repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
  inline int config_fan_msg_size() const;
  inline void clear_config_fan_msg();
  static const int kConfigFanMsgFieldNumber = 2;
  inline const ::ExternSensorConfig_Config_Mode_fan& config_fan_msg(int index) const;
  inline ::ExternSensorConfig_Config_Mode_fan* mutable_config_fan_msg(int index);
  inline ::ExternSensorConfig_Config_Mode_fan* add_config_fan_msg();
  inline const ::google::protobuf::RepeatedPtrField< ::ExternSensorConfig_Config_Mode_fan >&
      config_fan_msg() const;
  inline ::google::protobuf::RepeatedPtrField< ::ExternSensorConfig_Config_Mode_fan >*
      mutable_config_fan_msg();

  // optional int32 Led_Flight = 3;
  inline bool has_led_flight() const;
  inline void clear_led_flight();
  static const int kLedFlightFieldNumber = 3;
  inline ::google::protobuf::int32 led_flight() const;
  inline void set_led_flight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ExternSensorConfig)
 private:
  inline void set_has_led_color();
  inline void clear_has_led_color();
  inline void set_has_led_flight();
  inline void clear_has_led_flight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ExternSensorConfig_Config_Mode_fan > config_fan_msg_;
  ::google::protobuf::int32 led_color_;
  ::google::protobuf::int32 led_flight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ExternSensorConfig_2eproto();
  friend void protobuf_AssignDesc_ExternSensorConfig_2eproto();
  friend void protobuf_ShutdownFile_ExternSensorConfig_2eproto();

  void InitAsDefaultInstance();
  static ExternSensorConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ExternSensorConfig_Config_Mode_fan

// optional int32 fan_ID = 1;
inline bool ExternSensorConfig_Config_Mode_fan::has_fan_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternSensorConfig_Config_Mode_fan::set_has_fan_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternSensorConfig_Config_Mode_fan::clear_has_fan_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternSensorConfig_Config_Mode_fan::clear_fan_id() {
  fan_id_ = 0;
  clear_has_fan_id();
}
inline ::google::protobuf::int32 ExternSensorConfig_Config_Mode_fan::fan_id() const {
  return fan_id_;
}
inline void ExternSensorConfig_Config_Mode_fan::set_fan_id(::google::protobuf::int32 value) {
  set_has_fan_id();
  fan_id_ = value;
}

// optional int32 fan_enable = 2;
inline bool ExternSensorConfig_Config_Mode_fan::has_fan_enable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExternSensorConfig_Config_Mode_fan::set_has_fan_enable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExternSensorConfig_Config_Mode_fan::clear_has_fan_enable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExternSensorConfig_Config_Mode_fan::clear_fan_enable() {
  fan_enable_ = 0;
  clear_has_fan_enable();
}
inline ::google::protobuf::int32 ExternSensorConfig_Config_Mode_fan::fan_enable() const {
  return fan_enable_;
}
inline void ExternSensorConfig_Config_Mode_fan::set_fan_enable(::google::protobuf::int32 value) {
  set_has_fan_enable();
  fan_enable_ = value;
}

// optional float vaule_open = 3;
inline bool ExternSensorConfig_Config_Mode_fan::has_vaule_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExternSensorConfig_Config_Mode_fan::set_has_vaule_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExternSensorConfig_Config_Mode_fan::clear_has_vaule_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExternSensorConfig_Config_Mode_fan::clear_vaule_open() {
  vaule_open_ = 0;
  clear_has_vaule_open();
}
inline float ExternSensorConfig_Config_Mode_fan::vaule_open() const {
  return vaule_open_;
}
inline void ExternSensorConfig_Config_Mode_fan::set_vaule_open(float value) {
  set_has_vaule_open();
  vaule_open_ = value;
}

// optional float vaule_close = 4;
inline bool ExternSensorConfig_Config_Mode_fan::has_vaule_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExternSensorConfig_Config_Mode_fan::set_has_vaule_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExternSensorConfig_Config_Mode_fan::clear_has_vaule_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExternSensorConfig_Config_Mode_fan::clear_vaule_close() {
  vaule_close_ = 0;
  clear_has_vaule_close();
}
inline float ExternSensorConfig_Config_Mode_fan::vaule_close() const {
  return vaule_close_;
}
inline void ExternSensorConfig_Config_Mode_fan::set_vaule_close(float value) {
  set_has_vaule_close();
  vaule_close_ = value;
}

// optional float Ctrl_switch = 5;
inline bool ExternSensorConfig_Config_Mode_fan::has_ctrl_switch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExternSensorConfig_Config_Mode_fan::set_has_ctrl_switch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExternSensorConfig_Config_Mode_fan::clear_has_ctrl_switch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExternSensorConfig_Config_Mode_fan::clear_ctrl_switch() {
  ctrl_switch_ = 0;
  clear_has_ctrl_switch();
}
inline float ExternSensorConfig_Config_Mode_fan::ctrl_switch() const {
  return ctrl_switch_;
}
inline void ExternSensorConfig_Config_Mode_fan::set_ctrl_switch(float value) {
  set_has_ctrl_switch();
  ctrl_switch_ = value;
}

// -------------------------------------------------------------------

// ExternSensorConfig

// optional int32 Led_Color = 1;
inline bool ExternSensorConfig::has_led_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternSensorConfig::set_has_led_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternSensorConfig::clear_has_led_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternSensorConfig::clear_led_color() {
  led_color_ = 0;
  clear_has_led_color();
}
inline ::google::protobuf::int32 ExternSensorConfig::led_color() const {
  return led_color_;
}
inline void ExternSensorConfig::set_led_color(::google::protobuf::int32 value) {
  set_has_led_color();
  led_color_ = value;
}

// repeated .ExternSensorConfig.Config_Mode_fan Config_fan_Msg = 2;
inline int ExternSensorConfig::config_fan_msg_size() const {
  return config_fan_msg_.size();
}
inline void ExternSensorConfig::clear_config_fan_msg() {
  config_fan_msg_.Clear();
}
inline const ::ExternSensorConfig_Config_Mode_fan& ExternSensorConfig::config_fan_msg(int index) const {
  return config_fan_msg_.Get(index);
}
inline ::ExternSensorConfig_Config_Mode_fan* ExternSensorConfig::mutable_config_fan_msg(int index) {
  return config_fan_msg_.Mutable(index);
}
inline ::ExternSensorConfig_Config_Mode_fan* ExternSensorConfig::add_config_fan_msg() {
  return config_fan_msg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ExternSensorConfig_Config_Mode_fan >&
ExternSensorConfig::config_fan_msg() const {
  return config_fan_msg_;
}
inline ::google::protobuf::RepeatedPtrField< ::ExternSensorConfig_Config_Mode_fan >*
ExternSensorConfig::mutable_config_fan_msg() {
  return &config_fan_msg_;
}

// optional int32 Led_Flight = 3;
inline bool ExternSensorConfig::has_led_flight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExternSensorConfig::set_has_led_flight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExternSensorConfig::clear_has_led_flight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExternSensorConfig::clear_led_flight() {
  led_flight_ = 0;
  clear_has_led_flight();
}
inline ::google::protobuf::int32 ExternSensorConfig::led_flight() const {
  return led_flight_;
}
inline void ExternSensorConfig::set_led_flight(::google::protobuf::int32 value) {
  set_has_led_flight();
  led_flight_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ExternSensorConfig_2eproto__INCLUDED
