/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_ParamConfig_2eproto__INCLUDED
#define PROTOBUF_C_ParamConfig_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "ExternSensorConfig.pb-c.h"

typedef struct _ParamConfig ParamConfig;
typedef struct _ParamConfig__ConfigModeDriver ParamConfig__ConfigModeDriver;
typedef struct _ParamConfig__ConfigErrorMode ParamConfig__ConfigErrorMode;
typedef struct _ParamConfig__ConfigAlarmMode ParamConfig__ConfigAlarmMode;


/* --- enums --- */


/* --- messages --- */

struct  _ParamConfig__ConfigModeDriver
{
  ProtobufCMessage base;
  protobuf_c_boolean has_autorun_speed;
  int32_t autorun_speed;
  protobuf_c_boolean has_autorun_angel;
  int32_t autorun_angel;
  protobuf_c_boolean has_remote_speed;
  int32_t remote_speed;
  protobuf_c_boolean has_remote_angel;
  int32_t remote_angel;
  protobuf_c_boolean has_remote_accevelocity;
  int32_t remote_accevelocity;
  protobuf_c_boolean has_reductionratiol;
  float reductionratiol;
  protobuf_c_boolean has_wheelssize;
  float wheelssize;
  protobuf_c_boolean has_rwheelssize;
  float rwheelssize;
  protobuf_c_boolean has_lwheelssize;
  float lwheelssize;
  protobuf_c_boolean has_ecounterrpm;
  int32_t ecounterrpm;
};
#define PARAM_CONFIG__CONFIG__MODE__DRIVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&param_config__config__mode__driver__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _ParamConfig__ConfigErrorMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_carleftfdrivererror_ischeck;
  protobuf_c_boolean carleftfdrivererror_ischeck;
  protobuf_c_boolean has_carrightfdrivererror_ischeck;
  protobuf_c_boolean carrightfdrivererror_ischeck;
  protobuf_c_boolean has_carleftbdrivererror_ischeck;
  protobuf_c_boolean carleftbdrivererror_ischeck;
  protobuf_c_boolean has_carrightbdrivererror_ischeck;
  protobuf_c_boolean carrightbdrivererror_ischeck;
  protobuf_c_boolean has_leftfdrivercomerror_ischeck;
  protobuf_c_boolean leftfdrivercomerror_ischeck;
  protobuf_c_boolean has_rightfdrivercomerror_ischeck;
  protobuf_c_boolean rightfdrivercomerror_ischeck;
  protobuf_c_boolean has_leftbdrivercomerror_ischeck;
  protobuf_c_boolean leftbdrivercomerror_ischeck;
  protobuf_c_boolean has_rightbdrivercomerror_ischeck;
  protobuf_c_boolean rightbdrivercomerror_ischeck;
  protobuf_c_boolean has_externcomdeverror_ischeck;
  protobuf_c_boolean externcomdeverror_ischeck;
  protobuf_c_boolean has_bmssyserror_ischeck;
  protobuf_c_boolean bmssyserror_ischeck;
  protobuf_c_boolean has_obstaclestoperror_ischeck;
  protobuf_c_boolean obstaclestoperror_ischeck;
  protobuf_c_boolean has_cashswitchstoperror_ischeck;
  protobuf_c_boolean cashswitchstoperror_ischeck;
  protobuf_c_boolean has_currentoverloaderror_ischeck;
  protobuf_c_boolean currentoverloaderror_ischeck;
  protobuf_c_boolean has_xrs2015_drivernodeoff_ischeck;
  protobuf_c_boolean xrs2015_drivernodeoff_ischeck;
  protobuf_c_boolean has_bobstaclestoperror_ischeck;
  protobuf_c_boolean bobstaclestoperror_ischeck;
  protobuf_c_boolean has_dropstoperror_ischeck;
  protobuf_c_boolean dropstoperror_ischeck;
};
#define PARAM_CONFIG__CONFIG__ERROR__MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&param_config__config__error__mode__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _ParamConfig__ConfigAlarmMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ctrolboxhightemalarm_ischeck;
  protobuf_c_boolean ctrolboxhightemalarm_ischeck;
  protobuf_c_boolean has_ctrolboxfrozentemalarm_ischeck;
  protobuf_c_boolean ctrolboxfrozentemalarm_ischeck;
  protobuf_c_boolean has_bmsmodcomlostalarm_ischeck;
  protobuf_c_boolean bmsmodcomlostalarm_ischeck;
  protobuf_c_boolean has_emergency_status_stop_ischeck;
  protobuf_c_boolean emergency_status_stop_ischeck;
  protobuf_c_boolean has_ecanexternsnsorndeoff_ischeck;
  protobuf_c_boolean ecanexternsnsorndeoff_ischeck;
  protobuf_c_boolean has_zmqtransnodeoff_ischeck;
  protobuf_c_boolean zmqtransnodeoff_ischeck;
  protobuf_c_boolean has_joytestnodeoff_ischeck;
  protobuf_c_boolean joytestnodeoff_ischeck;
  protobuf_c_boolean has_ph3readnodeoff_ischeck;
  protobuf_c_boolean ph3readnodeoff_ischeck;
  protobuf_c_boolean has_ph3readcomlost_ischeck;
  protobuf_c_boolean ph3readcomlost_ischeck;
};
#define PARAM_CONFIG__CONFIG__ALARM__MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&param_config__config__alarm__mode__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _ParamConfig
{
  ProtobufCMessage base;
  ParamConfig__ConfigModeDriver *config_driver_msg;
  ParamConfig__ConfigErrorMode *config_error_msg;
  ParamConfig__ConfigAlarmMode *config_alarm_msg;
  ExternSensorConfig *config_extern_msg;
};
#define PARAM_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&param_config__descriptor) \
    , NULL, NULL, NULL, NULL }


/* ParamConfig__ConfigModeDriver methods */
void   param_config__config__mode__driver__init
                     (ParamConfig__ConfigModeDriver         *message);
/* ParamConfig__ConfigErrorMode methods */
void   param_config__config__error__mode__init
                     (ParamConfig__ConfigErrorMode         *message);
/* ParamConfig__ConfigAlarmMode methods */
void   param_config__config__alarm__mode__init
                     (ParamConfig__ConfigAlarmMode         *message);
/* ParamConfig methods */
void   param_config__init
                     (ParamConfig         *message);
size_t param_config__get_packed_size
                     (const ParamConfig   *message);
size_t param_config__pack
                     (const ParamConfig   *message,
                      uint8_t             *out);
size_t param_config__pack_to_buffer
                     (const ParamConfig   *message,
                      ProtobufCBuffer     *buffer);
ParamConfig *
       param_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   param_config__free_unpacked
                     (ParamConfig *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ParamConfig__ConfigModeDriver_Closure)
                 (const ParamConfig__ConfigModeDriver *message,
                  void *closure_data);
typedef void (*ParamConfig__ConfigErrorMode_Closure)
                 (const ParamConfig__ConfigErrorMode *message,
                  void *closure_data);
typedef void (*ParamConfig__ConfigAlarmMode_Closure)
                 (const ParamConfig__ConfigAlarmMode *message,
                  void *closure_data);
typedef void (*ParamConfig_Closure)
                 (const ParamConfig *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor param_config__descriptor;
extern const ProtobufCMessageDescriptor param_config__config__mode__driver__descriptor;
extern const ProtobufCMessageDescriptor param_config__config__error__mode__descriptor;
extern const ProtobufCMessageDescriptor param_config__config__alarm__mode__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_ParamConfig_2eproto__INCLUDED */
