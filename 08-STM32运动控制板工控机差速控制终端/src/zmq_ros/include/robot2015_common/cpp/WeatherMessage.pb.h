// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeatherMessage.proto

#ifndef PROTOBUF_WeatherMessage_2eproto__INCLUDED
#define PROTOBUF_WeatherMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WeatherMessage_2eproto();
void protobuf_AssignDesc_WeatherMessage_2eproto();
void protobuf_ShutdownFile_WeatherMessage_2eproto();

class WeatherMessage;
class WeatherMessage_GPS;
class WeatherMessage_DateTime;

// ===================================================================

class WeatherMessage_GPS : public ::google::protobuf::Message {
 public:
  WeatherMessage_GPS();
  virtual ~WeatherMessage_GPS();

  WeatherMessage_GPS(const WeatherMessage_GPS& from);

  inline WeatherMessage_GPS& operator=(const WeatherMessage_GPS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherMessage_GPS& default_instance();

  void Swap(WeatherMessage_GPS* other);

  // implements Message ----------------------------------------------

  WeatherMessage_GPS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeatherMessage_GPS& from);
  void MergeFrom(const WeatherMessage_GPS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float La = 1;
  inline bool has_la() const;
  inline void clear_la();
  static const int kLaFieldNumber = 1;
  inline float la() const;
  inline void set_la(float value);

  // optional float Lo = 2;
  inline bool has_lo() const;
  inline void clear_lo();
  static const int kLoFieldNumber = 2;
  inline float lo() const;
  inline void set_lo(float value);

  // optional int64 GPSTime = 3;
  inline bool has_gpstime() const;
  inline void clear_gpstime();
  static const int kGPSTimeFieldNumber = 3;
  inline ::google::protobuf::int64 gpstime() const;
  inline void set_gpstime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:WeatherMessage.GPS)
 private:
  inline void set_has_la();
  inline void clear_has_la();
  inline void set_has_lo();
  inline void clear_has_lo();
  inline void set_has_gpstime();
  inline void clear_has_gpstime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float la_;
  float lo_;
  ::google::protobuf::int64 gpstime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WeatherMessage_2eproto();
  friend void protobuf_AssignDesc_WeatherMessage_2eproto();
  friend void protobuf_ShutdownFile_WeatherMessage_2eproto();

  void InitAsDefaultInstance();
  static WeatherMessage_GPS* default_instance_;
};
// -------------------------------------------------------------------

class WeatherMessage_DateTime : public ::google::protobuf::Message {
 public:
  WeatherMessage_DateTime();
  virtual ~WeatherMessage_DateTime();

  WeatherMessage_DateTime(const WeatherMessage_DateTime& from);

  inline WeatherMessage_DateTime& operator=(const WeatherMessage_DateTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherMessage_DateTime& default_instance();

  void Swap(WeatherMessage_DateTime* other);

  // implements Message ----------------------------------------------

  WeatherMessage_DateTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeatherMessage_DateTime& from);
  void MergeFrom(const WeatherMessage_DateTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::int32 year() const;
  inline void set_year(::google::protobuf::int32 value);

  // optional int32 Month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::int32 month() const;
  inline void set_month(::google::protobuf::int32 value);

  // optional int32 Day = 3;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // optional int32 Hour = 4;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 4;
  inline ::google::protobuf::int32 hour() const;
  inline void set_hour(::google::protobuf::int32 value);

  // optional int32 Miunte = 5;
  inline bool has_miunte() const;
  inline void clear_miunte();
  static const int kMiunteFieldNumber = 5;
  inline ::google::protobuf::int32 miunte() const;
  inline void set_miunte(::google::protobuf::int32 value);

  // optional int32 Second = 6;
  inline bool has_second() const;
  inline void clear_second();
  static const int kSecondFieldNumber = 6;
  inline ::google::protobuf::int32 second() const;
  inline void set_second(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WeatherMessage.DateTime)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hour();
  inline void clear_has_hour();
  inline void set_has_miunte();
  inline void clear_has_miunte();
  inline void set_has_second();
  inline void clear_has_second();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 year_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 hour_;
  ::google::protobuf::int32 miunte_;
  ::google::protobuf::int32 second_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_WeatherMessage_2eproto();
  friend void protobuf_AssignDesc_WeatherMessage_2eproto();
  friend void protobuf_ShutdownFile_WeatherMessage_2eproto();

  void InitAsDefaultInstance();
  static WeatherMessage_DateTime* default_instance_;
};
// -------------------------------------------------------------------

class WeatherMessage : public ::google::protobuf::Message {
 public:
  WeatherMessage();
  virtual ~WeatherMessage();

  WeatherMessage(const WeatherMessage& from);

  inline WeatherMessage& operator=(const WeatherMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherMessage& default_instance();

  void Swap(WeatherMessage* other);

  // implements Message ----------------------------------------------

  WeatherMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeatherMessage& from);
  void MergeFrom(const WeatherMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef WeatherMessage_GPS GPS;
  typedef WeatherMessage_DateTime DateTime;

  // accessors -------------------------------------------------------

  // optional int32 Online = 1;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 1;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // optional float Direction = 2;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 2;
  inline float direction() const;
  inline void set_direction(float value);

  // optional float MaxDir = 3;
  inline bool has_maxdir() const;
  inline void clear_maxdir();
  static const int kMaxDirFieldNumber = 3;
  inline float maxdir() const;
  inline void set_maxdir(float value);

  // optional float MiniDir = 4;
  inline bool has_minidir() const;
  inline void clear_minidir();
  static const int kMiniDirFieldNumber = 4;
  inline float minidir() const;
  inline void set_minidir(float value);

  // optional float Speed = 5;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline float speed() const;
  inline void set_speed(float value);

  // optional float MaxSpeed = 6;
  inline bool has_maxspeed() const;
  inline void clear_maxspeed();
  static const int kMaxSpeedFieldNumber = 6;
  inline float maxspeed() const;
  inline void set_maxspeed(float value);

  // optional float MiniSpeed = 7;
  inline bool has_minispeed() const;
  inline void clear_minispeed();
  static const int kMiniSpeedFieldNumber = 7;
  inline float minispeed() const;
  inline void set_minispeed(float value);

  // optional float Temp = 8;
  inline bool has_temp() const;
  inline void clear_temp();
  static const int kTempFieldNumber = 8;
  inline float temp() const;
  inline void set_temp(float value);

  // optional float Humi = 9;
  inline bool has_humi() const;
  inline void clear_humi();
  static const int kHumiFieldNumber = 9;
  inline float humi() const;
  inline void set_humi(float value);

  // optional float Rain = 10;
  inline bool has_rain() const;
  inline void clear_rain();
  static const int kRainFieldNumber = 10;
  inline float rain() const;
  inline void set_rain(float value);

  // optional float Pressure = 11;
  inline bool has_pressure() const;
  inline void clear_pressure();
  static const int kPressureFieldNumber = 11;
  inline float pressure() const;
  inline void set_pressure(float value);

  // optional float Strength = 12;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 12;
  inline float strength() const;
  inline void set_strength(float value);

  // optional .WeatherMessage.GPS GPSdate = 13;
  inline bool has_gpsdate() const;
  inline void clear_gpsdate();
  static const int kGPSdateFieldNumber = 13;
  inline const ::WeatherMessage_GPS& gpsdate() const;
  inline ::WeatherMessage_GPS* mutable_gpsdate();
  inline ::WeatherMessage_GPS* release_gpsdate();
  inline void set_allocated_gpsdate(::WeatherMessage_GPS* gpsdate);

  // optional .WeatherMessage.DateTime Date = 14;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 14;
  inline const ::WeatherMessage_DateTime& date() const;
  inline ::WeatherMessage_DateTime* mutable_date();
  inline ::WeatherMessage_DateTime* release_date();
  inline void set_allocated_date(::WeatherMessage_DateTime* date);

  // @@protoc_insertion_point(class_scope:WeatherMessage)
 private:
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_maxdir();
  inline void clear_has_maxdir();
  inline void set_has_minidir();
  inline void clear_has_minidir();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_maxspeed();
  inline void clear_has_maxspeed();
  inline void set_has_minispeed();
  inline void clear_has_minispeed();
  inline void set_has_temp();
  inline void clear_has_temp();
  inline void set_has_humi();
  inline void clear_has_humi();
  inline void set_has_rain();
  inline void clear_has_rain();
  inline void set_has_pressure();
  inline void clear_has_pressure();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_gpsdate();
  inline void clear_has_gpsdate();
  inline void set_has_date();
  inline void clear_has_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 online_;
  float direction_;
  float maxdir_;
  float minidir_;
  float speed_;
  float maxspeed_;
  float minispeed_;
  float temp_;
  float humi_;
  float rain_;
  float pressure_;
  float strength_;
  ::WeatherMessage_GPS* gpsdate_;
  ::WeatherMessage_DateTime* date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_WeatherMessage_2eproto();
  friend void protobuf_AssignDesc_WeatherMessage_2eproto();
  friend void protobuf_ShutdownFile_WeatherMessage_2eproto();

  void InitAsDefaultInstance();
  static WeatherMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// WeatherMessage_GPS

// optional float La = 1;
inline bool WeatherMessage_GPS::has_la() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeatherMessage_GPS::set_has_la() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeatherMessage_GPS::clear_has_la() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeatherMessage_GPS::clear_la() {
  la_ = 0;
  clear_has_la();
}
inline float WeatherMessage_GPS::la() const {
  return la_;
}
inline void WeatherMessage_GPS::set_la(float value) {
  set_has_la();
  la_ = value;
}

// optional float Lo = 2;
inline bool WeatherMessage_GPS::has_lo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeatherMessage_GPS::set_has_lo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeatherMessage_GPS::clear_has_lo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeatherMessage_GPS::clear_lo() {
  lo_ = 0;
  clear_has_lo();
}
inline float WeatherMessage_GPS::lo() const {
  return lo_;
}
inline void WeatherMessage_GPS::set_lo(float value) {
  set_has_lo();
  lo_ = value;
}

// optional int64 GPSTime = 3;
inline bool WeatherMessage_GPS::has_gpstime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeatherMessage_GPS::set_has_gpstime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeatherMessage_GPS::clear_has_gpstime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeatherMessage_GPS::clear_gpstime() {
  gpstime_ = GOOGLE_LONGLONG(0);
  clear_has_gpstime();
}
inline ::google::protobuf::int64 WeatherMessage_GPS::gpstime() const {
  return gpstime_;
}
inline void WeatherMessage_GPS::set_gpstime(::google::protobuf::int64 value) {
  set_has_gpstime();
  gpstime_ = value;
}

// -------------------------------------------------------------------

// WeatherMessage_DateTime

// optional int32 Year = 1;
inline bool WeatherMessage_DateTime::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeatherMessage_DateTime::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeatherMessage_DateTime::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeatherMessage_DateTime::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 WeatherMessage_DateTime::year() const {
  return year_;
}
inline void WeatherMessage_DateTime::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
}

// optional int32 Month = 2;
inline bool WeatherMessage_DateTime::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeatherMessage_DateTime::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeatherMessage_DateTime::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeatherMessage_DateTime::clear_month() {
  month_ = 0;
  clear_has_month();
}
inline ::google::protobuf::int32 WeatherMessage_DateTime::month() const {
  return month_;
}
inline void WeatherMessage_DateTime::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
}

// optional int32 Day = 3;
inline bool WeatherMessage_DateTime::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeatherMessage_DateTime::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeatherMessage_DateTime::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeatherMessage_DateTime::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 WeatherMessage_DateTime::day() const {
  return day_;
}
inline void WeatherMessage_DateTime::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// optional int32 Hour = 4;
inline bool WeatherMessage_DateTime::has_hour() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeatherMessage_DateTime::set_has_hour() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeatherMessage_DateTime::clear_has_hour() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeatherMessage_DateTime::clear_hour() {
  hour_ = 0;
  clear_has_hour();
}
inline ::google::protobuf::int32 WeatherMessage_DateTime::hour() const {
  return hour_;
}
inline void WeatherMessage_DateTime::set_hour(::google::protobuf::int32 value) {
  set_has_hour();
  hour_ = value;
}

// optional int32 Miunte = 5;
inline bool WeatherMessage_DateTime::has_miunte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeatherMessage_DateTime::set_has_miunte() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeatherMessage_DateTime::clear_has_miunte() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeatherMessage_DateTime::clear_miunte() {
  miunte_ = 0;
  clear_has_miunte();
}
inline ::google::protobuf::int32 WeatherMessage_DateTime::miunte() const {
  return miunte_;
}
inline void WeatherMessage_DateTime::set_miunte(::google::protobuf::int32 value) {
  set_has_miunte();
  miunte_ = value;
}

// optional int32 Second = 6;
inline bool WeatherMessage_DateTime::has_second() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeatherMessage_DateTime::set_has_second() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeatherMessage_DateTime::clear_has_second() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeatherMessage_DateTime::clear_second() {
  second_ = 0;
  clear_has_second();
}
inline ::google::protobuf::int32 WeatherMessage_DateTime::second() const {
  return second_;
}
inline void WeatherMessage_DateTime::set_second(::google::protobuf::int32 value) {
  set_has_second();
  second_ = value;
}

// -------------------------------------------------------------------

// WeatherMessage

// optional int32 Online = 1;
inline bool WeatherMessage::has_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeatherMessage::set_has_online() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeatherMessage::clear_has_online() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeatherMessage::clear_online() {
  online_ = 0;
  clear_has_online();
}
inline ::google::protobuf::int32 WeatherMessage::online() const {
  return online_;
}
inline void WeatherMessage::set_online(::google::protobuf::int32 value) {
  set_has_online();
  online_ = value;
}

// optional float Direction = 2;
inline bool WeatherMessage::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeatherMessage::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeatherMessage::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeatherMessage::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline float WeatherMessage::direction() const {
  return direction_;
}
inline void WeatherMessage::set_direction(float value) {
  set_has_direction();
  direction_ = value;
}

// optional float MaxDir = 3;
inline bool WeatherMessage::has_maxdir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeatherMessage::set_has_maxdir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeatherMessage::clear_has_maxdir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeatherMessage::clear_maxdir() {
  maxdir_ = 0;
  clear_has_maxdir();
}
inline float WeatherMessage::maxdir() const {
  return maxdir_;
}
inline void WeatherMessage::set_maxdir(float value) {
  set_has_maxdir();
  maxdir_ = value;
}

// optional float MiniDir = 4;
inline bool WeatherMessage::has_minidir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeatherMessage::set_has_minidir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeatherMessage::clear_has_minidir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeatherMessage::clear_minidir() {
  minidir_ = 0;
  clear_has_minidir();
}
inline float WeatherMessage::minidir() const {
  return minidir_;
}
inline void WeatherMessage::set_minidir(float value) {
  set_has_minidir();
  minidir_ = value;
}

// optional float Speed = 5;
inline bool WeatherMessage::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeatherMessage::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeatherMessage::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeatherMessage::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float WeatherMessage::speed() const {
  return speed_;
}
inline void WeatherMessage::set_speed(float value) {
  set_has_speed();
  speed_ = value;
}

// optional float MaxSpeed = 6;
inline bool WeatherMessage::has_maxspeed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeatherMessage::set_has_maxspeed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeatherMessage::clear_has_maxspeed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeatherMessage::clear_maxspeed() {
  maxspeed_ = 0;
  clear_has_maxspeed();
}
inline float WeatherMessage::maxspeed() const {
  return maxspeed_;
}
inline void WeatherMessage::set_maxspeed(float value) {
  set_has_maxspeed();
  maxspeed_ = value;
}

// optional float MiniSpeed = 7;
inline bool WeatherMessage::has_minispeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WeatherMessage::set_has_minispeed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WeatherMessage::clear_has_minispeed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WeatherMessage::clear_minispeed() {
  minispeed_ = 0;
  clear_has_minispeed();
}
inline float WeatherMessage::minispeed() const {
  return minispeed_;
}
inline void WeatherMessage::set_minispeed(float value) {
  set_has_minispeed();
  minispeed_ = value;
}

// optional float Temp = 8;
inline bool WeatherMessage::has_temp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WeatherMessage::set_has_temp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WeatherMessage::clear_has_temp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WeatherMessage::clear_temp() {
  temp_ = 0;
  clear_has_temp();
}
inline float WeatherMessage::temp() const {
  return temp_;
}
inline void WeatherMessage::set_temp(float value) {
  set_has_temp();
  temp_ = value;
}

// optional float Humi = 9;
inline bool WeatherMessage::has_humi() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WeatherMessage::set_has_humi() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WeatherMessage::clear_has_humi() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WeatherMessage::clear_humi() {
  humi_ = 0;
  clear_has_humi();
}
inline float WeatherMessage::humi() const {
  return humi_;
}
inline void WeatherMessage::set_humi(float value) {
  set_has_humi();
  humi_ = value;
}

// optional float Rain = 10;
inline bool WeatherMessage::has_rain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WeatherMessage::set_has_rain() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WeatherMessage::clear_has_rain() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WeatherMessage::clear_rain() {
  rain_ = 0;
  clear_has_rain();
}
inline float WeatherMessage::rain() const {
  return rain_;
}
inline void WeatherMessage::set_rain(float value) {
  set_has_rain();
  rain_ = value;
}

// optional float Pressure = 11;
inline bool WeatherMessage::has_pressure() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WeatherMessage::set_has_pressure() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WeatherMessage::clear_has_pressure() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WeatherMessage::clear_pressure() {
  pressure_ = 0;
  clear_has_pressure();
}
inline float WeatherMessage::pressure() const {
  return pressure_;
}
inline void WeatherMessage::set_pressure(float value) {
  set_has_pressure();
  pressure_ = value;
}

// optional float Strength = 12;
inline bool WeatherMessage::has_strength() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WeatherMessage::set_has_strength() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WeatherMessage::clear_has_strength() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WeatherMessage::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline float WeatherMessage::strength() const {
  return strength_;
}
inline void WeatherMessage::set_strength(float value) {
  set_has_strength();
  strength_ = value;
}

// optional .WeatherMessage.GPS GPSdate = 13;
inline bool WeatherMessage::has_gpsdate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WeatherMessage::set_has_gpsdate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WeatherMessage::clear_has_gpsdate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WeatherMessage::clear_gpsdate() {
  if (gpsdate_ != NULL) gpsdate_->::WeatherMessage_GPS::Clear();
  clear_has_gpsdate();
}
inline const ::WeatherMessage_GPS& WeatherMessage::gpsdate() const {
  return gpsdate_ != NULL ? *gpsdate_ : *default_instance_->gpsdate_;
}
inline ::WeatherMessage_GPS* WeatherMessage::mutable_gpsdate() {
  set_has_gpsdate();
  if (gpsdate_ == NULL) gpsdate_ = new ::WeatherMessage_GPS;
  return gpsdate_;
}
inline ::WeatherMessage_GPS* WeatherMessage::release_gpsdate() {
  clear_has_gpsdate();
  ::WeatherMessage_GPS* temp = gpsdate_;
  gpsdate_ = NULL;
  return temp;
}
inline void WeatherMessage::set_allocated_gpsdate(::WeatherMessage_GPS* gpsdate) {
  delete gpsdate_;
  gpsdate_ = gpsdate;
  if (gpsdate) {
    set_has_gpsdate();
  } else {
    clear_has_gpsdate();
  }
}

// optional .WeatherMessage.DateTime Date = 14;
inline bool WeatherMessage::has_date() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void WeatherMessage::set_has_date() {
  _has_bits_[0] |= 0x00002000u;
}
inline void WeatherMessage::clear_has_date() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void WeatherMessage::clear_date() {
  if (date_ != NULL) date_->::WeatherMessage_DateTime::Clear();
  clear_has_date();
}
inline const ::WeatherMessage_DateTime& WeatherMessage::date() const {
  return date_ != NULL ? *date_ : *default_instance_->date_;
}
inline ::WeatherMessage_DateTime* WeatherMessage::mutable_date() {
  set_has_date();
  if (date_ == NULL) date_ = new ::WeatherMessage_DateTime;
  return date_;
}
inline ::WeatherMessage_DateTime* WeatherMessage::release_date() {
  clear_has_date();
  ::WeatherMessage_DateTime* temp = date_;
  date_ = NULL;
  return temp;
}
inline void WeatherMessage::set_allocated_date(::WeatherMessage_DateTime* date) {
  delete date_;
  date_ = date;
  if (date) {
    set_has_date();
  } else {
    clear_has_date();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WeatherMessage_2eproto__INCLUDED
