/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_MotecDriverStat_2eproto__INCLUDED
#define PROTOBUF_C_MotecDriverStat_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _MotecDriverStat MotecDriverStat;


/* --- enums --- */


/* --- messages --- */

struct  _MotecDriverStat
{
  ProtobufCMessage base;
  protobuf_c_boolean has_m_drivstatus;
  int32_t m_drivstatus;
  protobuf_c_boolean has_m_serialno;
  int32_t m_serialno;
  protobuf_c_boolean has_ctrl_rated_voltage;
  int32_t ctrl_rated_voltage;
  protobuf_c_boolean has_ctrl_rated_current;
  int32_t ctrl_rated_current;
  protobuf_c_boolean has_ctrl_address;
  int32_t ctrl_address;
  protobuf_c_boolean has_ctrl_baudrate;
  int32_t ctrl_baudrate;
  protobuf_c_boolean has_ctrl_rated_power;
  int32_t ctrl_rated_power;
  protobuf_c_boolean has_ctrl_encoder_ppr_hi;
  int32_t ctrl_encoder_ppr_hi;
  protobuf_c_boolean has_ctrl_encoder_ppr_lo;
  int32_t ctrl_encoder_ppr_lo;
  protobuf_c_boolean has_ctrl_quick_soft_stop;
  int32_t ctrl_quick_soft_stop;
  protobuf_c_boolean has_ctrl_clear_error_flag;
  int32_t ctrl_clear_error_flag;
  protobuf_c_boolean has_ctrl_quickstop_deceleration;
  int32_t ctrl_quickstop_deceleration;
  protobuf_c_boolean has_ctrl_softstop_deceleration;
  int32_t ctrl_softstop_deceleration;
  protobuf_c_boolean has_ctrl_current_kp;
  int32_t ctrl_current_kp;
  protobuf_c_boolean has_ctrl_current_ki;
  int32_t ctrl_current_ki;
  protobuf_c_boolean has_ctrl_position_kp;
  int32_t ctrl_position_kp;
  protobuf_c_boolean has_ctrl_position_ki;
  int32_t ctrl_position_ki;
  protobuf_c_boolean has_ctrl_velocity_kp;
  int32_t ctrl_velocity_kp;
  protobuf_c_boolean has_ctrl_velocity_ki;
  int32_t ctrl_velocity_ki;
  protobuf_c_boolean has_ctrl_velocity_feedf;
  int32_t ctrl_velocity_feedf;
  protobuf_c_boolean has_ctrl_acceleration_feedf;
  int32_t ctrl_acceleration_feedf;
  protobuf_c_boolean has_ctrl_reserved_148;
  int32_t ctrl_reserved_148;
  protobuf_c_boolean has_ctrl_axisq_actual;
  int32_t ctrl_axisq_actual;
  protobuf_c_boolean has_ctrl_hall_status;
  int32_t ctrl_hall_status;
  protobuf_c_boolean has_ctrl_motor_temperature;
  int32_t ctrl_motor_temperature;
  protobuf_c_boolean has_ctrl_digital_in_status;
  int32_t ctrl_digital_in_status;
  protobuf_c_boolean has_ctrl_contprot_current;
  int32_t ctrl_contprot_current;
  protobuf_c_boolean has_ctrl_maxvelocity_limit;
  int32_t ctrl_maxvelocity_limit;
  protobuf_c_boolean has_ctrl_max_current_limit;
  int32_t ctrl_max_current_limit;
  protobuf_c_boolean has_ctrl_i2t_time;
  int32_t ctrl_i2t_time;
  protobuf_c_boolean has_ctrl_ipm_temperature_alarm;
  int32_t ctrl_ipm_temperature_alarm;
  protobuf_c_boolean has_ctrl_ipm_temperature_fault;
  int32_t ctrl_ipm_temperature_fault;
  protobuf_c_boolean has_ctrl_i2t_actual;
  int32_t ctrl_i2t_actual;
  protobuf_c_boolean has_ctrl_reserved299;
  int32_t ctrl_reserved299;
  protobuf_c_boolean has_ctrl_ctrl_vel_actual;
  int32_t ctrl_ctrl_vel_actual;
};
#define MOTEC_DRIVER_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&motec_driver_stat__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/* MotecDriverStat methods */
void   motec_driver_stat__init
                     (MotecDriverStat         *message);
size_t motec_driver_stat__get_packed_size
                     (const MotecDriverStat   *message);
size_t motec_driver_stat__pack
                     (const MotecDriverStat   *message,
                      uint8_t             *out);
size_t motec_driver_stat__pack_to_buffer
                     (const MotecDriverStat   *message,
                      ProtobufCBuffer     *buffer);
MotecDriverStat *
       motec_driver_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   motec_driver_stat__free_unpacked
                     (MotecDriverStat *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MotecDriverStat_Closure)
                 (const MotecDriverStat *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor motec_driver_stat__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_MotecDriverStat_2eproto__INCLUDED */
