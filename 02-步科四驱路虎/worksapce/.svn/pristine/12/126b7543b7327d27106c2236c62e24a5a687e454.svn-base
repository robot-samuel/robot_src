// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BMSMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BMSMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BmsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BmsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BmsMessage_statusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BmsMessage_statusMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BmsMessage_alarmMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BmsMessage_alarmMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BMSMessage_2eproto() {
  protobuf_AddDesc_BMSMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BMSMessage.proto");
  GOOGLE_CHECK(file != NULL);
  BmsMessage_descriptor_ = file->message_type(0);
  static const int BmsMessage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, bms_soc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, bms_full_soc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, bms_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, bms_sys_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, bms_motor_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, bms_charg_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, bms_board_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, bms_battery_tempa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, bms_battery_tempb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, statusmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, alarmmsg_),
  };
  BmsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BmsMessage_descriptor_,
      BmsMessage::default_instance_,
      BmsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BmsMessage));
  BmsMessage_statusMessage_descriptor_ = BmsMessage_descriptor_->nested_type(0);
  static const int BmsMessage_statusMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_statusMessage, bms_status_charge_touch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_statusMessage, bms_status_charge_connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_statusMessage, bms_status_emergency_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_statusMessage, bms_status_switch_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_statusMessage, bms_status_motor24_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_statusMessage, bms_status_sys24_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_statusMessage, bms_status_heat_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_statusMessage, bms_status_fan_status_),
  };
  BmsMessage_statusMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BmsMessage_statusMessage_descriptor_,
      BmsMessage_statusMessage::default_instance_,
      BmsMessage_statusMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_statusMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_statusMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BmsMessage_statusMessage));
  BmsMessage_alarmMessage_descriptor_ = BmsMessage_descriptor_->nested_type(1);
  static const int BmsMessage_alarmMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_alarmMessage, bms_error_voltage_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_alarmMessage, bms_error_voltage_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_alarmMessage, bms_error_current_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_alarmMessage, bms_error_current_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_alarmMessage, bms_error_temperature_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_alarmMessage, bms_error_temperature_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_alarmMessage, bms_error_soc_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_alarmMessage, bms_error_soc_error_),
  };
  BmsMessage_alarmMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BmsMessage_alarmMessage_descriptor_,
      BmsMessage_alarmMessage::default_instance_,
      BmsMessage_alarmMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_alarmMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BmsMessage_alarmMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BmsMessage_alarmMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BMSMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BmsMessage_descriptor_, &BmsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BmsMessage_statusMessage_descriptor_, &BmsMessage_statusMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BmsMessage_alarmMessage_descriptor_, &BmsMessage_alarmMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BMSMessage_2eproto() {
  delete BmsMessage::default_instance_;
  delete BmsMessage_reflection_;
  delete BmsMessage_statusMessage::default_instance_;
  delete BmsMessage_statusMessage_reflection_;
  delete BmsMessage_alarmMessage::default_instance_;
  delete BmsMessage_alarmMessage_reflection_;
}

void protobuf_AddDesc_BMSMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020BMSMessage.proto\"\206\007\n\nBmsMessage\022\014\n\004Sta"
    "t\030\001 \001(\005\022\017\n\007BMS_SOC\030\002 \001(\005\022\024\n\014BMS_FULL_SOC"
    "\030\003 \001(\005\022\023\n\013BMS_Voltage\030\004 \001(\002\022\027\n\017BMS_sys_C"
    "urrent\030\005 \001(\002\022\031\n\021BMS_motor_Current\030\006 \001(\002\022"
    "\031\n\021BMS_charg_Current\030\007 \001(\002\022\026\n\016BMS_board_"
    "temp\030\010 \001(\005\022\031\n\021BMS_battery_tempA\030\t \001(\005\022\031\n"
    "\021BMS_battery_tempB\030\n \001(\005\022,\n\tstatusMsg\030\013 "
    "\001(\0132\031.BmsMessage.statusMessage\022*\n\010alarmM"
    "sg\030\014 \001(\0132\030.BmsMessage.alarmMessage\032\235\002\n\rs"
    "tatusMessage\022\037\n\027BMS_status_Charge_Touch\030"
    "\001 \001(\010\022!\n\031BMS_status_Charge_Connect\030\002 \001(\010"
    "\022#\n\033BMS_status_Emergency_Status\030\003 \001(\010\022 \n"
    "\030BMS_status_Switch_Status\030\004 \001(\010\022!\n\031BMS_s"
    "tatus_Motor24_Status\030\005 \001(\010\022\037\n\027BMS_status"
    "_SYS24_Status\030\006 \001(\010\022\036\n\026BMS_status_Heat_S"
    "tatus\030\007 \001(\010\022\035\n\025BMS_status_Fan_Status\030\010 \001"
    "(\010\032\226\002\n\014alarmMessage\022\037\n\027BMS_error_Voltage"
    "_Alarm\030\001 \001(\010\022\037\n\027BMS_error_Voltage_Error\030"
    "\002 \001(\010\022\037\n\027BMS_error_Current_Alarm\030\003 \001(\010\022\037"
    "\n\027BMS_error_Current_Error\030\004 \001(\010\022#\n\033BMS_e"
    "rror_Temperature_Alarm\030\005 \001(\010\022#\n\033BMS_erro"
    "r_Temperature_Error\030\006 \001(\010\022\033\n\023BMS_error_S"
    "OC_Alarm\030\007 \001(\010\022\033\n\023BMS_error_SOC_Error\030\010 "
    "\001(\010", 923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BMSMessage.proto", &protobuf_RegisterTypes);
  BmsMessage::default_instance_ = new BmsMessage();
  BmsMessage_statusMessage::default_instance_ = new BmsMessage_statusMessage();
  BmsMessage_alarmMessage::default_instance_ = new BmsMessage_alarmMessage();
  BmsMessage::default_instance_->InitAsDefaultInstance();
  BmsMessage_statusMessage::default_instance_->InitAsDefaultInstance();
  BmsMessage_alarmMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BMSMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BMSMessage_2eproto {
  StaticDescriptorInitializer_BMSMessage_2eproto() {
    protobuf_AddDesc_BMSMessage_2eproto();
  }
} static_descriptor_initializer_BMSMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BmsMessage_statusMessage::kBMSStatusChargeTouchFieldNumber;
const int BmsMessage_statusMessage::kBMSStatusChargeConnectFieldNumber;
const int BmsMessage_statusMessage::kBMSStatusEmergencyStatusFieldNumber;
const int BmsMessage_statusMessage::kBMSStatusSwitchStatusFieldNumber;
const int BmsMessage_statusMessage::kBMSStatusMotor24StatusFieldNumber;
const int BmsMessage_statusMessage::kBMSStatusSYS24StatusFieldNumber;
const int BmsMessage_statusMessage::kBMSStatusHeatStatusFieldNumber;
const int BmsMessage_statusMessage::kBMSStatusFanStatusFieldNumber;
#endif  // !_MSC_VER

BmsMessage_statusMessage::BmsMessage_statusMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BmsMessage_statusMessage::InitAsDefaultInstance() {
}

BmsMessage_statusMessage::BmsMessage_statusMessage(const BmsMessage_statusMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BmsMessage_statusMessage::SharedCtor() {
  _cached_size_ = 0;
  bms_status_charge_touch_ = false;
  bms_status_charge_connect_ = false;
  bms_status_emergency_status_ = false;
  bms_status_switch_status_ = false;
  bms_status_motor24_status_ = false;
  bms_status_sys24_status_ = false;
  bms_status_heat_status_ = false;
  bms_status_fan_status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BmsMessage_statusMessage::~BmsMessage_statusMessage() {
  SharedDtor();
}

void BmsMessage_statusMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BmsMessage_statusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BmsMessage_statusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BmsMessage_statusMessage_descriptor_;
}

const BmsMessage_statusMessage& BmsMessage_statusMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BMSMessage_2eproto();
  return *default_instance_;
}

BmsMessage_statusMessage* BmsMessage_statusMessage::default_instance_ = NULL;

BmsMessage_statusMessage* BmsMessage_statusMessage::New() const {
  return new BmsMessage_statusMessage;
}

void BmsMessage_statusMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bms_status_charge_touch_ = false;
    bms_status_charge_connect_ = false;
    bms_status_emergency_status_ = false;
    bms_status_switch_status_ = false;
    bms_status_motor24_status_ = false;
    bms_status_sys24_status_ = false;
    bms_status_heat_status_ = false;
    bms_status_fan_status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BmsMessage_statusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool BMS_status_Charge_Touch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_status_charge_touch_)));
          set_has_bms_status_charge_touch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BMS_status_Charge_Connect;
        break;
      }

      // optional bool BMS_status_Charge_Connect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_status_Charge_Connect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_status_charge_connect_)));
          set_has_bms_status_charge_connect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BMS_status_Emergency_Status;
        break;
      }

      // optional bool BMS_status_Emergency_Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_status_Emergency_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_status_emergency_status_)));
          set_has_bms_status_emergency_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BMS_status_Switch_Status;
        break;
      }

      // optional bool BMS_status_Switch_Status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_status_Switch_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_status_switch_status_)));
          set_has_bms_status_switch_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BMS_status_Motor24_Status;
        break;
      }

      // optional bool BMS_status_Motor24_Status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_status_Motor24_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_status_motor24_status_)));
          set_has_bms_status_motor24_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_BMS_status_SYS24_Status;
        break;
      }

      // optional bool BMS_status_SYS24_Status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_status_SYS24_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_status_sys24_status_)));
          set_has_bms_status_sys24_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BMS_status_Heat_Status;
        break;
      }

      // optional bool BMS_status_Heat_Status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_status_Heat_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_status_heat_status_)));
          set_has_bms_status_heat_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BMS_status_Fan_Status;
        break;
      }

      // optional bool BMS_status_Fan_Status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_status_Fan_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_status_fan_status_)));
          set_has_bms_status_fan_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BmsMessage_statusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool BMS_status_Charge_Touch = 1;
  if (has_bms_status_charge_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bms_status_charge_touch(), output);
  }

  // optional bool BMS_status_Charge_Connect = 2;
  if (has_bms_status_charge_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bms_status_charge_connect(), output);
  }

  // optional bool BMS_status_Emergency_Status = 3;
  if (has_bms_status_emergency_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bms_status_emergency_status(), output);
  }

  // optional bool BMS_status_Switch_Status = 4;
  if (has_bms_status_switch_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bms_status_switch_status(), output);
  }

  // optional bool BMS_status_Motor24_Status = 5;
  if (has_bms_status_motor24_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bms_status_motor24_status(), output);
  }

  // optional bool BMS_status_SYS24_Status = 6;
  if (has_bms_status_sys24_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bms_status_sys24_status(), output);
  }

  // optional bool BMS_status_Heat_Status = 7;
  if (has_bms_status_heat_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bms_status_heat_status(), output);
  }

  // optional bool BMS_status_Fan_Status = 8;
  if (has_bms_status_fan_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bms_status_fan_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BmsMessage_statusMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool BMS_status_Charge_Touch = 1;
  if (has_bms_status_charge_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bms_status_charge_touch(), target);
  }

  // optional bool BMS_status_Charge_Connect = 2;
  if (has_bms_status_charge_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bms_status_charge_connect(), target);
  }

  // optional bool BMS_status_Emergency_Status = 3;
  if (has_bms_status_emergency_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bms_status_emergency_status(), target);
  }

  // optional bool BMS_status_Switch_Status = 4;
  if (has_bms_status_switch_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bms_status_switch_status(), target);
  }

  // optional bool BMS_status_Motor24_Status = 5;
  if (has_bms_status_motor24_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bms_status_motor24_status(), target);
  }

  // optional bool BMS_status_SYS24_Status = 6;
  if (has_bms_status_sys24_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bms_status_sys24_status(), target);
  }

  // optional bool BMS_status_Heat_Status = 7;
  if (has_bms_status_heat_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bms_status_heat_status(), target);
  }

  // optional bool BMS_status_Fan_Status = 8;
  if (has_bms_status_fan_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bms_status_fan_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BmsMessage_statusMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool BMS_status_Charge_Touch = 1;
    if (has_bms_status_charge_touch()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_status_Charge_Connect = 2;
    if (has_bms_status_charge_connect()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_status_Emergency_Status = 3;
    if (has_bms_status_emergency_status()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_status_Switch_Status = 4;
    if (has_bms_status_switch_status()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_status_Motor24_Status = 5;
    if (has_bms_status_motor24_status()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_status_SYS24_Status = 6;
    if (has_bms_status_sys24_status()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_status_Heat_Status = 7;
    if (has_bms_status_heat_status()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_status_Fan_Status = 8;
    if (has_bms_status_fan_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BmsMessage_statusMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BmsMessage_statusMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BmsMessage_statusMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BmsMessage_statusMessage::MergeFrom(const BmsMessage_statusMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bms_status_charge_touch()) {
      set_bms_status_charge_touch(from.bms_status_charge_touch());
    }
    if (from.has_bms_status_charge_connect()) {
      set_bms_status_charge_connect(from.bms_status_charge_connect());
    }
    if (from.has_bms_status_emergency_status()) {
      set_bms_status_emergency_status(from.bms_status_emergency_status());
    }
    if (from.has_bms_status_switch_status()) {
      set_bms_status_switch_status(from.bms_status_switch_status());
    }
    if (from.has_bms_status_motor24_status()) {
      set_bms_status_motor24_status(from.bms_status_motor24_status());
    }
    if (from.has_bms_status_sys24_status()) {
      set_bms_status_sys24_status(from.bms_status_sys24_status());
    }
    if (from.has_bms_status_heat_status()) {
      set_bms_status_heat_status(from.bms_status_heat_status());
    }
    if (from.has_bms_status_fan_status()) {
      set_bms_status_fan_status(from.bms_status_fan_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BmsMessage_statusMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BmsMessage_statusMessage::CopyFrom(const BmsMessage_statusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BmsMessage_statusMessage::IsInitialized() const {

  return true;
}

void BmsMessage_statusMessage::Swap(BmsMessage_statusMessage* other) {
  if (other != this) {
    std::swap(bms_status_charge_touch_, other->bms_status_charge_touch_);
    std::swap(bms_status_charge_connect_, other->bms_status_charge_connect_);
    std::swap(bms_status_emergency_status_, other->bms_status_emergency_status_);
    std::swap(bms_status_switch_status_, other->bms_status_switch_status_);
    std::swap(bms_status_motor24_status_, other->bms_status_motor24_status_);
    std::swap(bms_status_sys24_status_, other->bms_status_sys24_status_);
    std::swap(bms_status_heat_status_, other->bms_status_heat_status_);
    std::swap(bms_status_fan_status_, other->bms_status_fan_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BmsMessage_statusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BmsMessage_statusMessage_descriptor_;
  metadata.reflection = BmsMessage_statusMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BmsMessage_alarmMessage::kBMSErrorVoltageAlarmFieldNumber;
const int BmsMessage_alarmMessage::kBMSErrorVoltageErrorFieldNumber;
const int BmsMessage_alarmMessage::kBMSErrorCurrentAlarmFieldNumber;
const int BmsMessage_alarmMessage::kBMSErrorCurrentErrorFieldNumber;
const int BmsMessage_alarmMessage::kBMSErrorTemperatureAlarmFieldNumber;
const int BmsMessage_alarmMessage::kBMSErrorTemperatureErrorFieldNumber;
const int BmsMessage_alarmMessage::kBMSErrorSOCAlarmFieldNumber;
const int BmsMessage_alarmMessage::kBMSErrorSOCErrorFieldNumber;
#endif  // !_MSC_VER

BmsMessage_alarmMessage::BmsMessage_alarmMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BmsMessage_alarmMessage::InitAsDefaultInstance() {
}

BmsMessage_alarmMessage::BmsMessage_alarmMessage(const BmsMessage_alarmMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BmsMessage_alarmMessage::SharedCtor() {
  _cached_size_ = 0;
  bms_error_voltage_alarm_ = false;
  bms_error_voltage_error_ = false;
  bms_error_current_alarm_ = false;
  bms_error_current_error_ = false;
  bms_error_temperature_alarm_ = false;
  bms_error_temperature_error_ = false;
  bms_error_soc_alarm_ = false;
  bms_error_soc_error_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BmsMessage_alarmMessage::~BmsMessage_alarmMessage() {
  SharedDtor();
}

void BmsMessage_alarmMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BmsMessage_alarmMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BmsMessage_alarmMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BmsMessage_alarmMessage_descriptor_;
}

const BmsMessage_alarmMessage& BmsMessage_alarmMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BMSMessage_2eproto();
  return *default_instance_;
}

BmsMessage_alarmMessage* BmsMessage_alarmMessage::default_instance_ = NULL;

BmsMessage_alarmMessage* BmsMessage_alarmMessage::New() const {
  return new BmsMessage_alarmMessage;
}

void BmsMessage_alarmMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bms_error_voltage_alarm_ = false;
    bms_error_voltage_error_ = false;
    bms_error_current_alarm_ = false;
    bms_error_current_error_ = false;
    bms_error_temperature_alarm_ = false;
    bms_error_temperature_error_ = false;
    bms_error_soc_alarm_ = false;
    bms_error_soc_error_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BmsMessage_alarmMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool BMS_error_Voltage_Alarm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_error_voltage_alarm_)));
          set_has_bms_error_voltage_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BMS_error_Voltage_Error;
        break;
      }

      // optional bool BMS_error_Voltage_Error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_error_Voltage_Error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_error_voltage_error_)));
          set_has_bms_error_voltage_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BMS_error_Current_Alarm;
        break;
      }

      // optional bool BMS_error_Current_Alarm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_error_Current_Alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_error_current_alarm_)));
          set_has_bms_error_current_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BMS_error_Current_Error;
        break;
      }

      // optional bool BMS_error_Current_Error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_error_Current_Error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_error_current_error_)));
          set_has_bms_error_current_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BMS_error_Temperature_Alarm;
        break;
      }

      // optional bool BMS_error_Temperature_Alarm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_error_Temperature_Alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_error_temperature_alarm_)));
          set_has_bms_error_temperature_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_BMS_error_Temperature_Error;
        break;
      }

      // optional bool BMS_error_Temperature_Error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_error_Temperature_Error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_error_temperature_error_)));
          set_has_bms_error_temperature_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BMS_error_SOC_Alarm;
        break;
      }

      // optional bool BMS_error_SOC_Alarm = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_error_SOC_Alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_error_soc_alarm_)));
          set_has_bms_error_soc_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BMS_error_SOC_Error;
        break;
      }

      // optional bool BMS_error_SOC_Error = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_error_SOC_Error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bms_error_soc_error_)));
          set_has_bms_error_soc_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BmsMessage_alarmMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool BMS_error_Voltage_Alarm = 1;
  if (has_bms_error_voltage_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bms_error_voltage_alarm(), output);
  }

  // optional bool BMS_error_Voltage_Error = 2;
  if (has_bms_error_voltage_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bms_error_voltage_error(), output);
  }

  // optional bool BMS_error_Current_Alarm = 3;
  if (has_bms_error_current_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bms_error_current_alarm(), output);
  }

  // optional bool BMS_error_Current_Error = 4;
  if (has_bms_error_current_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bms_error_current_error(), output);
  }

  // optional bool BMS_error_Temperature_Alarm = 5;
  if (has_bms_error_temperature_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bms_error_temperature_alarm(), output);
  }

  // optional bool BMS_error_Temperature_Error = 6;
  if (has_bms_error_temperature_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bms_error_temperature_error(), output);
  }

  // optional bool BMS_error_SOC_Alarm = 7;
  if (has_bms_error_soc_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bms_error_soc_alarm(), output);
  }

  // optional bool BMS_error_SOC_Error = 8;
  if (has_bms_error_soc_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bms_error_soc_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BmsMessage_alarmMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool BMS_error_Voltage_Alarm = 1;
  if (has_bms_error_voltage_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bms_error_voltage_alarm(), target);
  }

  // optional bool BMS_error_Voltage_Error = 2;
  if (has_bms_error_voltage_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bms_error_voltage_error(), target);
  }

  // optional bool BMS_error_Current_Alarm = 3;
  if (has_bms_error_current_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bms_error_current_alarm(), target);
  }

  // optional bool BMS_error_Current_Error = 4;
  if (has_bms_error_current_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bms_error_current_error(), target);
  }

  // optional bool BMS_error_Temperature_Alarm = 5;
  if (has_bms_error_temperature_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bms_error_temperature_alarm(), target);
  }

  // optional bool BMS_error_Temperature_Error = 6;
  if (has_bms_error_temperature_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bms_error_temperature_error(), target);
  }

  // optional bool BMS_error_SOC_Alarm = 7;
  if (has_bms_error_soc_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bms_error_soc_alarm(), target);
  }

  // optional bool BMS_error_SOC_Error = 8;
  if (has_bms_error_soc_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bms_error_soc_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BmsMessage_alarmMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool BMS_error_Voltage_Alarm = 1;
    if (has_bms_error_voltage_alarm()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_error_Voltage_Error = 2;
    if (has_bms_error_voltage_error()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_error_Current_Alarm = 3;
    if (has_bms_error_current_alarm()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_error_Current_Error = 4;
    if (has_bms_error_current_error()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_error_Temperature_Alarm = 5;
    if (has_bms_error_temperature_alarm()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_error_Temperature_Error = 6;
    if (has_bms_error_temperature_error()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_error_SOC_Alarm = 7;
    if (has_bms_error_soc_alarm()) {
      total_size += 1 + 1;
    }

    // optional bool BMS_error_SOC_Error = 8;
    if (has_bms_error_soc_error()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BmsMessage_alarmMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BmsMessage_alarmMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BmsMessage_alarmMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BmsMessage_alarmMessage::MergeFrom(const BmsMessage_alarmMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bms_error_voltage_alarm()) {
      set_bms_error_voltage_alarm(from.bms_error_voltage_alarm());
    }
    if (from.has_bms_error_voltage_error()) {
      set_bms_error_voltage_error(from.bms_error_voltage_error());
    }
    if (from.has_bms_error_current_alarm()) {
      set_bms_error_current_alarm(from.bms_error_current_alarm());
    }
    if (from.has_bms_error_current_error()) {
      set_bms_error_current_error(from.bms_error_current_error());
    }
    if (from.has_bms_error_temperature_alarm()) {
      set_bms_error_temperature_alarm(from.bms_error_temperature_alarm());
    }
    if (from.has_bms_error_temperature_error()) {
      set_bms_error_temperature_error(from.bms_error_temperature_error());
    }
    if (from.has_bms_error_soc_alarm()) {
      set_bms_error_soc_alarm(from.bms_error_soc_alarm());
    }
    if (from.has_bms_error_soc_error()) {
      set_bms_error_soc_error(from.bms_error_soc_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BmsMessage_alarmMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BmsMessage_alarmMessage::CopyFrom(const BmsMessage_alarmMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BmsMessage_alarmMessage::IsInitialized() const {

  return true;
}

void BmsMessage_alarmMessage::Swap(BmsMessage_alarmMessage* other) {
  if (other != this) {
    std::swap(bms_error_voltage_alarm_, other->bms_error_voltage_alarm_);
    std::swap(bms_error_voltage_error_, other->bms_error_voltage_error_);
    std::swap(bms_error_current_alarm_, other->bms_error_current_alarm_);
    std::swap(bms_error_current_error_, other->bms_error_current_error_);
    std::swap(bms_error_temperature_alarm_, other->bms_error_temperature_alarm_);
    std::swap(bms_error_temperature_error_, other->bms_error_temperature_error_);
    std::swap(bms_error_soc_alarm_, other->bms_error_soc_alarm_);
    std::swap(bms_error_soc_error_, other->bms_error_soc_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BmsMessage_alarmMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BmsMessage_alarmMessage_descriptor_;
  metadata.reflection = BmsMessage_alarmMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BmsMessage::kStatFieldNumber;
const int BmsMessage::kBMSSOCFieldNumber;
const int BmsMessage::kBMSFULLSOCFieldNumber;
const int BmsMessage::kBMSVoltageFieldNumber;
const int BmsMessage::kBMSSysCurrentFieldNumber;
const int BmsMessage::kBMSMotorCurrentFieldNumber;
const int BmsMessage::kBMSChargCurrentFieldNumber;
const int BmsMessage::kBMSBoardTempFieldNumber;
const int BmsMessage::kBMSBatteryTempAFieldNumber;
const int BmsMessage::kBMSBatteryTempBFieldNumber;
const int BmsMessage::kStatusMsgFieldNumber;
const int BmsMessage::kAlarmMsgFieldNumber;
#endif  // !_MSC_VER

BmsMessage::BmsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BmsMessage::InitAsDefaultInstance() {
  statusmsg_ = const_cast< ::BmsMessage_statusMessage*>(&::BmsMessage_statusMessage::default_instance());
  alarmmsg_ = const_cast< ::BmsMessage_alarmMessage*>(&::BmsMessage_alarmMessage::default_instance());
}

BmsMessage::BmsMessage(const BmsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BmsMessage::SharedCtor() {
  _cached_size_ = 0;
  stat_ = 0;
  bms_soc_ = 0;
  bms_full_soc_ = 0;
  bms_voltage_ = 0;
  bms_sys_current_ = 0;
  bms_motor_current_ = 0;
  bms_charg_current_ = 0;
  bms_board_temp_ = 0;
  bms_battery_tempa_ = 0;
  bms_battery_tempb_ = 0;
  statusmsg_ = NULL;
  alarmmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BmsMessage::~BmsMessage() {
  SharedDtor();
}

void BmsMessage::SharedDtor() {
  if (this != default_instance_) {
    delete statusmsg_;
    delete alarmmsg_;
  }
}

void BmsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BmsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BmsMessage_descriptor_;
}

const BmsMessage& BmsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BMSMessage_2eproto();
  return *default_instance_;
}

BmsMessage* BmsMessage::default_instance_ = NULL;

BmsMessage* BmsMessage::New() const {
  return new BmsMessage;
}

void BmsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_ = 0;
    bms_soc_ = 0;
    bms_full_soc_ = 0;
    bms_voltage_ = 0;
    bms_sys_current_ = 0;
    bms_motor_current_ = 0;
    bms_charg_current_ = 0;
    bms_board_temp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bms_battery_tempa_ = 0;
    bms_battery_tempb_ = 0;
    if (has_statusmsg()) {
      if (statusmsg_ != NULL) statusmsg_->::BmsMessage_statusMessage::Clear();
    }
    if (has_alarmmsg()) {
      if (alarmmsg_ != NULL) alarmmsg_->::BmsMessage_alarmMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BmsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BMS_SOC;
        break;
      }

      // optional int32 BMS_SOC = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_SOC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bms_soc_)));
          set_has_bms_soc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BMS_FULL_SOC;
        break;
      }

      // optional int32 BMS_FULL_SOC = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_FULL_SOC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bms_full_soc_)));
          set_has_bms_full_soc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_BMS_Voltage;
        break;
      }

      // optional float BMS_Voltage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BMS_Voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bms_voltage_)));
          set_has_bms_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_BMS_sys_Current;
        break;
      }

      // optional float BMS_sys_Current = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BMS_sys_Current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bms_sys_current_)));
          set_has_bms_sys_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_BMS_motor_Current;
        break;
      }

      // optional float BMS_motor_Current = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BMS_motor_Current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bms_motor_current_)));
          set_has_bms_motor_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_BMS_charg_Current;
        break;
      }

      // optional float BMS_charg_Current = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BMS_charg_Current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bms_charg_current_)));
          set_has_bms_charg_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BMS_board_temp;
        break;
      }

      // optional int32 BMS_board_temp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_board_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bms_board_temp_)));
          set_has_bms_board_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_BMS_battery_tempA;
        break;
      }

      // optional int32 BMS_battery_tempA = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_battery_tempA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bms_battery_tempa_)));
          set_has_bms_battery_tempa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BMS_battery_tempB;
        break;
      }

      // optional int32 BMS_battery_tempB = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BMS_battery_tempB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bms_battery_tempb_)));
          set_has_bms_battery_tempb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_statusMsg;
        break;
      }

      // optional .BmsMessage.statusMessage statusMsg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statusMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statusmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_alarmMsg;
        break;
      }

      // optional .BmsMessage.alarmMessage alarmMsg = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarmmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BmsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Stat = 1;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stat(), output);
  }

  // optional int32 BMS_SOC = 2;
  if (has_bms_soc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bms_soc(), output);
  }

  // optional int32 BMS_FULL_SOC = 3;
  if (has_bms_full_soc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bms_full_soc(), output);
  }

  // optional float BMS_Voltage = 4;
  if (has_bms_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bms_voltage(), output);
  }

  // optional float BMS_sys_Current = 5;
  if (has_bms_sys_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bms_sys_current(), output);
  }

  // optional float BMS_motor_Current = 6;
  if (has_bms_motor_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->bms_motor_current(), output);
  }

  // optional float BMS_charg_Current = 7;
  if (has_bms_charg_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->bms_charg_current(), output);
  }

  // optional int32 BMS_board_temp = 8;
  if (has_bms_board_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bms_board_temp(), output);
  }

  // optional int32 BMS_battery_tempA = 9;
  if (has_bms_battery_tempa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bms_battery_tempa(), output);
  }

  // optional int32 BMS_battery_tempB = 10;
  if (has_bms_battery_tempb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bms_battery_tempb(), output);
  }

  // optional .BmsMessage.statusMessage statusMsg = 11;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->statusmsg(), output);
  }

  // optional .BmsMessage.alarmMessage alarmMsg = 12;
  if (has_alarmmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->alarmmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BmsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Stat = 1;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stat(), target);
  }

  // optional int32 BMS_SOC = 2;
  if (has_bms_soc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bms_soc(), target);
  }

  // optional int32 BMS_FULL_SOC = 3;
  if (has_bms_full_soc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bms_full_soc(), target);
  }

  // optional float BMS_Voltage = 4;
  if (has_bms_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bms_voltage(), target);
  }

  // optional float BMS_sys_Current = 5;
  if (has_bms_sys_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bms_sys_current(), target);
  }

  // optional float BMS_motor_Current = 6;
  if (has_bms_motor_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->bms_motor_current(), target);
  }

  // optional float BMS_charg_Current = 7;
  if (has_bms_charg_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->bms_charg_current(), target);
  }

  // optional int32 BMS_board_temp = 8;
  if (has_bms_board_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bms_board_temp(), target);
  }

  // optional int32 BMS_battery_tempA = 9;
  if (has_bms_battery_tempa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bms_battery_tempa(), target);
  }

  // optional int32 BMS_battery_tempB = 10;
  if (has_bms_battery_tempb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bms_battery_tempb(), target);
  }

  // optional .BmsMessage.statusMessage statusMsg = 11;
  if (has_statusmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->statusmsg(), target);
  }

  // optional .BmsMessage.alarmMessage alarmMsg = 12;
  if (has_alarmmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->alarmmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BmsMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Stat = 1;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat());
    }

    // optional int32 BMS_SOC = 2;
    if (has_bms_soc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bms_soc());
    }

    // optional int32 BMS_FULL_SOC = 3;
    if (has_bms_full_soc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bms_full_soc());
    }

    // optional float BMS_Voltage = 4;
    if (has_bms_voltage()) {
      total_size += 1 + 4;
    }

    // optional float BMS_sys_Current = 5;
    if (has_bms_sys_current()) {
      total_size += 1 + 4;
    }

    // optional float BMS_motor_Current = 6;
    if (has_bms_motor_current()) {
      total_size += 1 + 4;
    }

    // optional float BMS_charg_Current = 7;
    if (has_bms_charg_current()) {
      total_size += 1 + 4;
    }

    // optional int32 BMS_board_temp = 8;
    if (has_bms_board_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bms_board_temp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 BMS_battery_tempA = 9;
    if (has_bms_battery_tempa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bms_battery_tempa());
    }

    // optional int32 BMS_battery_tempB = 10;
    if (has_bms_battery_tempb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bms_battery_tempb());
    }

    // optional .BmsMessage.statusMessage statusMsg = 11;
    if (has_statusmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statusmsg());
    }

    // optional .BmsMessage.alarmMessage alarmMsg = 12;
    if (has_alarmmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarmmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BmsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BmsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BmsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BmsMessage::MergeFrom(const BmsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat()) {
      set_stat(from.stat());
    }
    if (from.has_bms_soc()) {
      set_bms_soc(from.bms_soc());
    }
    if (from.has_bms_full_soc()) {
      set_bms_full_soc(from.bms_full_soc());
    }
    if (from.has_bms_voltage()) {
      set_bms_voltage(from.bms_voltage());
    }
    if (from.has_bms_sys_current()) {
      set_bms_sys_current(from.bms_sys_current());
    }
    if (from.has_bms_motor_current()) {
      set_bms_motor_current(from.bms_motor_current());
    }
    if (from.has_bms_charg_current()) {
      set_bms_charg_current(from.bms_charg_current());
    }
    if (from.has_bms_board_temp()) {
      set_bms_board_temp(from.bms_board_temp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bms_battery_tempa()) {
      set_bms_battery_tempa(from.bms_battery_tempa());
    }
    if (from.has_bms_battery_tempb()) {
      set_bms_battery_tempb(from.bms_battery_tempb());
    }
    if (from.has_statusmsg()) {
      mutable_statusmsg()->::BmsMessage_statusMessage::MergeFrom(from.statusmsg());
    }
    if (from.has_alarmmsg()) {
      mutable_alarmmsg()->::BmsMessage_alarmMessage::MergeFrom(from.alarmmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BmsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BmsMessage::CopyFrom(const BmsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BmsMessage::IsInitialized() const {

  return true;
}

void BmsMessage::Swap(BmsMessage* other) {
  if (other != this) {
    std::swap(stat_, other->stat_);
    std::swap(bms_soc_, other->bms_soc_);
    std::swap(bms_full_soc_, other->bms_full_soc_);
    std::swap(bms_voltage_, other->bms_voltage_);
    std::swap(bms_sys_current_, other->bms_sys_current_);
    std::swap(bms_motor_current_, other->bms_motor_current_);
    std::swap(bms_charg_current_, other->bms_charg_current_);
    std::swap(bms_board_temp_, other->bms_board_temp_);
    std::swap(bms_battery_tempa_, other->bms_battery_tempa_);
    std::swap(bms_battery_tempb_, other->bms_battery_tempb_);
    std::swap(statusmsg_, other->statusmsg_);
    std::swap(alarmmsg_, other->alarmmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BmsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BmsMessage_descriptor_;
  metadata.reflection = BmsMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
