/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ControllerMessage.proto */

#ifndef PROTOBUF_C_ControllerMessage_2eproto__INCLUDED
#define PROTOBUF_C_ControllerMessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ExternSensor.pb-c.h"
#include "BMSMessage.pb-c.h"
#include "ErrorMessage.pb-c.h"
#include "AlarmMessage.pb-c.h"

typedef struct _ControllerMessage ControllerMessage;
typedef struct _ControllerMessage__Dirver ControllerMessage__Dirver;


/* --- enums --- */


/* --- messages --- */

struct  _ControllerMessage__Dirver
{
  ProtobufCMessage base;
  /*
   *驱动器状态  0-不在线  1 正常  其余都为故障
   */
  protobuf_c_boolean has_device_status;
  int32_t device_status;
  /*
   *驱动器232 通信地址
   */
  protobuf_c_boolean has_device_add;
  int32_t device_add;
  /*
   *实际速度
   */
  protobuf_c_boolean has_actvelocity;
  int32_t actvelocity;
  /*
   *设定速度
   */
  protobuf_c_boolean has_setvelocity;
  int32_t setvelocity;
  /*
   *母线电压
   */
  protobuf_c_boolean has_ctrl_dc_voltage;
  float ctrl_dc_voltage;
  /*
   *功率模块温度
   */
  protobuf_c_boolean has_ctrl_ipm_temperature;
  float ctrl_ipm_temperature;
  /*
   *电机的实际位置
   */
  protobuf_c_boolean has_actualpos;
  int32_t actualpos;
  /*
   *急停开关的输入状态
   */
  protobuf_c_boolean has_emergencyinputvalue;
  protobuf_c_boolean emergencyinputvalue;
  /*
   *错误信息	
   */
  char *error;
  /*
   *驱动器输出电流（电机实时电流）
   */
  protobuf_c_boolean has_actcurrent;
  float actcurrent;
};
#define CONTROLLER_MESSAGE__DIRVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&controller_message__dirver__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0 }


struct  _ControllerMessage
{
  ProtobufCMessage base;
  /*
   *控制器系统状态(正常/报警) 0-故障  1 正常
   */
  protobuf_c_boolean has_stat;
  int32_t stat;
  /*
   *驱动器状态  至少4路
   */
  size_t n_dirvermessage;
  ControllerMessage__Dirver **dirvermessage;
  /*
   *外围传感器状态
   */
  ExternSensor *sensormsg;
  /*
   *控制设备ID 0-无 1-NET_USER 2-RS232_USER 3-LASER_USER 4-REMOTE_JOY 5-USBREMOTE_JOY  
   */
  protobuf_c_boolean has_ctrl_device;
  int32_t ctrl_device;
  /*
   *BMS模块状态 
   */
  BmsMessage *bmsmsg;
  /*
   *控制器错误消息 
   */
  ErrorMessage *errormsg;
  /*
   *控制器告警消息
   */
  AlarmMessage *alarmmsg;
  /*
   *整车的实际线速度
   */
  protobuf_c_boolean has_linevelocity;
  float linevelocity;
  /*
   *整车的角速度
   */
  protobuf_c_boolean has_thvelocity;
  float thvelocity;
};
#define CONTROLLER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&controller_message__descriptor) \
    , 0,0, 0,NULL, NULL, 0,0, NULL, NULL, NULL, 0,0, 0,0 }


/* ControllerMessage__Dirver methods */
void   controller_message__dirver__init
                     (ControllerMessage__Dirver         *message);
/* ControllerMessage methods */
void   controller_message__init
                     (ControllerMessage         *message);
size_t controller_message__get_packed_size
                     (const ControllerMessage   *message);
size_t controller_message__pack
                     (const ControllerMessage   *message,
                      uint8_t             *out);
size_t controller_message__pack_to_buffer
                     (const ControllerMessage   *message,
                      ProtobufCBuffer     *buffer);
ControllerMessage *
       controller_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   controller_message__free_unpacked
                     (ControllerMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ControllerMessage__Dirver_Closure)
                 (const ControllerMessage__Dirver *message,
                  void *closure_data);
typedef void (*ControllerMessage_Closure)
                 (const ControllerMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor controller_message__descriptor;
extern const ProtobufCMessageDescriptor controller_message__dirver__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ControllerMessage_2eproto__INCLUDED */
