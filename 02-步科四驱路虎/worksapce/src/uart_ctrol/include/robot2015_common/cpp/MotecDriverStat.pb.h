// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MotecDriverStat.proto

#ifndef PROTOBUF_MotecDriverStat_2eproto__INCLUDED
#define PROTOBUF_MotecDriverStat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MotecDriverStat_2eproto();
void protobuf_AssignDesc_MotecDriverStat_2eproto();
void protobuf_ShutdownFile_MotecDriverStat_2eproto();

class MotecDriverStat;

// ===================================================================

class MotecDriverStat : public ::google::protobuf::Message {
 public:
  MotecDriverStat();
  virtual ~MotecDriverStat();

  MotecDriverStat(const MotecDriverStat& from);

  inline MotecDriverStat& operator=(const MotecDriverStat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotecDriverStat& default_instance();

  void Swap(MotecDriverStat* other);

  // implements Message ----------------------------------------------

  MotecDriverStat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotecDriverStat& from);
  void MergeFrom(const MotecDriverStat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_DrivStatus = 1;
  inline bool has_m_drivstatus() const;
  inline void clear_m_drivstatus();
  static const int kMDrivStatusFieldNumber = 1;
  inline ::google::protobuf::int32 m_drivstatus() const;
  inline void set_m_drivstatus(::google::protobuf::int32 value);

  // optional int32 m_SerialNo = 2;
  inline bool has_m_serialno() const;
  inline void clear_m_serialno();
  static const int kMSerialNoFieldNumber = 2;
  inline ::google::protobuf::int32 m_serialno() const;
  inline void set_m_serialno(::google::protobuf::int32 value);

  // optional int32 CTRL_RATED_VOLTAGE = 3;
  inline bool has_ctrl_rated_voltage() const;
  inline void clear_ctrl_rated_voltage();
  static const int kCTRLRATEDVOLTAGEFieldNumber = 3;
  inline ::google::protobuf::int32 ctrl_rated_voltage() const;
  inline void set_ctrl_rated_voltage(::google::protobuf::int32 value);

  // optional int32 CTRL_RATED_CURRENT = 4;
  inline bool has_ctrl_rated_current() const;
  inline void clear_ctrl_rated_current();
  static const int kCTRLRATEDCURRENTFieldNumber = 4;
  inline ::google::protobuf::int32 ctrl_rated_current() const;
  inline void set_ctrl_rated_current(::google::protobuf::int32 value);

  // optional int32 CTRL_ADDRESS = 5;
  inline bool has_ctrl_address() const;
  inline void clear_ctrl_address();
  static const int kCTRLADDRESSFieldNumber = 5;
  inline ::google::protobuf::int32 ctrl_address() const;
  inline void set_ctrl_address(::google::protobuf::int32 value);

  // optional int32 CTRL_BAUDRATE = 6;
  inline bool has_ctrl_baudrate() const;
  inline void clear_ctrl_baudrate();
  static const int kCTRLBAUDRATEFieldNumber = 6;
  inline ::google::protobuf::int32 ctrl_baudrate() const;
  inline void set_ctrl_baudrate(::google::protobuf::int32 value);

  // optional int32 CTRL_RATED_POWER = 7;
  inline bool has_ctrl_rated_power() const;
  inline void clear_ctrl_rated_power();
  static const int kCTRLRATEDPOWERFieldNumber = 7;
  inline ::google::protobuf::int32 ctrl_rated_power() const;
  inline void set_ctrl_rated_power(::google::protobuf::int32 value);

  // optional int32 CTRL_ENCODER_PPR_HI = 8;
  inline bool has_ctrl_encoder_ppr_hi() const;
  inline void clear_ctrl_encoder_ppr_hi();
  static const int kCTRLENCODERPPRHIFieldNumber = 8;
  inline ::google::protobuf::int32 ctrl_encoder_ppr_hi() const;
  inline void set_ctrl_encoder_ppr_hi(::google::protobuf::int32 value);

  // optional int32 CTRL_ENCODER_PPR_LO = 9;
  inline bool has_ctrl_encoder_ppr_lo() const;
  inline void clear_ctrl_encoder_ppr_lo();
  static const int kCTRLENCODERPPRLOFieldNumber = 9;
  inline ::google::protobuf::int32 ctrl_encoder_ppr_lo() const;
  inline void set_ctrl_encoder_ppr_lo(::google::protobuf::int32 value);

  // optional int32 CTRL_QUICK_SOFT_STOP = 10;
  inline bool has_ctrl_quick_soft_stop() const;
  inline void clear_ctrl_quick_soft_stop();
  static const int kCTRLQUICKSOFTSTOPFieldNumber = 10;
  inline ::google::protobuf::int32 ctrl_quick_soft_stop() const;
  inline void set_ctrl_quick_soft_stop(::google::protobuf::int32 value);

  // optional int32 CTRL_CLEAR_ERROR_FLAG = 11;
  inline bool has_ctrl_clear_error_flag() const;
  inline void clear_ctrl_clear_error_flag();
  static const int kCTRLCLEARERRORFLAGFieldNumber = 11;
  inline ::google::protobuf::int32 ctrl_clear_error_flag() const;
  inline void set_ctrl_clear_error_flag(::google::protobuf::int32 value);

  // optional int32 CTRL_QUICKSTOP_DECELERATION = 12;
  inline bool has_ctrl_quickstop_deceleration() const;
  inline void clear_ctrl_quickstop_deceleration();
  static const int kCTRLQUICKSTOPDECELERATIONFieldNumber = 12;
  inline ::google::protobuf::int32 ctrl_quickstop_deceleration() const;
  inline void set_ctrl_quickstop_deceleration(::google::protobuf::int32 value);

  // optional int32 CTRL_SOFTSTOP_DECELERATION = 13;
  inline bool has_ctrl_softstop_deceleration() const;
  inline void clear_ctrl_softstop_deceleration();
  static const int kCTRLSOFTSTOPDECELERATIONFieldNumber = 13;
  inline ::google::protobuf::int32 ctrl_softstop_deceleration() const;
  inline void set_ctrl_softstop_deceleration(::google::protobuf::int32 value);

  // optional int32 CTRL_CURRENT_KP = 14;
  inline bool has_ctrl_current_kp() const;
  inline void clear_ctrl_current_kp();
  static const int kCTRLCURRENTKPFieldNumber = 14;
  inline ::google::protobuf::int32 ctrl_current_kp() const;
  inline void set_ctrl_current_kp(::google::protobuf::int32 value);

  // optional int32 CTRL_CURRENT_KI = 15;
  inline bool has_ctrl_current_ki() const;
  inline void clear_ctrl_current_ki();
  static const int kCTRLCURRENTKIFieldNumber = 15;
  inline ::google::protobuf::int32 ctrl_current_ki() const;
  inline void set_ctrl_current_ki(::google::protobuf::int32 value);

  // optional int32 CTRL_POSITION_KP = 16;
  inline bool has_ctrl_position_kp() const;
  inline void clear_ctrl_position_kp();
  static const int kCTRLPOSITIONKPFieldNumber = 16;
  inline ::google::protobuf::int32 ctrl_position_kp() const;
  inline void set_ctrl_position_kp(::google::protobuf::int32 value);

  // optional int32 CTRL_POSITION_KI = 17;
  inline bool has_ctrl_position_ki() const;
  inline void clear_ctrl_position_ki();
  static const int kCTRLPOSITIONKIFieldNumber = 17;
  inline ::google::protobuf::int32 ctrl_position_ki() const;
  inline void set_ctrl_position_ki(::google::protobuf::int32 value);

  // optional int32 CTRL_VELOCITY_KP = 18;
  inline bool has_ctrl_velocity_kp() const;
  inline void clear_ctrl_velocity_kp();
  static const int kCTRLVELOCITYKPFieldNumber = 18;
  inline ::google::protobuf::int32 ctrl_velocity_kp() const;
  inline void set_ctrl_velocity_kp(::google::protobuf::int32 value);

  // optional int32 CTRL_VELOCITY_KI = 19;
  inline bool has_ctrl_velocity_ki() const;
  inline void clear_ctrl_velocity_ki();
  static const int kCTRLVELOCITYKIFieldNumber = 19;
  inline ::google::protobuf::int32 ctrl_velocity_ki() const;
  inline void set_ctrl_velocity_ki(::google::protobuf::int32 value);

  // optional int32 CTRL_VELOCITY_FEEDF = 20;
  inline bool has_ctrl_velocity_feedf() const;
  inline void clear_ctrl_velocity_feedf();
  static const int kCTRLVELOCITYFEEDFFieldNumber = 20;
  inline ::google::protobuf::int32 ctrl_velocity_feedf() const;
  inline void set_ctrl_velocity_feedf(::google::protobuf::int32 value);

  // optional int32 CTRL_ACCELERATION_FEEDF = 21;
  inline bool has_ctrl_acceleration_feedf() const;
  inline void clear_ctrl_acceleration_feedf();
  static const int kCTRLACCELERATIONFEEDFFieldNumber = 21;
  inline ::google::protobuf::int32 ctrl_acceleration_feedf() const;
  inline void set_ctrl_acceleration_feedf(::google::protobuf::int32 value);

  // optional int32 CTRL_RESERVED_148 = 22;
  inline bool has_ctrl_reserved_148() const;
  inline void clear_ctrl_reserved_148();
  static const int kCTRLRESERVED148FieldNumber = 22;
  inline ::google::protobuf::int32 ctrl_reserved_148() const;
  inline void set_ctrl_reserved_148(::google::protobuf::int32 value);

  // optional int32 CTRL_AXISQ_ACTUAL = 23;
  inline bool has_ctrl_axisq_actual() const;
  inline void clear_ctrl_axisq_actual();
  static const int kCTRLAXISQACTUALFieldNumber = 23;
  inline ::google::protobuf::int32 ctrl_axisq_actual() const;
  inline void set_ctrl_axisq_actual(::google::protobuf::int32 value);

  // optional int32 CTRL_HALL_STATUS = 24;
  inline bool has_ctrl_hall_status() const;
  inline void clear_ctrl_hall_status();
  static const int kCTRLHALLSTATUSFieldNumber = 24;
  inline ::google::protobuf::int32 ctrl_hall_status() const;
  inline void set_ctrl_hall_status(::google::protobuf::int32 value);

  // optional int32 CTRL_MOTOR_TEMPERATURE = 25;
  inline bool has_ctrl_motor_temperature() const;
  inline void clear_ctrl_motor_temperature();
  static const int kCTRLMOTORTEMPERATUREFieldNumber = 25;
  inline ::google::protobuf::int32 ctrl_motor_temperature() const;
  inline void set_ctrl_motor_temperature(::google::protobuf::int32 value);

  // optional int32 CTRL_DIGITAL_IN_STATUS = 26;
  inline bool has_ctrl_digital_in_status() const;
  inline void clear_ctrl_digital_in_status();
  static const int kCTRLDIGITALINSTATUSFieldNumber = 26;
  inline ::google::protobuf::int32 ctrl_digital_in_status() const;
  inline void set_ctrl_digital_in_status(::google::protobuf::int32 value);

  // optional int32 CTRL_CONTPROT_CURRENT = 27;
  inline bool has_ctrl_contprot_current() const;
  inline void clear_ctrl_contprot_current();
  static const int kCTRLCONTPROTCURRENTFieldNumber = 27;
  inline ::google::protobuf::int32 ctrl_contprot_current() const;
  inline void set_ctrl_contprot_current(::google::protobuf::int32 value);

  // optional int32 CTRL_MAXVELOCITY_LIMIT = 28;
  inline bool has_ctrl_maxvelocity_limit() const;
  inline void clear_ctrl_maxvelocity_limit();
  static const int kCTRLMAXVELOCITYLIMITFieldNumber = 28;
  inline ::google::protobuf::int32 ctrl_maxvelocity_limit() const;
  inline void set_ctrl_maxvelocity_limit(::google::protobuf::int32 value);

  // optional int32 CTRL_MAX_CURRENT_LIMIT = 29;
  inline bool has_ctrl_max_current_limit() const;
  inline void clear_ctrl_max_current_limit();
  static const int kCTRLMAXCURRENTLIMITFieldNumber = 29;
  inline ::google::protobuf::int32 ctrl_max_current_limit() const;
  inline void set_ctrl_max_current_limit(::google::protobuf::int32 value);

  // optional int32 CTRL_I2T_TIME = 30;
  inline bool has_ctrl_i2t_time() const;
  inline void clear_ctrl_i2t_time();
  static const int kCTRLI2TTIMEFieldNumber = 30;
  inline ::google::protobuf::int32 ctrl_i2t_time() const;
  inline void set_ctrl_i2t_time(::google::protobuf::int32 value);

  // optional int32 CTRL_IPM_TEMPERATURE_ALARM = 31;
  inline bool has_ctrl_ipm_temperature_alarm() const;
  inline void clear_ctrl_ipm_temperature_alarm();
  static const int kCTRLIPMTEMPERATUREALARMFieldNumber = 31;
  inline ::google::protobuf::int32 ctrl_ipm_temperature_alarm() const;
  inline void set_ctrl_ipm_temperature_alarm(::google::protobuf::int32 value);

  // optional int32 CTRL_IPM_TEMPERATURE_FAULT = 32;
  inline bool has_ctrl_ipm_temperature_fault() const;
  inline void clear_ctrl_ipm_temperature_fault();
  static const int kCTRLIPMTEMPERATUREFAULTFieldNumber = 32;
  inline ::google::protobuf::int32 ctrl_ipm_temperature_fault() const;
  inline void set_ctrl_ipm_temperature_fault(::google::protobuf::int32 value);

  // optional int32 CTRL_I2T_ACTUAL = 33;
  inline bool has_ctrl_i2t_actual() const;
  inline void clear_ctrl_i2t_actual();
  static const int kCTRLI2TACTUALFieldNumber = 33;
  inline ::google::protobuf::int32 ctrl_i2t_actual() const;
  inline void set_ctrl_i2t_actual(::google::protobuf::int32 value);

  // optional int32 CTRL_RESERVED299 = 34;
  inline bool has_ctrl_reserved299() const;
  inline void clear_ctrl_reserved299();
  static const int kCTRLRESERVED299FieldNumber = 34;
  inline ::google::protobuf::int32 ctrl_reserved299() const;
  inline void set_ctrl_reserved299(::google::protobuf::int32 value);

  // optional int32 CTRL_CTRL_VEL_ACTUAL = 35;
  inline bool has_ctrl_ctrl_vel_actual() const;
  inline void clear_ctrl_ctrl_vel_actual();
  static const int kCTRLCTRLVELACTUALFieldNumber = 35;
  inline ::google::protobuf::int32 ctrl_ctrl_vel_actual() const;
  inline void set_ctrl_ctrl_vel_actual(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MotecDriverStat)
 private:
  inline void set_has_m_drivstatus();
  inline void clear_has_m_drivstatus();
  inline void set_has_m_serialno();
  inline void clear_has_m_serialno();
  inline void set_has_ctrl_rated_voltage();
  inline void clear_has_ctrl_rated_voltage();
  inline void set_has_ctrl_rated_current();
  inline void clear_has_ctrl_rated_current();
  inline void set_has_ctrl_address();
  inline void clear_has_ctrl_address();
  inline void set_has_ctrl_baudrate();
  inline void clear_has_ctrl_baudrate();
  inline void set_has_ctrl_rated_power();
  inline void clear_has_ctrl_rated_power();
  inline void set_has_ctrl_encoder_ppr_hi();
  inline void clear_has_ctrl_encoder_ppr_hi();
  inline void set_has_ctrl_encoder_ppr_lo();
  inline void clear_has_ctrl_encoder_ppr_lo();
  inline void set_has_ctrl_quick_soft_stop();
  inline void clear_has_ctrl_quick_soft_stop();
  inline void set_has_ctrl_clear_error_flag();
  inline void clear_has_ctrl_clear_error_flag();
  inline void set_has_ctrl_quickstop_deceleration();
  inline void clear_has_ctrl_quickstop_deceleration();
  inline void set_has_ctrl_softstop_deceleration();
  inline void clear_has_ctrl_softstop_deceleration();
  inline void set_has_ctrl_current_kp();
  inline void clear_has_ctrl_current_kp();
  inline void set_has_ctrl_current_ki();
  inline void clear_has_ctrl_current_ki();
  inline void set_has_ctrl_position_kp();
  inline void clear_has_ctrl_position_kp();
  inline void set_has_ctrl_position_ki();
  inline void clear_has_ctrl_position_ki();
  inline void set_has_ctrl_velocity_kp();
  inline void clear_has_ctrl_velocity_kp();
  inline void set_has_ctrl_velocity_ki();
  inline void clear_has_ctrl_velocity_ki();
  inline void set_has_ctrl_velocity_feedf();
  inline void clear_has_ctrl_velocity_feedf();
  inline void set_has_ctrl_acceleration_feedf();
  inline void clear_has_ctrl_acceleration_feedf();
  inline void set_has_ctrl_reserved_148();
  inline void clear_has_ctrl_reserved_148();
  inline void set_has_ctrl_axisq_actual();
  inline void clear_has_ctrl_axisq_actual();
  inline void set_has_ctrl_hall_status();
  inline void clear_has_ctrl_hall_status();
  inline void set_has_ctrl_motor_temperature();
  inline void clear_has_ctrl_motor_temperature();
  inline void set_has_ctrl_digital_in_status();
  inline void clear_has_ctrl_digital_in_status();
  inline void set_has_ctrl_contprot_current();
  inline void clear_has_ctrl_contprot_current();
  inline void set_has_ctrl_maxvelocity_limit();
  inline void clear_has_ctrl_maxvelocity_limit();
  inline void set_has_ctrl_max_current_limit();
  inline void clear_has_ctrl_max_current_limit();
  inline void set_has_ctrl_i2t_time();
  inline void clear_has_ctrl_i2t_time();
  inline void set_has_ctrl_ipm_temperature_alarm();
  inline void clear_has_ctrl_ipm_temperature_alarm();
  inline void set_has_ctrl_ipm_temperature_fault();
  inline void clear_has_ctrl_ipm_temperature_fault();
  inline void set_has_ctrl_i2t_actual();
  inline void clear_has_ctrl_i2t_actual();
  inline void set_has_ctrl_reserved299();
  inline void clear_has_ctrl_reserved299();
  inline void set_has_ctrl_ctrl_vel_actual();
  inline void clear_has_ctrl_ctrl_vel_actual();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_drivstatus_;
  ::google::protobuf::int32 m_serialno_;
  ::google::protobuf::int32 ctrl_rated_voltage_;
  ::google::protobuf::int32 ctrl_rated_current_;
  ::google::protobuf::int32 ctrl_address_;
  ::google::protobuf::int32 ctrl_baudrate_;
  ::google::protobuf::int32 ctrl_rated_power_;
  ::google::protobuf::int32 ctrl_encoder_ppr_hi_;
  ::google::protobuf::int32 ctrl_encoder_ppr_lo_;
  ::google::protobuf::int32 ctrl_quick_soft_stop_;
  ::google::protobuf::int32 ctrl_clear_error_flag_;
  ::google::protobuf::int32 ctrl_quickstop_deceleration_;
  ::google::protobuf::int32 ctrl_softstop_deceleration_;
  ::google::protobuf::int32 ctrl_current_kp_;
  ::google::protobuf::int32 ctrl_current_ki_;
  ::google::protobuf::int32 ctrl_position_kp_;
  ::google::protobuf::int32 ctrl_position_ki_;
  ::google::protobuf::int32 ctrl_velocity_kp_;
  ::google::protobuf::int32 ctrl_velocity_ki_;
  ::google::protobuf::int32 ctrl_velocity_feedf_;
  ::google::protobuf::int32 ctrl_acceleration_feedf_;
  ::google::protobuf::int32 ctrl_reserved_148_;
  ::google::protobuf::int32 ctrl_axisq_actual_;
  ::google::protobuf::int32 ctrl_hall_status_;
  ::google::protobuf::int32 ctrl_motor_temperature_;
  ::google::protobuf::int32 ctrl_digital_in_status_;
  ::google::protobuf::int32 ctrl_contprot_current_;
  ::google::protobuf::int32 ctrl_maxvelocity_limit_;
  ::google::protobuf::int32 ctrl_max_current_limit_;
  ::google::protobuf::int32 ctrl_i2t_time_;
  ::google::protobuf::int32 ctrl_ipm_temperature_alarm_;
  ::google::protobuf::int32 ctrl_ipm_temperature_fault_;
  ::google::protobuf::int32 ctrl_i2t_actual_;
  ::google::protobuf::int32 ctrl_reserved299_;
  ::google::protobuf::int32 ctrl_ctrl_vel_actual_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];

  friend void  protobuf_AddDesc_MotecDriverStat_2eproto();
  friend void protobuf_AssignDesc_MotecDriverStat_2eproto();
  friend void protobuf_ShutdownFile_MotecDriverStat_2eproto();

  void InitAsDefaultInstance();
  static MotecDriverStat* default_instance_;
};
// ===================================================================


// ===================================================================

// MotecDriverStat

// optional int32 m_DrivStatus = 1;
inline bool MotecDriverStat::has_m_drivstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotecDriverStat::set_has_m_drivstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotecDriverStat::clear_has_m_drivstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotecDriverStat::clear_m_drivstatus() {
  m_drivstatus_ = 0;
  clear_has_m_drivstatus();
}
inline ::google::protobuf::int32 MotecDriverStat::m_drivstatus() const {
  return m_drivstatus_;
}
inline void MotecDriverStat::set_m_drivstatus(::google::protobuf::int32 value) {
  set_has_m_drivstatus();
  m_drivstatus_ = value;
}

// optional int32 m_SerialNo = 2;
inline bool MotecDriverStat::has_m_serialno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotecDriverStat::set_has_m_serialno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotecDriverStat::clear_has_m_serialno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotecDriverStat::clear_m_serialno() {
  m_serialno_ = 0;
  clear_has_m_serialno();
}
inline ::google::protobuf::int32 MotecDriverStat::m_serialno() const {
  return m_serialno_;
}
inline void MotecDriverStat::set_m_serialno(::google::protobuf::int32 value) {
  set_has_m_serialno();
  m_serialno_ = value;
}

// optional int32 CTRL_RATED_VOLTAGE = 3;
inline bool MotecDriverStat::has_ctrl_rated_voltage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_rated_voltage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotecDriverStat::clear_has_ctrl_rated_voltage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotecDriverStat::clear_ctrl_rated_voltage() {
  ctrl_rated_voltage_ = 0;
  clear_has_ctrl_rated_voltage();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_rated_voltage() const {
  return ctrl_rated_voltage_;
}
inline void MotecDriverStat::set_ctrl_rated_voltage(::google::protobuf::int32 value) {
  set_has_ctrl_rated_voltage();
  ctrl_rated_voltage_ = value;
}

// optional int32 CTRL_RATED_CURRENT = 4;
inline bool MotecDriverStat::has_ctrl_rated_current() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_rated_current() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MotecDriverStat::clear_has_ctrl_rated_current() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MotecDriverStat::clear_ctrl_rated_current() {
  ctrl_rated_current_ = 0;
  clear_has_ctrl_rated_current();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_rated_current() const {
  return ctrl_rated_current_;
}
inline void MotecDriverStat::set_ctrl_rated_current(::google::protobuf::int32 value) {
  set_has_ctrl_rated_current();
  ctrl_rated_current_ = value;
}

// optional int32 CTRL_ADDRESS = 5;
inline bool MotecDriverStat::has_ctrl_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MotecDriverStat::clear_has_ctrl_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MotecDriverStat::clear_ctrl_address() {
  ctrl_address_ = 0;
  clear_has_ctrl_address();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_address() const {
  return ctrl_address_;
}
inline void MotecDriverStat::set_ctrl_address(::google::protobuf::int32 value) {
  set_has_ctrl_address();
  ctrl_address_ = value;
}

// optional int32 CTRL_BAUDRATE = 6;
inline bool MotecDriverStat::has_ctrl_baudrate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_baudrate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MotecDriverStat::clear_has_ctrl_baudrate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MotecDriverStat::clear_ctrl_baudrate() {
  ctrl_baudrate_ = 0;
  clear_has_ctrl_baudrate();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_baudrate() const {
  return ctrl_baudrate_;
}
inline void MotecDriverStat::set_ctrl_baudrate(::google::protobuf::int32 value) {
  set_has_ctrl_baudrate();
  ctrl_baudrate_ = value;
}

// optional int32 CTRL_RATED_POWER = 7;
inline bool MotecDriverStat::has_ctrl_rated_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_rated_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MotecDriverStat::clear_has_ctrl_rated_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MotecDriverStat::clear_ctrl_rated_power() {
  ctrl_rated_power_ = 0;
  clear_has_ctrl_rated_power();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_rated_power() const {
  return ctrl_rated_power_;
}
inline void MotecDriverStat::set_ctrl_rated_power(::google::protobuf::int32 value) {
  set_has_ctrl_rated_power();
  ctrl_rated_power_ = value;
}

// optional int32 CTRL_ENCODER_PPR_HI = 8;
inline bool MotecDriverStat::has_ctrl_encoder_ppr_hi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_encoder_ppr_hi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MotecDriverStat::clear_has_ctrl_encoder_ppr_hi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MotecDriverStat::clear_ctrl_encoder_ppr_hi() {
  ctrl_encoder_ppr_hi_ = 0;
  clear_has_ctrl_encoder_ppr_hi();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_encoder_ppr_hi() const {
  return ctrl_encoder_ppr_hi_;
}
inline void MotecDriverStat::set_ctrl_encoder_ppr_hi(::google::protobuf::int32 value) {
  set_has_ctrl_encoder_ppr_hi();
  ctrl_encoder_ppr_hi_ = value;
}

// optional int32 CTRL_ENCODER_PPR_LO = 9;
inline bool MotecDriverStat::has_ctrl_encoder_ppr_lo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_encoder_ppr_lo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MotecDriverStat::clear_has_ctrl_encoder_ppr_lo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MotecDriverStat::clear_ctrl_encoder_ppr_lo() {
  ctrl_encoder_ppr_lo_ = 0;
  clear_has_ctrl_encoder_ppr_lo();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_encoder_ppr_lo() const {
  return ctrl_encoder_ppr_lo_;
}
inline void MotecDriverStat::set_ctrl_encoder_ppr_lo(::google::protobuf::int32 value) {
  set_has_ctrl_encoder_ppr_lo();
  ctrl_encoder_ppr_lo_ = value;
}

// optional int32 CTRL_QUICK_SOFT_STOP = 10;
inline bool MotecDriverStat::has_ctrl_quick_soft_stop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_quick_soft_stop() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MotecDriverStat::clear_has_ctrl_quick_soft_stop() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MotecDriverStat::clear_ctrl_quick_soft_stop() {
  ctrl_quick_soft_stop_ = 0;
  clear_has_ctrl_quick_soft_stop();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_quick_soft_stop() const {
  return ctrl_quick_soft_stop_;
}
inline void MotecDriverStat::set_ctrl_quick_soft_stop(::google::protobuf::int32 value) {
  set_has_ctrl_quick_soft_stop();
  ctrl_quick_soft_stop_ = value;
}

// optional int32 CTRL_CLEAR_ERROR_FLAG = 11;
inline bool MotecDriverStat::has_ctrl_clear_error_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_clear_error_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MotecDriverStat::clear_has_ctrl_clear_error_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MotecDriverStat::clear_ctrl_clear_error_flag() {
  ctrl_clear_error_flag_ = 0;
  clear_has_ctrl_clear_error_flag();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_clear_error_flag() const {
  return ctrl_clear_error_flag_;
}
inline void MotecDriverStat::set_ctrl_clear_error_flag(::google::protobuf::int32 value) {
  set_has_ctrl_clear_error_flag();
  ctrl_clear_error_flag_ = value;
}

// optional int32 CTRL_QUICKSTOP_DECELERATION = 12;
inline bool MotecDriverStat::has_ctrl_quickstop_deceleration() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_quickstop_deceleration() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MotecDriverStat::clear_has_ctrl_quickstop_deceleration() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MotecDriverStat::clear_ctrl_quickstop_deceleration() {
  ctrl_quickstop_deceleration_ = 0;
  clear_has_ctrl_quickstop_deceleration();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_quickstop_deceleration() const {
  return ctrl_quickstop_deceleration_;
}
inline void MotecDriverStat::set_ctrl_quickstop_deceleration(::google::protobuf::int32 value) {
  set_has_ctrl_quickstop_deceleration();
  ctrl_quickstop_deceleration_ = value;
}

// optional int32 CTRL_SOFTSTOP_DECELERATION = 13;
inline bool MotecDriverStat::has_ctrl_softstop_deceleration() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_softstop_deceleration() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MotecDriverStat::clear_has_ctrl_softstop_deceleration() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MotecDriverStat::clear_ctrl_softstop_deceleration() {
  ctrl_softstop_deceleration_ = 0;
  clear_has_ctrl_softstop_deceleration();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_softstop_deceleration() const {
  return ctrl_softstop_deceleration_;
}
inline void MotecDriverStat::set_ctrl_softstop_deceleration(::google::protobuf::int32 value) {
  set_has_ctrl_softstop_deceleration();
  ctrl_softstop_deceleration_ = value;
}

// optional int32 CTRL_CURRENT_KP = 14;
inline bool MotecDriverStat::has_ctrl_current_kp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_current_kp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MotecDriverStat::clear_has_ctrl_current_kp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MotecDriverStat::clear_ctrl_current_kp() {
  ctrl_current_kp_ = 0;
  clear_has_ctrl_current_kp();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_current_kp() const {
  return ctrl_current_kp_;
}
inline void MotecDriverStat::set_ctrl_current_kp(::google::protobuf::int32 value) {
  set_has_ctrl_current_kp();
  ctrl_current_kp_ = value;
}

// optional int32 CTRL_CURRENT_KI = 15;
inline bool MotecDriverStat::has_ctrl_current_ki() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_current_ki() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MotecDriverStat::clear_has_ctrl_current_ki() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MotecDriverStat::clear_ctrl_current_ki() {
  ctrl_current_ki_ = 0;
  clear_has_ctrl_current_ki();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_current_ki() const {
  return ctrl_current_ki_;
}
inline void MotecDriverStat::set_ctrl_current_ki(::google::protobuf::int32 value) {
  set_has_ctrl_current_ki();
  ctrl_current_ki_ = value;
}

// optional int32 CTRL_POSITION_KP = 16;
inline bool MotecDriverStat::has_ctrl_position_kp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_position_kp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MotecDriverStat::clear_has_ctrl_position_kp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MotecDriverStat::clear_ctrl_position_kp() {
  ctrl_position_kp_ = 0;
  clear_has_ctrl_position_kp();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_position_kp() const {
  return ctrl_position_kp_;
}
inline void MotecDriverStat::set_ctrl_position_kp(::google::protobuf::int32 value) {
  set_has_ctrl_position_kp();
  ctrl_position_kp_ = value;
}

// optional int32 CTRL_POSITION_KI = 17;
inline bool MotecDriverStat::has_ctrl_position_ki() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_position_ki() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MotecDriverStat::clear_has_ctrl_position_ki() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MotecDriverStat::clear_ctrl_position_ki() {
  ctrl_position_ki_ = 0;
  clear_has_ctrl_position_ki();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_position_ki() const {
  return ctrl_position_ki_;
}
inline void MotecDriverStat::set_ctrl_position_ki(::google::protobuf::int32 value) {
  set_has_ctrl_position_ki();
  ctrl_position_ki_ = value;
}

// optional int32 CTRL_VELOCITY_KP = 18;
inline bool MotecDriverStat::has_ctrl_velocity_kp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_velocity_kp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MotecDriverStat::clear_has_ctrl_velocity_kp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MotecDriverStat::clear_ctrl_velocity_kp() {
  ctrl_velocity_kp_ = 0;
  clear_has_ctrl_velocity_kp();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_velocity_kp() const {
  return ctrl_velocity_kp_;
}
inline void MotecDriverStat::set_ctrl_velocity_kp(::google::protobuf::int32 value) {
  set_has_ctrl_velocity_kp();
  ctrl_velocity_kp_ = value;
}

// optional int32 CTRL_VELOCITY_KI = 19;
inline bool MotecDriverStat::has_ctrl_velocity_ki() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_velocity_ki() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MotecDriverStat::clear_has_ctrl_velocity_ki() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MotecDriverStat::clear_ctrl_velocity_ki() {
  ctrl_velocity_ki_ = 0;
  clear_has_ctrl_velocity_ki();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_velocity_ki() const {
  return ctrl_velocity_ki_;
}
inline void MotecDriverStat::set_ctrl_velocity_ki(::google::protobuf::int32 value) {
  set_has_ctrl_velocity_ki();
  ctrl_velocity_ki_ = value;
}

// optional int32 CTRL_VELOCITY_FEEDF = 20;
inline bool MotecDriverStat::has_ctrl_velocity_feedf() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_velocity_feedf() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MotecDriverStat::clear_has_ctrl_velocity_feedf() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MotecDriverStat::clear_ctrl_velocity_feedf() {
  ctrl_velocity_feedf_ = 0;
  clear_has_ctrl_velocity_feedf();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_velocity_feedf() const {
  return ctrl_velocity_feedf_;
}
inline void MotecDriverStat::set_ctrl_velocity_feedf(::google::protobuf::int32 value) {
  set_has_ctrl_velocity_feedf();
  ctrl_velocity_feedf_ = value;
}

// optional int32 CTRL_ACCELERATION_FEEDF = 21;
inline bool MotecDriverStat::has_ctrl_acceleration_feedf() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_acceleration_feedf() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MotecDriverStat::clear_has_ctrl_acceleration_feedf() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MotecDriverStat::clear_ctrl_acceleration_feedf() {
  ctrl_acceleration_feedf_ = 0;
  clear_has_ctrl_acceleration_feedf();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_acceleration_feedf() const {
  return ctrl_acceleration_feedf_;
}
inline void MotecDriverStat::set_ctrl_acceleration_feedf(::google::protobuf::int32 value) {
  set_has_ctrl_acceleration_feedf();
  ctrl_acceleration_feedf_ = value;
}

// optional int32 CTRL_RESERVED_148 = 22;
inline bool MotecDriverStat::has_ctrl_reserved_148() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_reserved_148() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MotecDriverStat::clear_has_ctrl_reserved_148() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MotecDriverStat::clear_ctrl_reserved_148() {
  ctrl_reserved_148_ = 0;
  clear_has_ctrl_reserved_148();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_reserved_148() const {
  return ctrl_reserved_148_;
}
inline void MotecDriverStat::set_ctrl_reserved_148(::google::protobuf::int32 value) {
  set_has_ctrl_reserved_148();
  ctrl_reserved_148_ = value;
}

// optional int32 CTRL_AXISQ_ACTUAL = 23;
inline bool MotecDriverStat::has_ctrl_axisq_actual() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_axisq_actual() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MotecDriverStat::clear_has_ctrl_axisq_actual() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MotecDriverStat::clear_ctrl_axisq_actual() {
  ctrl_axisq_actual_ = 0;
  clear_has_ctrl_axisq_actual();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_axisq_actual() const {
  return ctrl_axisq_actual_;
}
inline void MotecDriverStat::set_ctrl_axisq_actual(::google::protobuf::int32 value) {
  set_has_ctrl_axisq_actual();
  ctrl_axisq_actual_ = value;
}

// optional int32 CTRL_HALL_STATUS = 24;
inline bool MotecDriverStat::has_ctrl_hall_status() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_hall_status() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MotecDriverStat::clear_has_ctrl_hall_status() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MotecDriverStat::clear_ctrl_hall_status() {
  ctrl_hall_status_ = 0;
  clear_has_ctrl_hall_status();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_hall_status() const {
  return ctrl_hall_status_;
}
inline void MotecDriverStat::set_ctrl_hall_status(::google::protobuf::int32 value) {
  set_has_ctrl_hall_status();
  ctrl_hall_status_ = value;
}

// optional int32 CTRL_MOTOR_TEMPERATURE = 25;
inline bool MotecDriverStat::has_ctrl_motor_temperature() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_motor_temperature() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MotecDriverStat::clear_has_ctrl_motor_temperature() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MotecDriverStat::clear_ctrl_motor_temperature() {
  ctrl_motor_temperature_ = 0;
  clear_has_ctrl_motor_temperature();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_motor_temperature() const {
  return ctrl_motor_temperature_;
}
inline void MotecDriverStat::set_ctrl_motor_temperature(::google::protobuf::int32 value) {
  set_has_ctrl_motor_temperature();
  ctrl_motor_temperature_ = value;
}

// optional int32 CTRL_DIGITAL_IN_STATUS = 26;
inline bool MotecDriverStat::has_ctrl_digital_in_status() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_digital_in_status() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MotecDriverStat::clear_has_ctrl_digital_in_status() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MotecDriverStat::clear_ctrl_digital_in_status() {
  ctrl_digital_in_status_ = 0;
  clear_has_ctrl_digital_in_status();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_digital_in_status() const {
  return ctrl_digital_in_status_;
}
inline void MotecDriverStat::set_ctrl_digital_in_status(::google::protobuf::int32 value) {
  set_has_ctrl_digital_in_status();
  ctrl_digital_in_status_ = value;
}

// optional int32 CTRL_CONTPROT_CURRENT = 27;
inline bool MotecDriverStat::has_ctrl_contprot_current() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_contprot_current() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MotecDriverStat::clear_has_ctrl_contprot_current() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MotecDriverStat::clear_ctrl_contprot_current() {
  ctrl_contprot_current_ = 0;
  clear_has_ctrl_contprot_current();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_contprot_current() const {
  return ctrl_contprot_current_;
}
inline void MotecDriverStat::set_ctrl_contprot_current(::google::protobuf::int32 value) {
  set_has_ctrl_contprot_current();
  ctrl_contprot_current_ = value;
}

// optional int32 CTRL_MAXVELOCITY_LIMIT = 28;
inline bool MotecDriverStat::has_ctrl_maxvelocity_limit() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_maxvelocity_limit() {
  _has_bits_[0] |= 0x08000000u;
}
inline void MotecDriverStat::clear_has_ctrl_maxvelocity_limit() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void MotecDriverStat::clear_ctrl_maxvelocity_limit() {
  ctrl_maxvelocity_limit_ = 0;
  clear_has_ctrl_maxvelocity_limit();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_maxvelocity_limit() const {
  return ctrl_maxvelocity_limit_;
}
inline void MotecDriverStat::set_ctrl_maxvelocity_limit(::google::protobuf::int32 value) {
  set_has_ctrl_maxvelocity_limit();
  ctrl_maxvelocity_limit_ = value;
}

// optional int32 CTRL_MAX_CURRENT_LIMIT = 29;
inline bool MotecDriverStat::has_ctrl_max_current_limit() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_max_current_limit() {
  _has_bits_[0] |= 0x10000000u;
}
inline void MotecDriverStat::clear_has_ctrl_max_current_limit() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void MotecDriverStat::clear_ctrl_max_current_limit() {
  ctrl_max_current_limit_ = 0;
  clear_has_ctrl_max_current_limit();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_max_current_limit() const {
  return ctrl_max_current_limit_;
}
inline void MotecDriverStat::set_ctrl_max_current_limit(::google::protobuf::int32 value) {
  set_has_ctrl_max_current_limit();
  ctrl_max_current_limit_ = value;
}

// optional int32 CTRL_I2T_TIME = 30;
inline bool MotecDriverStat::has_ctrl_i2t_time() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_i2t_time() {
  _has_bits_[0] |= 0x20000000u;
}
inline void MotecDriverStat::clear_has_ctrl_i2t_time() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void MotecDriverStat::clear_ctrl_i2t_time() {
  ctrl_i2t_time_ = 0;
  clear_has_ctrl_i2t_time();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_i2t_time() const {
  return ctrl_i2t_time_;
}
inline void MotecDriverStat::set_ctrl_i2t_time(::google::protobuf::int32 value) {
  set_has_ctrl_i2t_time();
  ctrl_i2t_time_ = value;
}

// optional int32 CTRL_IPM_TEMPERATURE_ALARM = 31;
inline bool MotecDriverStat::has_ctrl_ipm_temperature_alarm() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_ipm_temperature_alarm() {
  _has_bits_[0] |= 0x40000000u;
}
inline void MotecDriverStat::clear_has_ctrl_ipm_temperature_alarm() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void MotecDriverStat::clear_ctrl_ipm_temperature_alarm() {
  ctrl_ipm_temperature_alarm_ = 0;
  clear_has_ctrl_ipm_temperature_alarm();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_ipm_temperature_alarm() const {
  return ctrl_ipm_temperature_alarm_;
}
inline void MotecDriverStat::set_ctrl_ipm_temperature_alarm(::google::protobuf::int32 value) {
  set_has_ctrl_ipm_temperature_alarm();
  ctrl_ipm_temperature_alarm_ = value;
}

// optional int32 CTRL_IPM_TEMPERATURE_FAULT = 32;
inline bool MotecDriverStat::has_ctrl_ipm_temperature_fault() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_ipm_temperature_fault() {
  _has_bits_[0] |= 0x80000000u;
}
inline void MotecDriverStat::clear_has_ctrl_ipm_temperature_fault() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void MotecDriverStat::clear_ctrl_ipm_temperature_fault() {
  ctrl_ipm_temperature_fault_ = 0;
  clear_has_ctrl_ipm_temperature_fault();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_ipm_temperature_fault() const {
  return ctrl_ipm_temperature_fault_;
}
inline void MotecDriverStat::set_ctrl_ipm_temperature_fault(::google::protobuf::int32 value) {
  set_has_ctrl_ipm_temperature_fault();
  ctrl_ipm_temperature_fault_ = value;
}

// optional int32 CTRL_I2T_ACTUAL = 33;
inline bool MotecDriverStat::has_ctrl_i2t_actual() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_i2t_actual() {
  _has_bits_[1] |= 0x00000001u;
}
inline void MotecDriverStat::clear_has_ctrl_i2t_actual() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void MotecDriverStat::clear_ctrl_i2t_actual() {
  ctrl_i2t_actual_ = 0;
  clear_has_ctrl_i2t_actual();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_i2t_actual() const {
  return ctrl_i2t_actual_;
}
inline void MotecDriverStat::set_ctrl_i2t_actual(::google::protobuf::int32 value) {
  set_has_ctrl_i2t_actual();
  ctrl_i2t_actual_ = value;
}

// optional int32 CTRL_RESERVED299 = 34;
inline bool MotecDriverStat::has_ctrl_reserved299() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_reserved299() {
  _has_bits_[1] |= 0x00000002u;
}
inline void MotecDriverStat::clear_has_ctrl_reserved299() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void MotecDriverStat::clear_ctrl_reserved299() {
  ctrl_reserved299_ = 0;
  clear_has_ctrl_reserved299();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_reserved299() const {
  return ctrl_reserved299_;
}
inline void MotecDriverStat::set_ctrl_reserved299(::google::protobuf::int32 value) {
  set_has_ctrl_reserved299();
  ctrl_reserved299_ = value;
}

// optional int32 CTRL_CTRL_VEL_ACTUAL = 35;
inline bool MotecDriverStat::has_ctrl_ctrl_vel_actual() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void MotecDriverStat::set_has_ctrl_ctrl_vel_actual() {
  _has_bits_[1] |= 0x00000004u;
}
inline void MotecDriverStat::clear_has_ctrl_ctrl_vel_actual() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void MotecDriverStat::clear_ctrl_ctrl_vel_actual() {
  ctrl_ctrl_vel_actual_ = 0;
  clear_has_ctrl_ctrl_vel_actual();
}
inline ::google::protobuf::int32 MotecDriverStat::ctrl_ctrl_vel_actual() const {
  return ctrl_ctrl_vel_actual_;
}
inline void MotecDriverStat::set_ctrl_ctrl_vel_actual(::google::protobuf::int32 value) {
  set_has_ctrl_ctrl_vel_actual();
  ctrl_ctrl_vel_actual_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MotecDriverStat_2eproto__INCLUDED
