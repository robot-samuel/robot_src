// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotStatusMessage.proto

#ifndef PROTOBUF_RobotStatusMessage_2eproto__INCLUDED
#define PROTOBUF_RobotStatusMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ControllerMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RobotStatusMessage_2eproto();
void protobuf_AssignDesc_RobotStatusMessage_2eproto();
void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

class RobotStatusMessage;
class RobotStatusMessage_CameraServiceMessage;
class RobotStatusMessage_ImageRecognitionMessage;
class RobotStatusMessage_OnlineMessage;
class RobotStatusMessage_RoutePlanNaviMessage;
class RobotStatusMessage_PanTiltCtrlMessage;
class RobotStatusMessage_ManagementSystemMessage;

// ===================================================================

class RobotStatusMessage_CameraServiceMessage : public ::google::protobuf::Message {
 public:
  RobotStatusMessage_CameraServiceMessage();
  virtual ~RobotStatusMessage_CameraServiceMessage();

  RobotStatusMessage_CameraServiceMessage(const RobotStatusMessage_CameraServiceMessage& from);

  inline RobotStatusMessage_CameraServiceMessage& operator=(const RobotStatusMessage_CameraServiceMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStatusMessage_CameraServiceMessage& default_instance();

  void Swap(RobotStatusMessage_CameraServiceMessage* other);

  // implements Message ----------------------------------------------

  RobotStatusMessage_CameraServiceMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotStatusMessage_CameraServiceMessage& from);
  void MergeFrom(const RobotStatusMessage_CameraServiceMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 InfraredCameraonline = 1;
  inline bool has_infraredcameraonline() const;
  inline void clear_infraredcameraonline();
  static const int kInfraredCameraonlineFieldNumber = 1;
  inline ::google::protobuf::int32 infraredcameraonline() const;
  inline void set_infraredcameraonline(::google::protobuf::int32 value);

  // optional int32 NormalCameraonline = 2;
  inline bool has_normalcameraonline() const;
  inline void clear_normalcameraonline();
  static const int kNormalCameraonlineFieldNumber = 2;
  inline ::google::protobuf::int32 normalcameraonline() const;
  inline void set_normalcameraonline(::google::protobuf::int32 value);

  // optional int32 InfraredCameraFocus = 3;
  inline bool has_infraredcamerafocus() const;
  inline void clear_infraredcamerafocus();
  static const int kInfraredCameraFocusFieldNumber = 3;
  inline ::google::protobuf::int32 infraredcamerafocus() const;
  inline void set_infraredcamerafocus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RobotStatusMessage.CameraServiceMessage)
 private:
  inline void set_has_infraredcameraonline();
  inline void clear_has_infraredcameraonline();
  inline void set_has_normalcameraonline();
  inline void clear_has_normalcameraonline();
  inline void set_has_infraredcamerafocus();
  inline void clear_has_infraredcamerafocus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 infraredcameraonline_;
  ::google::protobuf::int32 normalcameraonline_;
  ::google::protobuf::int32 infraredcamerafocus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RobotStatusMessage_2eproto();
  friend void protobuf_AssignDesc_RobotStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static RobotStatusMessage_CameraServiceMessage* default_instance_;
};
// -------------------------------------------------------------------

class RobotStatusMessage_ImageRecognitionMessage : public ::google::protobuf::Message {
 public:
  RobotStatusMessage_ImageRecognitionMessage();
  virtual ~RobotStatusMessage_ImageRecognitionMessage();

  RobotStatusMessage_ImageRecognitionMessage(const RobotStatusMessage_ImageRecognitionMessage& from);

  inline RobotStatusMessage_ImageRecognitionMessage& operator=(const RobotStatusMessage_ImageRecognitionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStatusMessage_ImageRecognitionMessage& default_instance();

  void Swap(RobotStatusMessage_ImageRecognitionMessage* other);

  // implements Message ----------------------------------------------

  RobotStatusMessage_ImageRecognitionMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotStatusMessage_ImageRecognitionMessage& from);
  void MergeFrom(const RobotStatusMessage_ImageRecognitionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TaskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::int32 taskid() const;
  inline void set_taskid(::google::protobuf::int32 value);

  // optional int32 TaskSavePath = 2;
  inline bool has_tasksavepath() const;
  inline void clear_tasksavepath();
  static const int kTaskSavePathFieldNumber = 2;
  inline ::google::protobuf::int32 tasksavepath() const;
  inline void set_tasksavepath(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RobotStatusMessage.ImageRecognitionMessage)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_tasksavepath();
  inline void clear_has_tasksavepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 taskid_;
  ::google::protobuf::int32 tasksavepath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RobotStatusMessage_2eproto();
  friend void protobuf_AssignDesc_RobotStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static RobotStatusMessage_ImageRecognitionMessage* default_instance_;
};
// -------------------------------------------------------------------

class RobotStatusMessage_OnlineMessage : public ::google::protobuf::Message {
 public:
  RobotStatusMessage_OnlineMessage();
  virtual ~RobotStatusMessage_OnlineMessage();

  RobotStatusMessage_OnlineMessage(const RobotStatusMessage_OnlineMessage& from);

  inline RobotStatusMessage_OnlineMessage& operator=(const RobotStatusMessage_OnlineMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStatusMessage_OnlineMessage& default_instance();

  void Swap(RobotStatusMessage_OnlineMessage* other);

  // implements Message ----------------------------------------------

  RobotStatusMessage_OnlineMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotStatusMessage_OnlineMessage& from);
  void MergeFrom(const RobotStatusMessage_OnlineMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CameraServiceonline = 1;
  inline bool has_cameraserviceonline() const;
  inline void clear_cameraserviceonline();
  static const int kCameraServiceonlineFieldNumber = 1;
  inline ::google::protobuf::int32 cameraserviceonline() const;
  inline void set_cameraserviceonline(::google::protobuf::int32 value);

  // optional int32 RoutePlanNavionline = 2;
  inline bool has_routeplannavionline() const;
  inline void clear_routeplannavionline();
  static const int kRoutePlanNavionlineFieldNumber = 2;
  inline ::google::protobuf::int32 routeplannavionline() const;
  inline void set_routeplannavionline(::google::protobuf::int32 value);

  // optional int32 PanTiltCtrlonline = 3;
  inline bool has_pantiltctrlonline() const;
  inline void clear_pantiltctrlonline();
  static const int kPanTiltCtrlonlineFieldNumber = 3;
  inline ::google::protobuf::int32 pantiltctrlonline() const;
  inline void set_pantiltctrlonline(::google::protobuf::int32 value);

  // optional int32 ImageRecognitiononline = 4;
  inline bool has_imagerecognitiononline() const;
  inline void clear_imagerecognitiononline();
  static const int kImageRecognitiononlineFieldNumber = 4;
  inline ::google::protobuf::int32 imagerecognitiononline() const;
  inline void set_imagerecognitiononline(::google::protobuf::int32 value);

  // optional int32 DriverCtrlonline = 5;
  inline bool has_driverctrlonline() const;
  inline void clear_driverctrlonline();
  static const int kDriverCtrlonlineFieldNumber = 5;
  inline ::google::protobuf::int32 driverctrlonline() const;
  inline void set_driverctrlonline(::google::protobuf::int32 value);

  // optional int32 A310Cameraonline = 6;
  inline bool has_a310cameraonline() const;
  inline void clear_a310cameraonline();
  static const int kA310CameraonlineFieldNumber = 6;
  inline ::google::protobuf::int32 a310cameraonline() const;
  inline void set_a310cameraonline(::google::protobuf::int32 value);

  // optional int32 NormalCameraonline = 7;
  inline bool has_normalcameraonline() const;
  inline void clear_normalcameraonline();
  static const int kNormalCameraonlineFieldNumber = 7;
  inline ::google::protobuf::int32 normalcameraonline() const;
  inline void set_normalcameraonline(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RobotStatusMessage.OnlineMessage)
 private:
  inline void set_has_cameraserviceonline();
  inline void clear_has_cameraserviceonline();
  inline void set_has_routeplannavionline();
  inline void clear_has_routeplannavionline();
  inline void set_has_pantiltctrlonline();
  inline void clear_has_pantiltctrlonline();
  inline void set_has_imagerecognitiononline();
  inline void clear_has_imagerecognitiononline();
  inline void set_has_driverctrlonline();
  inline void clear_has_driverctrlonline();
  inline void set_has_a310cameraonline();
  inline void clear_has_a310cameraonline();
  inline void set_has_normalcameraonline();
  inline void clear_has_normalcameraonline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cameraserviceonline_;
  ::google::protobuf::int32 routeplannavionline_;
  ::google::protobuf::int32 pantiltctrlonline_;
  ::google::protobuf::int32 imagerecognitiononline_;
  ::google::protobuf::int32 driverctrlonline_;
  ::google::protobuf::int32 a310cameraonline_;
  ::google::protobuf::int32 normalcameraonline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_RobotStatusMessage_2eproto();
  friend void protobuf_AssignDesc_RobotStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static RobotStatusMessage_OnlineMessage* default_instance_;
};
// -------------------------------------------------------------------

class RobotStatusMessage_RoutePlanNaviMessage : public ::google::protobuf::Message {
 public:
  RobotStatusMessage_RoutePlanNaviMessage();
  virtual ~RobotStatusMessage_RoutePlanNaviMessage();

  RobotStatusMessage_RoutePlanNaviMessage(const RobotStatusMessage_RoutePlanNaviMessage& from);

  inline RobotStatusMessage_RoutePlanNaviMessage& operator=(const RobotStatusMessage_RoutePlanNaviMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStatusMessage_RoutePlanNaviMessage& default_instance();

  void Swap(RobotStatusMessage_RoutePlanNaviMessage* other);

  // implements Message ----------------------------------------------

  RobotStatusMessage_RoutePlanNaviMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotStatusMessage_RoutePlanNaviMessage& from);
  void MergeFrom(const RobotStatusMessage_RoutePlanNaviMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CurrentPosition = 1;
  inline bool has_currentposition() const;
  inline void clear_currentposition();
  static const int kCurrentPositionFieldNumber = 1;
  inline ::google::protobuf::int32 currentposition() const;
  inline void set_currentposition(::google::protobuf::int32 value);

  // optional int32 CurrentLine = 2;
  inline bool has_currentline() const;
  inline void clear_currentline();
  static const int kCurrentLineFieldNumber = 2;
  inline ::google::protobuf::int32 currentline() const;
  inline void set_currentline(::google::protobuf::int32 value);

  // optional int32 PositionFinish = 3;
  inline bool has_positionfinish() const;
  inline void clear_positionfinish();
  static const int kPositionFinishFieldNumber = 3;
  inline ::google::protobuf::int32 positionfinish() const;
  inline void set_positionfinish(::google::protobuf::int32 value);

  // optional int32 CurrentTaskEndID = 4;
  inline bool has_currenttaskendid() const;
  inline void clear_currenttaskendid();
  static const int kCurrentTaskEndIDFieldNumber = 4;
  inline ::google::protobuf::int32 currenttaskendid() const;
  inline void set_currenttaskendid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RobotStatusMessage.RoutePlanNaviMessage)
 private:
  inline void set_has_currentposition();
  inline void clear_has_currentposition();
  inline void set_has_currentline();
  inline void clear_has_currentline();
  inline void set_has_positionfinish();
  inline void clear_has_positionfinish();
  inline void set_has_currenttaskendid();
  inline void clear_has_currenttaskendid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 currentposition_;
  ::google::protobuf::int32 currentline_;
  ::google::protobuf::int32 positionfinish_;
  ::google::protobuf::int32 currenttaskendid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RobotStatusMessage_2eproto();
  friend void protobuf_AssignDesc_RobotStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static RobotStatusMessage_RoutePlanNaviMessage* default_instance_;
};
// -------------------------------------------------------------------

class RobotStatusMessage_PanTiltCtrlMessage : public ::google::protobuf::Message {
 public:
  RobotStatusMessage_PanTiltCtrlMessage();
  virtual ~RobotStatusMessage_PanTiltCtrlMessage();

  RobotStatusMessage_PanTiltCtrlMessage(const RobotStatusMessage_PanTiltCtrlMessage& from);

  inline RobotStatusMessage_PanTiltCtrlMessage& operator=(const RobotStatusMessage_PanTiltCtrlMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStatusMessage_PanTiltCtrlMessage& default_instance();

  void Swap(RobotStatusMessage_PanTiltCtrlMessage* other);

  // implements Message ----------------------------------------------

  RobotStatusMessage_PanTiltCtrlMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotStatusMessage_PanTiltCtrlMessage& from);
  void MergeFrom(const RobotStatusMessage_PanTiltCtrlMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PanTiltDevComo = 1;
  inline bool has_pantiltdevcomo() const;
  inline void clear_pantiltdevcomo();
  static const int kPanTiltDevComoFieldNumber = 1;
  inline ::google::protobuf::int32 pantiltdevcomo() const;
  inline void set_pantiltdevcomo(::google::protobuf::int32 value);

  // optional int32 PanPos = 2;
  inline bool has_panpos() const;
  inline void clear_panpos();
  static const int kPanPosFieldNumber = 2;
  inline ::google::protobuf::int32 panpos() const;
  inline void set_panpos(::google::protobuf::int32 value);

  // optional int32 TlitPos = 3;
  inline bool has_tlitpos() const;
  inline void clear_tlitpos();
  static const int kTlitPosFieldNumber = 3;
  inline ::google::protobuf::int32 tlitpos() const;
  inline void set_tlitpos(::google::protobuf::int32 value);

  // optional int32 ZoomPos = 4;
  inline bool has_zoompos() const;
  inline void clear_zoompos();
  static const int kZoomPosFieldNumber = 4;
  inline ::google::protobuf::int32 zoompos() const;
  inline void set_zoompos(::google::protobuf::int32 value);

  // optional int32 FocusPos = 5;
  inline bool has_focuspos() const;
  inline void clear_focuspos();
  static const int kFocusPosFieldNumber = 5;
  inline ::google::protobuf::int32 focuspos() const;
  inline void set_focuspos(::google::protobuf::int32 value);

  // optional int32 WiperStauts = 6;
  inline bool has_wiperstauts() const;
  inline void clear_wiperstauts();
  static const int kWiperStautsFieldNumber = 6;
  inline ::google::protobuf::int32 wiperstauts() const;
  inline void set_wiperstauts(::google::protobuf::int32 value);

  // optional int32 FocusStauts = 7;
  inline bool has_focusstauts() const;
  inline void clear_focusstauts();
  static const int kFocusStautsFieldNumber = 7;
  inline ::google::protobuf::int32 focusstauts() const;
  inline void set_focusstauts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RobotStatusMessage.PanTiltCtrlMessage)
 private:
  inline void set_has_pantiltdevcomo();
  inline void clear_has_pantiltdevcomo();
  inline void set_has_panpos();
  inline void clear_has_panpos();
  inline void set_has_tlitpos();
  inline void clear_has_tlitpos();
  inline void set_has_zoompos();
  inline void clear_has_zoompos();
  inline void set_has_focuspos();
  inline void clear_has_focuspos();
  inline void set_has_wiperstauts();
  inline void clear_has_wiperstauts();
  inline void set_has_focusstauts();
  inline void clear_has_focusstauts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pantiltdevcomo_;
  ::google::protobuf::int32 panpos_;
  ::google::protobuf::int32 tlitpos_;
  ::google::protobuf::int32 zoompos_;
  ::google::protobuf::int32 focuspos_;
  ::google::protobuf::int32 wiperstauts_;
  ::google::protobuf::int32 focusstauts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_RobotStatusMessage_2eproto();
  friend void protobuf_AssignDesc_RobotStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static RobotStatusMessage_PanTiltCtrlMessage* default_instance_;
};
// -------------------------------------------------------------------

class RobotStatusMessage_ManagementSystemMessage : public ::google::protobuf::Message {
 public:
  RobotStatusMessage_ManagementSystemMessage();
  virtual ~RobotStatusMessage_ManagementSystemMessage();

  RobotStatusMessage_ManagementSystemMessage(const RobotStatusMessage_ManagementSystemMessage& from);

  inline RobotStatusMessage_ManagementSystemMessage& operator=(const RobotStatusMessage_ManagementSystemMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStatusMessage_ManagementSystemMessage& default_instance();

  void Swap(RobotStatusMessage_ManagementSystemMessage* other);

  // implements Message ----------------------------------------------

  RobotStatusMessage_ManagementSystemMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotStatusMessage_ManagementSystemMessage& from);
  void MergeFrom(const RobotStatusMessage_ManagementSystemMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string TaskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline const ::std::string& taskid() const;
  inline void set_taskid(const ::std::string& value);
  inline void set_taskid(const char* value);
  inline void set_taskid(const char* value, size_t size);
  inline ::std::string* mutable_taskid();
  inline ::std::string* release_taskid();
  inline void set_allocated_taskid(::std::string* taskid);

  // optional string TaskName = 2;
  inline bool has_taskname() const;
  inline void clear_taskname();
  static const int kTaskNameFieldNumber = 2;
  inline const ::std::string& taskname() const;
  inline void set_taskname(const ::std::string& value);
  inline void set_taskname(const char* value);
  inline void set_taskname(const char* value, size_t size);
  inline ::std::string* mutable_taskname();
  inline ::std::string* release_taskname();
  inline void set_allocated_taskname(::std::string* taskname);

  // optional string MeterPointID = 3;
  inline bool has_meterpointid() const;
  inline void clear_meterpointid();
  static const int kMeterPointIDFieldNumber = 3;
  inline const ::std::string& meterpointid() const;
  inline void set_meterpointid(const ::std::string& value);
  inline void set_meterpointid(const char* value);
  inline void set_meterpointid(const char* value, size_t size);
  inline ::std::string* mutable_meterpointid();
  inline ::std::string* release_meterpointid();
  inline void set_allocated_meterpointid(::std::string* meterpointid);

  // optional string MeterPointName = 4;
  inline bool has_meterpointname() const;
  inline void clear_meterpointname();
  static const int kMeterPointNameFieldNumber = 4;
  inline const ::std::string& meterpointname() const;
  inline void set_meterpointname(const ::std::string& value);
  inline void set_meterpointname(const char* value);
  inline void set_meterpointname(const char* value, size_t size);
  inline ::std::string* mutable_meterpointname();
  inline ::std::string* release_meterpointname();
  inline void set_allocated_meterpointname(::std::string* meterpointname);

  // optional string StopPointid = 5;
  inline bool has_stoppointid() const;
  inline void clear_stoppointid();
  static const int kStopPointidFieldNumber = 5;
  inline const ::std::string& stoppointid() const;
  inline void set_stoppointid(const ::std::string& value);
  inline void set_stoppointid(const char* value);
  inline void set_stoppointid(const char* value, size_t size);
  inline ::std::string* mutable_stoppointid();
  inline ::std::string* release_stoppointid();
  inline void set_allocated_stoppointid(::std::string* stoppointid);

  // @@protoc_insertion_point(class_scope:RobotStatusMessage.ManagementSystemMessage)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_taskname();
  inline void clear_has_taskname();
  inline void set_has_meterpointid();
  inline void clear_has_meterpointid();
  inline void set_has_meterpointname();
  inline void clear_has_meterpointname();
  inline void set_has_stoppointid();
  inline void clear_has_stoppointid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* taskid_;
  ::std::string* taskname_;
  ::std::string* meterpointid_;
  ::std::string* meterpointname_;
  ::std::string* stoppointid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RobotStatusMessage_2eproto();
  friend void protobuf_AssignDesc_RobotStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static RobotStatusMessage_ManagementSystemMessage* default_instance_;
};
// -------------------------------------------------------------------

class RobotStatusMessage : public ::google::protobuf::Message {
 public:
  RobotStatusMessage();
  virtual ~RobotStatusMessage();

  RobotStatusMessage(const RobotStatusMessage& from);

  inline RobotStatusMessage& operator=(const RobotStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotStatusMessage& default_instance();

  void Swap(RobotStatusMessage* other);

  // implements Message ----------------------------------------------

  RobotStatusMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotStatusMessage& from);
  void MergeFrom(const RobotStatusMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RobotStatusMessage_CameraServiceMessage CameraServiceMessage;
  typedef RobotStatusMessage_ImageRecognitionMessage ImageRecognitionMessage;
  typedef RobotStatusMessage_OnlineMessage OnlineMessage;
  typedef RobotStatusMessage_RoutePlanNaviMessage RoutePlanNaviMessage;
  typedef RobotStatusMessage_PanTiltCtrlMessage PanTiltCtrlMessage;
  typedef RobotStatusMessage_ManagementSystemMessage ManagementSystemMessage;

  // accessors -------------------------------------------------------

  // optional int32 Stat = 1;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 1;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // optional .ControllerMessage Controller = 2;
  inline bool has_controller() const;
  inline void clear_controller();
  static const int kControllerFieldNumber = 2;
  inline const ::ControllerMessage& controller() const;
  inline ::ControllerMessage* mutable_controller();
  inline ::ControllerMessage* release_controller();
  inline void set_allocated_controller(::ControllerMessage* controller);

  // optional .RobotStatusMessage.CameraServiceMessage CameraService = 3;
  inline bool has_cameraservice() const;
  inline void clear_cameraservice();
  static const int kCameraServiceFieldNumber = 3;
  inline const ::RobotStatusMessage_CameraServiceMessage& cameraservice() const;
  inline ::RobotStatusMessage_CameraServiceMessage* mutable_cameraservice();
  inline ::RobotStatusMessage_CameraServiceMessage* release_cameraservice();
  inline void set_allocated_cameraservice(::RobotStatusMessage_CameraServiceMessage* cameraservice);

  // optional .RobotStatusMessage.OnlineMessage OnlineMSg = 4;
  inline bool has_onlinemsg() const;
  inline void clear_onlinemsg();
  static const int kOnlineMSgFieldNumber = 4;
  inline const ::RobotStatusMessage_OnlineMessage& onlinemsg() const;
  inline ::RobotStatusMessage_OnlineMessage* mutable_onlinemsg();
  inline ::RobotStatusMessage_OnlineMessage* release_onlinemsg();
  inline void set_allocated_onlinemsg(::RobotStatusMessage_OnlineMessage* onlinemsg);

  // optional .RobotStatusMessage.RoutePlanNaviMessage RoutePlanNavi = 5;
  inline bool has_routeplannavi() const;
  inline void clear_routeplannavi();
  static const int kRoutePlanNaviFieldNumber = 5;
  inline const ::RobotStatusMessage_RoutePlanNaviMessage& routeplannavi() const;
  inline ::RobotStatusMessage_RoutePlanNaviMessage* mutable_routeplannavi();
  inline ::RobotStatusMessage_RoutePlanNaviMessage* release_routeplannavi();
  inline void set_allocated_routeplannavi(::RobotStatusMessage_RoutePlanNaviMessage* routeplannavi);

  // optional .RobotStatusMessage.ImageRecognitionMessage ImageRecognition = 6;
  inline bool has_imagerecognition() const;
  inline void clear_imagerecognition();
  static const int kImageRecognitionFieldNumber = 6;
  inline const ::RobotStatusMessage_ImageRecognitionMessage& imagerecognition() const;
  inline ::RobotStatusMessage_ImageRecognitionMessage* mutable_imagerecognition();
  inline ::RobotStatusMessage_ImageRecognitionMessage* release_imagerecognition();
  inline void set_allocated_imagerecognition(::RobotStatusMessage_ImageRecognitionMessage* imagerecognition);

  // optional .RobotStatusMessage.ManagementSystemMessage ManagementSystem = 7;
  inline bool has_managementsystem() const;
  inline void clear_managementsystem();
  static const int kManagementSystemFieldNumber = 7;
  inline const ::RobotStatusMessage_ManagementSystemMessage& managementsystem() const;
  inline ::RobotStatusMessage_ManagementSystemMessage* mutable_managementsystem();
  inline ::RobotStatusMessage_ManagementSystemMessage* release_managementsystem();
  inline void set_allocated_managementsystem(::RobotStatusMessage_ManagementSystemMessage* managementsystem);

  // optional .RobotStatusMessage.PanTiltCtrlMessage PanTiltCtrl = 8;
  inline bool has_pantiltctrl() const;
  inline void clear_pantiltctrl();
  static const int kPanTiltCtrlFieldNumber = 8;
  inline const ::RobotStatusMessage_PanTiltCtrlMessage& pantiltctrl() const;
  inline ::RobotStatusMessage_PanTiltCtrlMessage* mutable_pantiltctrl();
  inline ::RobotStatusMessage_PanTiltCtrlMessage* release_pantiltctrl();
  inline void set_allocated_pantiltctrl(::RobotStatusMessage_PanTiltCtrlMessage* pantiltctrl);

  // @@protoc_insertion_point(class_scope:RobotStatusMessage)
 private:
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_controller();
  inline void clear_has_controller();
  inline void set_has_cameraservice();
  inline void clear_has_cameraservice();
  inline void set_has_onlinemsg();
  inline void clear_has_onlinemsg();
  inline void set_has_routeplannavi();
  inline void clear_has_routeplannavi();
  inline void set_has_imagerecognition();
  inline void clear_has_imagerecognition();
  inline void set_has_managementsystem();
  inline void clear_has_managementsystem();
  inline void set_has_pantiltctrl();
  inline void clear_has_pantiltctrl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ControllerMessage* controller_;
  ::RobotStatusMessage_CameraServiceMessage* cameraservice_;
  ::RobotStatusMessage_OnlineMessage* onlinemsg_;
  ::RobotStatusMessage_RoutePlanNaviMessage* routeplannavi_;
  ::RobotStatusMessage_ImageRecognitionMessage* imagerecognition_;
  ::RobotStatusMessage_ManagementSystemMessage* managementsystem_;
  ::RobotStatusMessage_PanTiltCtrlMessage* pantiltctrl_;
  ::google::protobuf::int32 stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_RobotStatusMessage_2eproto();
  friend void protobuf_AssignDesc_RobotStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_RobotStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static RobotStatusMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// RobotStatusMessage_CameraServiceMessage

// optional int32 InfraredCameraonline = 1;
inline bool RobotStatusMessage_CameraServiceMessage::has_infraredcameraonline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStatusMessage_CameraServiceMessage::set_has_infraredcameraonline() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStatusMessage_CameraServiceMessage::clear_has_infraredcameraonline() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotStatusMessage_CameraServiceMessage::clear_infraredcameraonline() {
  infraredcameraonline_ = 0;
  clear_has_infraredcameraonline();
}
inline ::google::protobuf::int32 RobotStatusMessage_CameraServiceMessage::infraredcameraonline() const {
  return infraredcameraonline_;
}
inline void RobotStatusMessage_CameraServiceMessage::set_infraredcameraonline(::google::protobuf::int32 value) {
  set_has_infraredcameraonline();
  infraredcameraonline_ = value;
}

// optional int32 NormalCameraonline = 2;
inline bool RobotStatusMessage_CameraServiceMessage::has_normalcameraonline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotStatusMessage_CameraServiceMessage::set_has_normalcameraonline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotStatusMessage_CameraServiceMessage::clear_has_normalcameraonline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotStatusMessage_CameraServiceMessage::clear_normalcameraonline() {
  normalcameraonline_ = 0;
  clear_has_normalcameraonline();
}
inline ::google::protobuf::int32 RobotStatusMessage_CameraServiceMessage::normalcameraonline() const {
  return normalcameraonline_;
}
inline void RobotStatusMessage_CameraServiceMessage::set_normalcameraonline(::google::protobuf::int32 value) {
  set_has_normalcameraonline();
  normalcameraonline_ = value;
}

// optional int32 InfraredCameraFocus = 3;
inline bool RobotStatusMessage_CameraServiceMessage::has_infraredcamerafocus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotStatusMessage_CameraServiceMessage::set_has_infraredcamerafocus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotStatusMessage_CameraServiceMessage::clear_has_infraredcamerafocus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotStatusMessage_CameraServiceMessage::clear_infraredcamerafocus() {
  infraredcamerafocus_ = 0;
  clear_has_infraredcamerafocus();
}
inline ::google::protobuf::int32 RobotStatusMessage_CameraServiceMessage::infraredcamerafocus() const {
  return infraredcamerafocus_;
}
inline void RobotStatusMessage_CameraServiceMessage::set_infraredcamerafocus(::google::protobuf::int32 value) {
  set_has_infraredcamerafocus();
  infraredcamerafocus_ = value;
}

// -------------------------------------------------------------------

// RobotStatusMessage_ImageRecognitionMessage

// optional int32 TaskID = 1;
inline bool RobotStatusMessage_ImageRecognitionMessage::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStatusMessage_ImageRecognitionMessage::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStatusMessage_ImageRecognitionMessage::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotStatusMessage_ImageRecognitionMessage::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 RobotStatusMessage_ImageRecognitionMessage::taskid() const {
  return taskid_;
}
inline void RobotStatusMessage_ImageRecognitionMessage::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional int32 TaskSavePath = 2;
inline bool RobotStatusMessage_ImageRecognitionMessage::has_tasksavepath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotStatusMessage_ImageRecognitionMessage::set_has_tasksavepath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotStatusMessage_ImageRecognitionMessage::clear_has_tasksavepath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotStatusMessage_ImageRecognitionMessage::clear_tasksavepath() {
  tasksavepath_ = 0;
  clear_has_tasksavepath();
}
inline ::google::protobuf::int32 RobotStatusMessage_ImageRecognitionMessage::tasksavepath() const {
  return tasksavepath_;
}
inline void RobotStatusMessage_ImageRecognitionMessage::set_tasksavepath(::google::protobuf::int32 value) {
  set_has_tasksavepath();
  tasksavepath_ = value;
}

// -------------------------------------------------------------------

// RobotStatusMessage_OnlineMessage

// optional int32 CameraServiceonline = 1;
inline bool RobotStatusMessage_OnlineMessage::has_cameraserviceonline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStatusMessage_OnlineMessage::set_has_cameraserviceonline() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStatusMessage_OnlineMessage::clear_has_cameraserviceonline() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotStatusMessage_OnlineMessage::clear_cameraserviceonline() {
  cameraserviceonline_ = 0;
  clear_has_cameraserviceonline();
}
inline ::google::protobuf::int32 RobotStatusMessage_OnlineMessage::cameraserviceonline() const {
  return cameraserviceonline_;
}
inline void RobotStatusMessage_OnlineMessage::set_cameraserviceonline(::google::protobuf::int32 value) {
  set_has_cameraserviceonline();
  cameraserviceonline_ = value;
}

// optional int32 RoutePlanNavionline = 2;
inline bool RobotStatusMessage_OnlineMessage::has_routeplannavionline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotStatusMessage_OnlineMessage::set_has_routeplannavionline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotStatusMessage_OnlineMessage::clear_has_routeplannavionline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotStatusMessage_OnlineMessage::clear_routeplannavionline() {
  routeplannavionline_ = 0;
  clear_has_routeplannavionline();
}
inline ::google::protobuf::int32 RobotStatusMessage_OnlineMessage::routeplannavionline() const {
  return routeplannavionline_;
}
inline void RobotStatusMessage_OnlineMessage::set_routeplannavionline(::google::protobuf::int32 value) {
  set_has_routeplannavionline();
  routeplannavionline_ = value;
}

// optional int32 PanTiltCtrlonline = 3;
inline bool RobotStatusMessage_OnlineMessage::has_pantiltctrlonline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotStatusMessage_OnlineMessage::set_has_pantiltctrlonline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotStatusMessage_OnlineMessage::clear_has_pantiltctrlonline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotStatusMessage_OnlineMessage::clear_pantiltctrlonline() {
  pantiltctrlonline_ = 0;
  clear_has_pantiltctrlonline();
}
inline ::google::protobuf::int32 RobotStatusMessage_OnlineMessage::pantiltctrlonline() const {
  return pantiltctrlonline_;
}
inline void RobotStatusMessage_OnlineMessage::set_pantiltctrlonline(::google::protobuf::int32 value) {
  set_has_pantiltctrlonline();
  pantiltctrlonline_ = value;
}

// optional int32 ImageRecognitiononline = 4;
inline bool RobotStatusMessage_OnlineMessage::has_imagerecognitiononline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotStatusMessage_OnlineMessage::set_has_imagerecognitiononline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotStatusMessage_OnlineMessage::clear_has_imagerecognitiononline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotStatusMessage_OnlineMessage::clear_imagerecognitiononline() {
  imagerecognitiononline_ = 0;
  clear_has_imagerecognitiononline();
}
inline ::google::protobuf::int32 RobotStatusMessage_OnlineMessage::imagerecognitiononline() const {
  return imagerecognitiononline_;
}
inline void RobotStatusMessage_OnlineMessage::set_imagerecognitiononline(::google::protobuf::int32 value) {
  set_has_imagerecognitiononline();
  imagerecognitiononline_ = value;
}

// optional int32 DriverCtrlonline = 5;
inline bool RobotStatusMessage_OnlineMessage::has_driverctrlonline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotStatusMessage_OnlineMessage::set_has_driverctrlonline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotStatusMessage_OnlineMessage::clear_has_driverctrlonline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotStatusMessage_OnlineMessage::clear_driverctrlonline() {
  driverctrlonline_ = 0;
  clear_has_driverctrlonline();
}
inline ::google::protobuf::int32 RobotStatusMessage_OnlineMessage::driverctrlonline() const {
  return driverctrlonline_;
}
inline void RobotStatusMessage_OnlineMessage::set_driverctrlonline(::google::protobuf::int32 value) {
  set_has_driverctrlonline();
  driverctrlonline_ = value;
}

// optional int32 A310Cameraonline = 6;
inline bool RobotStatusMessage_OnlineMessage::has_a310cameraonline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RobotStatusMessage_OnlineMessage::set_has_a310cameraonline() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RobotStatusMessage_OnlineMessage::clear_has_a310cameraonline() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RobotStatusMessage_OnlineMessage::clear_a310cameraonline() {
  a310cameraonline_ = 0;
  clear_has_a310cameraonline();
}
inline ::google::protobuf::int32 RobotStatusMessage_OnlineMessage::a310cameraonline() const {
  return a310cameraonline_;
}
inline void RobotStatusMessage_OnlineMessage::set_a310cameraonline(::google::protobuf::int32 value) {
  set_has_a310cameraonline();
  a310cameraonline_ = value;
}

// optional int32 NormalCameraonline = 7;
inline bool RobotStatusMessage_OnlineMessage::has_normalcameraonline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RobotStatusMessage_OnlineMessage::set_has_normalcameraonline() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RobotStatusMessage_OnlineMessage::clear_has_normalcameraonline() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RobotStatusMessage_OnlineMessage::clear_normalcameraonline() {
  normalcameraonline_ = 0;
  clear_has_normalcameraonline();
}
inline ::google::protobuf::int32 RobotStatusMessage_OnlineMessage::normalcameraonline() const {
  return normalcameraonline_;
}
inline void RobotStatusMessage_OnlineMessage::set_normalcameraonline(::google::protobuf::int32 value) {
  set_has_normalcameraonline();
  normalcameraonline_ = value;
}

// -------------------------------------------------------------------

// RobotStatusMessage_RoutePlanNaviMessage

// optional int32 CurrentPosition = 1;
inline bool RobotStatusMessage_RoutePlanNaviMessage::has_currentposition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::set_has_currentposition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::clear_has_currentposition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::clear_currentposition() {
  currentposition_ = 0;
  clear_has_currentposition();
}
inline ::google::protobuf::int32 RobotStatusMessage_RoutePlanNaviMessage::currentposition() const {
  return currentposition_;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::set_currentposition(::google::protobuf::int32 value) {
  set_has_currentposition();
  currentposition_ = value;
}

// optional int32 CurrentLine = 2;
inline bool RobotStatusMessage_RoutePlanNaviMessage::has_currentline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::set_has_currentline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::clear_has_currentline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::clear_currentline() {
  currentline_ = 0;
  clear_has_currentline();
}
inline ::google::protobuf::int32 RobotStatusMessage_RoutePlanNaviMessage::currentline() const {
  return currentline_;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::set_currentline(::google::protobuf::int32 value) {
  set_has_currentline();
  currentline_ = value;
}

// optional int32 PositionFinish = 3;
inline bool RobotStatusMessage_RoutePlanNaviMessage::has_positionfinish() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::set_has_positionfinish() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::clear_has_positionfinish() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::clear_positionfinish() {
  positionfinish_ = 0;
  clear_has_positionfinish();
}
inline ::google::protobuf::int32 RobotStatusMessage_RoutePlanNaviMessage::positionfinish() const {
  return positionfinish_;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::set_positionfinish(::google::protobuf::int32 value) {
  set_has_positionfinish();
  positionfinish_ = value;
}

// optional int32 CurrentTaskEndID = 4;
inline bool RobotStatusMessage_RoutePlanNaviMessage::has_currenttaskendid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::set_has_currenttaskendid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::clear_has_currenttaskendid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::clear_currenttaskendid() {
  currenttaskendid_ = 0;
  clear_has_currenttaskendid();
}
inline ::google::protobuf::int32 RobotStatusMessage_RoutePlanNaviMessage::currenttaskendid() const {
  return currenttaskendid_;
}
inline void RobotStatusMessage_RoutePlanNaviMessage::set_currenttaskendid(::google::protobuf::int32 value) {
  set_has_currenttaskendid();
  currenttaskendid_ = value;
}

// -------------------------------------------------------------------

// RobotStatusMessage_PanTiltCtrlMessage

// optional int32 PanTiltDevComo = 1;
inline bool RobotStatusMessage_PanTiltCtrlMessage::has_pantiltdevcomo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_has_pantiltdevcomo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_has_pantiltdevcomo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_pantiltdevcomo() {
  pantiltdevcomo_ = 0;
  clear_has_pantiltdevcomo();
}
inline ::google::protobuf::int32 RobotStatusMessage_PanTiltCtrlMessage::pantiltdevcomo() const {
  return pantiltdevcomo_;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_pantiltdevcomo(::google::protobuf::int32 value) {
  set_has_pantiltdevcomo();
  pantiltdevcomo_ = value;
}

// optional int32 PanPos = 2;
inline bool RobotStatusMessage_PanTiltCtrlMessage::has_panpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_has_panpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_has_panpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_panpos() {
  panpos_ = 0;
  clear_has_panpos();
}
inline ::google::protobuf::int32 RobotStatusMessage_PanTiltCtrlMessage::panpos() const {
  return panpos_;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_panpos(::google::protobuf::int32 value) {
  set_has_panpos();
  panpos_ = value;
}

// optional int32 TlitPos = 3;
inline bool RobotStatusMessage_PanTiltCtrlMessage::has_tlitpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_has_tlitpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_has_tlitpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_tlitpos() {
  tlitpos_ = 0;
  clear_has_tlitpos();
}
inline ::google::protobuf::int32 RobotStatusMessage_PanTiltCtrlMessage::tlitpos() const {
  return tlitpos_;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_tlitpos(::google::protobuf::int32 value) {
  set_has_tlitpos();
  tlitpos_ = value;
}

// optional int32 ZoomPos = 4;
inline bool RobotStatusMessage_PanTiltCtrlMessage::has_zoompos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_has_zoompos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_has_zoompos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_zoompos() {
  zoompos_ = 0;
  clear_has_zoompos();
}
inline ::google::protobuf::int32 RobotStatusMessage_PanTiltCtrlMessage::zoompos() const {
  return zoompos_;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_zoompos(::google::protobuf::int32 value) {
  set_has_zoompos();
  zoompos_ = value;
}

// optional int32 FocusPos = 5;
inline bool RobotStatusMessage_PanTiltCtrlMessage::has_focuspos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_has_focuspos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_has_focuspos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_focuspos() {
  focuspos_ = 0;
  clear_has_focuspos();
}
inline ::google::protobuf::int32 RobotStatusMessage_PanTiltCtrlMessage::focuspos() const {
  return focuspos_;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_focuspos(::google::protobuf::int32 value) {
  set_has_focuspos();
  focuspos_ = value;
}

// optional int32 WiperStauts = 6;
inline bool RobotStatusMessage_PanTiltCtrlMessage::has_wiperstauts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_has_wiperstauts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_has_wiperstauts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_wiperstauts() {
  wiperstauts_ = 0;
  clear_has_wiperstauts();
}
inline ::google::protobuf::int32 RobotStatusMessage_PanTiltCtrlMessage::wiperstauts() const {
  return wiperstauts_;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_wiperstauts(::google::protobuf::int32 value) {
  set_has_wiperstauts();
  wiperstauts_ = value;
}

// optional int32 FocusStauts = 7;
inline bool RobotStatusMessage_PanTiltCtrlMessage::has_focusstauts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_has_focusstauts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_has_focusstauts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::clear_focusstauts() {
  focusstauts_ = 0;
  clear_has_focusstauts();
}
inline ::google::protobuf::int32 RobotStatusMessage_PanTiltCtrlMessage::focusstauts() const {
  return focusstauts_;
}
inline void RobotStatusMessage_PanTiltCtrlMessage::set_focusstauts(::google::protobuf::int32 value) {
  set_has_focusstauts();
  focusstauts_ = value;
}

// -------------------------------------------------------------------

// RobotStatusMessage_ManagementSystemMessage

// optional string TaskID = 1;
inline bool RobotStatusMessage_ManagementSystemMessage::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStatusMessage_ManagementSystemMessage::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStatusMessage_ManagementSystemMessage::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotStatusMessage_ManagementSystemMessage::clear_taskid() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    taskid_->clear();
  }
  clear_has_taskid();
}
inline const ::std::string& RobotStatusMessage_ManagementSystemMessage::taskid() const {
  return *taskid_;
}
inline void RobotStatusMessage_ManagementSystemMessage::set_taskid(const ::std::string& value) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(value);
}
inline void RobotStatusMessage_ManagementSystemMessage::set_taskid(const char* value) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(value);
}
inline void RobotStatusMessage_ManagementSystemMessage::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotStatusMessage_ManagementSystemMessage::mutable_taskid() {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  return taskid_;
}
inline ::std::string* RobotStatusMessage_ManagementSystemMessage::release_taskid() {
  clear_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskid_;
    taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RobotStatusMessage_ManagementSystemMessage::set_allocated_taskid(::std::string* taskid) {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (taskid) {
    set_has_taskid();
    taskid_ = taskid;
  } else {
    clear_has_taskid();
    taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string TaskName = 2;
inline bool RobotStatusMessage_ManagementSystemMessage::has_taskname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotStatusMessage_ManagementSystemMessage::set_has_taskname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotStatusMessage_ManagementSystemMessage::clear_has_taskname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotStatusMessage_ManagementSystemMessage::clear_taskname() {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    taskname_->clear();
  }
  clear_has_taskname();
}
inline const ::std::string& RobotStatusMessage_ManagementSystemMessage::taskname() const {
  return *taskname_;
}
inline void RobotStatusMessage_ManagementSystemMessage::set_taskname(const ::std::string& value) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(value);
}
inline void RobotStatusMessage_ManagementSystemMessage::set_taskname(const char* value) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(value);
}
inline void RobotStatusMessage_ManagementSystemMessage::set_taskname(const char* value, size_t size) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotStatusMessage_ManagementSystemMessage::mutable_taskname() {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  return taskname_;
}
inline ::std::string* RobotStatusMessage_ManagementSystemMessage::release_taskname() {
  clear_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskname_;
    taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RobotStatusMessage_ManagementSystemMessage::set_allocated_taskname(::std::string* taskname) {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (taskname) {
    set_has_taskname();
    taskname_ = taskname;
  } else {
    clear_has_taskname();
    taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string MeterPointID = 3;
inline bool RobotStatusMessage_ManagementSystemMessage::has_meterpointid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotStatusMessage_ManagementSystemMessage::set_has_meterpointid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotStatusMessage_ManagementSystemMessage::clear_has_meterpointid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotStatusMessage_ManagementSystemMessage::clear_meterpointid() {
  if (meterpointid_ != &::google::protobuf::internal::kEmptyString) {
    meterpointid_->clear();
  }
  clear_has_meterpointid();
}
inline const ::std::string& RobotStatusMessage_ManagementSystemMessage::meterpointid() const {
  return *meterpointid_;
}
inline void RobotStatusMessage_ManagementSystemMessage::set_meterpointid(const ::std::string& value) {
  set_has_meterpointid();
  if (meterpointid_ == &::google::protobuf::internal::kEmptyString) {
    meterpointid_ = new ::std::string;
  }
  meterpointid_->assign(value);
}
inline void RobotStatusMessage_ManagementSystemMessage::set_meterpointid(const char* value) {
  set_has_meterpointid();
  if (meterpointid_ == &::google::protobuf::internal::kEmptyString) {
    meterpointid_ = new ::std::string;
  }
  meterpointid_->assign(value);
}
inline void RobotStatusMessage_ManagementSystemMessage::set_meterpointid(const char* value, size_t size) {
  set_has_meterpointid();
  if (meterpointid_ == &::google::protobuf::internal::kEmptyString) {
    meterpointid_ = new ::std::string;
  }
  meterpointid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotStatusMessage_ManagementSystemMessage::mutable_meterpointid() {
  set_has_meterpointid();
  if (meterpointid_ == &::google::protobuf::internal::kEmptyString) {
    meterpointid_ = new ::std::string;
  }
  return meterpointid_;
}
inline ::std::string* RobotStatusMessage_ManagementSystemMessage::release_meterpointid() {
  clear_has_meterpointid();
  if (meterpointid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = meterpointid_;
    meterpointid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RobotStatusMessage_ManagementSystemMessage::set_allocated_meterpointid(::std::string* meterpointid) {
  if (meterpointid_ != &::google::protobuf::internal::kEmptyString) {
    delete meterpointid_;
  }
  if (meterpointid) {
    set_has_meterpointid();
    meterpointid_ = meterpointid;
  } else {
    clear_has_meterpointid();
    meterpointid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string MeterPointName = 4;
inline bool RobotStatusMessage_ManagementSystemMessage::has_meterpointname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotStatusMessage_ManagementSystemMessage::set_has_meterpointname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotStatusMessage_ManagementSystemMessage::clear_has_meterpointname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotStatusMessage_ManagementSystemMessage::clear_meterpointname() {
  if (meterpointname_ != &::google::protobuf::internal::kEmptyString) {
    meterpointname_->clear();
  }
  clear_has_meterpointname();
}
inline const ::std::string& RobotStatusMessage_ManagementSystemMessage::meterpointname() const {
  return *meterpointname_;
}
inline void RobotStatusMessage_ManagementSystemMessage::set_meterpointname(const ::std::string& value) {
  set_has_meterpointname();
  if (meterpointname_ == &::google::protobuf::internal::kEmptyString) {
    meterpointname_ = new ::std::string;
  }
  meterpointname_->assign(value);
}
inline void RobotStatusMessage_ManagementSystemMessage::set_meterpointname(const char* value) {
  set_has_meterpointname();
  if (meterpointname_ == &::google::protobuf::internal::kEmptyString) {
    meterpointname_ = new ::std::string;
  }
  meterpointname_->assign(value);
}
inline void RobotStatusMessage_ManagementSystemMessage::set_meterpointname(const char* value, size_t size) {
  set_has_meterpointname();
  if (meterpointname_ == &::google::protobuf::internal::kEmptyString) {
    meterpointname_ = new ::std::string;
  }
  meterpointname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotStatusMessage_ManagementSystemMessage::mutable_meterpointname() {
  set_has_meterpointname();
  if (meterpointname_ == &::google::protobuf::internal::kEmptyString) {
    meterpointname_ = new ::std::string;
  }
  return meterpointname_;
}
inline ::std::string* RobotStatusMessage_ManagementSystemMessage::release_meterpointname() {
  clear_has_meterpointname();
  if (meterpointname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = meterpointname_;
    meterpointname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RobotStatusMessage_ManagementSystemMessage::set_allocated_meterpointname(::std::string* meterpointname) {
  if (meterpointname_ != &::google::protobuf::internal::kEmptyString) {
    delete meterpointname_;
  }
  if (meterpointname) {
    set_has_meterpointname();
    meterpointname_ = meterpointname;
  } else {
    clear_has_meterpointname();
    meterpointname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string StopPointid = 5;
inline bool RobotStatusMessage_ManagementSystemMessage::has_stoppointid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotStatusMessage_ManagementSystemMessage::set_has_stoppointid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotStatusMessage_ManagementSystemMessage::clear_has_stoppointid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotStatusMessage_ManagementSystemMessage::clear_stoppointid() {
  if (stoppointid_ != &::google::protobuf::internal::kEmptyString) {
    stoppointid_->clear();
  }
  clear_has_stoppointid();
}
inline const ::std::string& RobotStatusMessage_ManagementSystemMessage::stoppointid() const {
  return *stoppointid_;
}
inline void RobotStatusMessage_ManagementSystemMessage::set_stoppointid(const ::std::string& value) {
  set_has_stoppointid();
  if (stoppointid_ == &::google::protobuf::internal::kEmptyString) {
    stoppointid_ = new ::std::string;
  }
  stoppointid_->assign(value);
}
inline void RobotStatusMessage_ManagementSystemMessage::set_stoppointid(const char* value) {
  set_has_stoppointid();
  if (stoppointid_ == &::google::protobuf::internal::kEmptyString) {
    stoppointid_ = new ::std::string;
  }
  stoppointid_->assign(value);
}
inline void RobotStatusMessage_ManagementSystemMessage::set_stoppointid(const char* value, size_t size) {
  set_has_stoppointid();
  if (stoppointid_ == &::google::protobuf::internal::kEmptyString) {
    stoppointid_ = new ::std::string;
  }
  stoppointid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotStatusMessage_ManagementSystemMessage::mutable_stoppointid() {
  set_has_stoppointid();
  if (stoppointid_ == &::google::protobuf::internal::kEmptyString) {
    stoppointid_ = new ::std::string;
  }
  return stoppointid_;
}
inline ::std::string* RobotStatusMessage_ManagementSystemMessage::release_stoppointid() {
  clear_has_stoppointid();
  if (stoppointid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stoppointid_;
    stoppointid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RobotStatusMessage_ManagementSystemMessage::set_allocated_stoppointid(::std::string* stoppointid) {
  if (stoppointid_ != &::google::protobuf::internal::kEmptyString) {
    delete stoppointid_;
  }
  if (stoppointid) {
    set_has_stoppointid();
    stoppointid_ = stoppointid;
  } else {
    clear_has_stoppointid();
    stoppointid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RobotStatusMessage

// optional int32 Stat = 1;
inline bool RobotStatusMessage::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotStatusMessage::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotStatusMessage::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotStatusMessage::clear_stat() {
  stat_ = 0;
  clear_has_stat();
}
inline ::google::protobuf::int32 RobotStatusMessage::stat() const {
  return stat_;
}
inline void RobotStatusMessage::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
}

// optional .ControllerMessage Controller = 2;
inline bool RobotStatusMessage::has_controller() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotStatusMessage::set_has_controller() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotStatusMessage::clear_has_controller() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotStatusMessage::clear_controller() {
  if (controller_ != NULL) controller_->::ControllerMessage::Clear();
  clear_has_controller();
}
inline const ::ControllerMessage& RobotStatusMessage::controller() const {
  return controller_ != NULL ? *controller_ : *default_instance_->controller_;
}
inline ::ControllerMessage* RobotStatusMessage::mutable_controller() {
  set_has_controller();
  if (controller_ == NULL) controller_ = new ::ControllerMessage;
  return controller_;
}
inline ::ControllerMessage* RobotStatusMessage::release_controller() {
  clear_has_controller();
  ::ControllerMessage* temp = controller_;
  controller_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_controller(::ControllerMessage* controller) {
  delete controller_;
  controller_ = controller;
  if (controller) {
    set_has_controller();
  } else {
    clear_has_controller();
  }
}

// optional .RobotStatusMessage.CameraServiceMessage CameraService = 3;
inline bool RobotStatusMessage::has_cameraservice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotStatusMessage::set_has_cameraservice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotStatusMessage::clear_has_cameraservice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotStatusMessage::clear_cameraservice() {
  if (cameraservice_ != NULL) cameraservice_->::RobotStatusMessage_CameraServiceMessage::Clear();
  clear_has_cameraservice();
}
inline const ::RobotStatusMessage_CameraServiceMessage& RobotStatusMessage::cameraservice() const {
  return cameraservice_ != NULL ? *cameraservice_ : *default_instance_->cameraservice_;
}
inline ::RobotStatusMessage_CameraServiceMessage* RobotStatusMessage::mutable_cameraservice() {
  set_has_cameraservice();
  if (cameraservice_ == NULL) cameraservice_ = new ::RobotStatusMessage_CameraServiceMessage;
  return cameraservice_;
}
inline ::RobotStatusMessage_CameraServiceMessage* RobotStatusMessage::release_cameraservice() {
  clear_has_cameraservice();
  ::RobotStatusMessage_CameraServiceMessage* temp = cameraservice_;
  cameraservice_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_cameraservice(::RobotStatusMessage_CameraServiceMessage* cameraservice) {
  delete cameraservice_;
  cameraservice_ = cameraservice;
  if (cameraservice) {
    set_has_cameraservice();
  } else {
    clear_has_cameraservice();
  }
}

// optional .RobotStatusMessage.OnlineMessage OnlineMSg = 4;
inline bool RobotStatusMessage::has_onlinemsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotStatusMessage::set_has_onlinemsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotStatusMessage::clear_has_onlinemsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotStatusMessage::clear_onlinemsg() {
  if (onlinemsg_ != NULL) onlinemsg_->::RobotStatusMessage_OnlineMessage::Clear();
  clear_has_onlinemsg();
}
inline const ::RobotStatusMessage_OnlineMessage& RobotStatusMessage::onlinemsg() const {
  return onlinemsg_ != NULL ? *onlinemsg_ : *default_instance_->onlinemsg_;
}
inline ::RobotStatusMessage_OnlineMessage* RobotStatusMessage::mutable_onlinemsg() {
  set_has_onlinemsg();
  if (onlinemsg_ == NULL) onlinemsg_ = new ::RobotStatusMessage_OnlineMessage;
  return onlinemsg_;
}
inline ::RobotStatusMessage_OnlineMessage* RobotStatusMessage::release_onlinemsg() {
  clear_has_onlinemsg();
  ::RobotStatusMessage_OnlineMessage* temp = onlinemsg_;
  onlinemsg_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_onlinemsg(::RobotStatusMessage_OnlineMessage* onlinemsg) {
  delete onlinemsg_;
  onlinemsg_ = onlinemsg;
  if (onlinemsg) {
    set_has_onlinemsg();
  } else {
    clear_has_onlinemsg();
  }
}

// optional .RobotStatusMessage.RoutePlanNaviMessage RoutePlanNavi = 5;
inline bool RobotStatusMessage::has_routeplannavi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotStatusMessage::set_has_routeplannavi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotStatusMessage::clear_has_routeplannavi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotStatusMessage::clear_routeplannavi() {
  if (routeplannavi_ != NULL) routeplannavi_->::RobotStatusMessage_RoutePlanNaviMessage::Clear();
  clear_has_routeplannavi();
}
inline const ::RobotStatusMessage_RoutePlanNaviMessage& RobotStatusMessage::routeplannavi() const {
  return routeplannavi_ != NULL ? *routeplannavi_ : *default_instance_->routeplannavi_;
}
inline ::RobotStatusMessage_RoutePlanNaviMessage* RobotStatusMessage::mutable_routeplannavi() {
  set_has_routeplannavi();
  if (routeplannavi_ == NULL) routeplannavi_ = new ::RobotStatusMessage_RoutePlanNaviMessage;
  return routeplannavi_;
}
inline ::RobotStatusMessage_RoutePlanNaviMessage* RobotStatusMessage::release_routeplannavi() {
  clear_has_routeplannavi();
  ::RobotStatusMessage_RoutePlanNaviMessage* temp = routeplannavi_;
  routeplannavi_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_routeplannavi(::RobotStatusMessage_RoutePlanNaviMessage* routeplannavi) {
  delete routeplannavi_;
  routeplannavi_ = routeplannavi;
  if (routeplannavi) {
    set_has_routeplannavi();
  } else {
    clear_has_routeplannavi();
  }
}

// optional .RobotStatusMessage.ImageRecognitionMessage ImageRecognition = 6;
inline bool RobotStatusMessage::has_imagerecognition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RobotStatusMessage::set_has_imagerecognition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RobotStatusMessage::clear_has_imagerecognition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RobotStatusMessage::clear_imagerecognition() {
  if (imagerecognition_ != NULL) imagerecognition_->::RobotStatusMessage_ImageRecognitionMessage::Clear();
  clear_has_imagerecognition();
}
inline const ::RobotStatusMessage_ImageRecognitionMessage& RobotStatusMessage::imagerecognition() const {
  return imagerecognition_ != NULL ? *imagerecognition_ : *default_instance_->imagerecognition_;
}
inline ::RobotStatusMessage_ImageRecognitionMessage* RobotStatusMessage::mutable_imagerecognition() {
  set_has_imagerecognition();
  if (imagerecognition_ == NULL) imagerecognition_ = new ::RobotStatusMessage_ImageRecognitionMessage;
  return imagerecognition_;
}
inline ::RobotStatusMessage_ImageRecognitionMessage* RobotStatusMessage::release_imagerecognition() {
  clear_has_imagerecognition();
  ::RobotStatusMessage_ImageRecognitionMessage* temp = imagerecognition_;
  imagerecognition_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_imagerecognition(::RobotStatusMessage_ImageRecognitionMessage* imagerecognition) {
  delete imagerecognition_;
  imagerecognition_ = imagerecognition;
  if (imagerecognition) {
    set_has_imagerecognition();
  } else {
    clear_has_imagerecognition();
  }
}

// optional .RobotStatusMessage.ManagementSystemMessage ManagementSystem = 7;
inline bool RobotStatusMessage::has_managementsystem() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RobotStatusMessage::set_has_managementsystem() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RobotStatusMessage::clear_has_managementsystem() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RobotStatusMessage::clear_managementsystem() {
  if (managementsystem_ != NULL) managementsystem_->::RobotStatusMessage_ManagementSystemMessage::Clear();
  clear_has_managementsystem();
}
inline const ::RobotStatusMessage_ManagementSystemMessage& RobotStatusMessage::managementsystem() const {
  return managementsystem_ != NULL ? *managementsystem_ : *default_instance_->managementsystem_;
}
inline ::RobotStatusMessage_ManagementSystemMessage* RobotStatusMessage::mutable_managementsystem() {
  set_has_managementsystem();
  if (managementsystem_ == NULL) managementsystem_ = new ::RobotStatusMessage_ManagementSystemMessage;
  return managementsystem_;
}
inline ::RobotStatusMessage_ManagementSystemMessage* RobotStatusMessage::release_managementsystem() {
  clear_has_managementsystem();
  ::RobotStatusMessage_ManagementSystemMessage* temp = managementsystem_;
  managementsystem_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_managementsystem(::RobotStatusMessage_ManagementSystemMessage* managementsystem) {
  delete managementsystem_;
  managementsystem_ = managementsystem;
  if (managementsystem) {
    set_has_managementsystem();
  } else {
    clear_has_managementsystem();
  }
}

// optional .RobotStatusMessage.PanTiltCtrlMessage PanTiltCtrl = 8;
inline bool RobotStatusMessage::has_pantiltctrl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RobotStatusMessage::set_has_pantiltctrl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RobotStatusMessage::clear_has_pantiltctrl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RobotStatusMessage::clear_pantiltctrl() {
  if (pantiltctrl_ != NULL) pantiltctrl_->::RobotStatusMessage_PanTiltCtrlMessage::Clear();
  clear_has_pantiltctrl();
}
inline const ::RobotStatusMessage_PanTiltCtrlMessage& RobotStatusMessage::pantiltctrl() const {
  return pantiltctrl_ != NULL ? *pantiltctrl_ : *default_instance_->pantiltctrl_;
}
inline ::RobotStatusMessage_PanTiltCtrlMessage* RobotStatusMessage::mutable_pantiltctrl() {
  set_has_pantiltctrl();
  if (pantiltctrl_ == NULL) pantiltctrl_ = new ::RobotStatusMessage_PanTiltCtrlMessage;
  return pantiltctrl_;
}
inline ::RobotStatusMessage_PanTiltCtrlMessage* RobotStatusMessage::release_pantiltctrl() {
  clear_has_pantiltctrl();
  ::RobotStatusMessage_PanTiltCtrlMessage* temp = pantiltctrl_;
  pantiltctrl_ = NULL;
  return temp;
}
inline void RobotStatusMessage::set_allocated_pantiltctrl(::RobotStatusMessage_PanTiltCtrlMessage* pantiltctrl) {
  delete pantiltctrl_;
  pantiltctrl_ = pantiltctrl;
  if (pantiltctrl) {
    set_has_pantiltctrl();
  } else {
    clear_has_pantiltctrl();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RobotStatusMessage_2eproto__INCLUDED
