/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: WeatherMessage.proto */

#ifndef PROTOBUF_C_WeatherMessage_2eproto__INCLUDED
#define PROTOBUF_C_WeatherMessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _WeatherMessage WeatherMessage;
typedef struct _WeatherMessage__GPS WeatherMessage__GPS;
typedef struct _WeatherMessage__DateTime WeatherMessage__DateTime;


/* --- enums --- */


/* --- messages --- */

struct  _WeatherMessage__GPS
{
  ProtobufCMessage base;
  /*
   *����
   */
  protobuf_c_boolean has_la;
  float la;
  /*
   *γ��
   */
  protobuf_c_boolean has_lo;
  float lo;
  /*
   *GPS ʱ��
   */
  protobuf_c_boolean has_gpstime;
  int64_t gpstime;
};
#define WEATHER_MESSAGE__GPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&weather_message__gps__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _WeatherMessage__DateTime
{
  ProtobufCMessage base;
  protobuf_c_boolean has_year;
  int32_t year;
  protobuf_c_boolean has_month;
  int32_t month;
  protobuf_c_boolean has_day;
  int32_t day;
  protobuf_c_boolean has_hour;
  int32_t hour;
  protobuf_c_boolean has_miunte;
  int32_t miunte;
  protobuf_c_boolean has_second;
  int32_t second;
};
#define WEATHER_MESSAGE__DATE_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&weather_message__date_time__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _WeatherMessage
{
  ProtobufCMessage base;
  /*
   *1��������ͨ0δ��ͨ
   */
  protobuf_c_boolean has_online;
  int32_t online;
  /*
   *ƽ�����򣬵�λdeg
   */
  protobuf_c_boolean has_direction;
  float direction;
  /*
   *�����򣬵�λdeg
   */
  protobuf_c_boolean has_maxdir;
  float maxdir;
  /*
   *��С���򣬵�λdeg
   */
  protobuf_c_boolean has_minidir;
  float minidir;
  /*
   *ƽ�����٣���λm/s, km/h
   */
  protobuf_c_boolean has_speed;
  float speed;
  /*
   *�����٣���λm/s, km/h
   */
  protobuf_c_boolean has_maxspeed;
  float maxspeed;
  /*
   *��С���٣���λm/s, km/h
   */
  protobuf_c_boolean has_minispeed;
  float minispeed;
  /*
   *�¶ȣ���λC
   */
  protobuf_c_boolean has_temp;
  float temp;
  /*
   *ʪ�ȣ���λ%RH
   */
  protobuf_c_boolean has_humi;
  float humi;
  /*
   *��������λmm
   */
  protobuf_c_boolean has_rain;
  float rain;
  /*
   *��ѹ����λhPa, Pa, bar
   */
  protobuf_c_boolean has_pressure;
  float pressure;
  /*
   *����ǿ�ȣ���λmm/h
   */
  protobuf_c_boolean has_strength;
  float strength;
  WeatherMessage__GPS *gpsdate;
  WeatherMessage__DateTime *date;
};
#define WEATHER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&weather_message__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL }


/* WeatherMessage__GPS methods */
void   weather_message__gps__init
                     (WeatherMessage__GPS         *message);
/* WeatherMessage__DateTime methods */
void   weather_message__date_time__init
                     (WeatherMessage__DateTime         *message);
/* WeatherMessage methods */
void   weather_message__init
                     (WeatherMessage         *message);
size_t weather_message__get_packed_size
                     (const WeatherMessage   *message);
size_t weather_message__pack
                     (const WeatherMessage   *message,
                      uint8_t             *out);
size_t weather_message__pack_to_buffer
                     (const WeatherMessage   *message,
                      ProtobufCBuffer     *buffer);
WeatherMessage *
       weather_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   weather_message__free_unpacked
                     (WeatherMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*WeatherMessage__GPS_Closure)
                 (const WeatherMessage__GPS *message,
                  void *closure_data);
typedef void (*WeatherMessage__DateTime_Closure)
                 (const WeatherMessage__DateTime *message,
                  void *closure_data);
typedef void (*WeatherMessage_Closure)
                 (const WeatherMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor weather_message__descriptor;
extern const ProtobufCMessageDescriptor weather_message__gps__descriptor;
extern const ProtobufCMessageDescriptor weather_message__date_time__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_WeatherMessage_2eproto__INCLUDED */
