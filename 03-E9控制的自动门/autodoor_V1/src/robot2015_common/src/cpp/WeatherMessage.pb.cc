// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeatherMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WeatherMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WeatherMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeatherMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeatherMessage_GPS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeatherMessage_GPS_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeatherMessage_DateTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeatherMessage_DateTime_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WeatherMessage_2eproto() {
  protobuf_AddDesc_WeatherMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WeatherMessage.proto");
  GOOGLE_CHECK(file != NULL);
  WeatherMessage_descriptor_ = file->message_type(0);
  static const int WeatherMessage_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, maxdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, minidir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, maxspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, minispeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, humi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, rain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, gpsdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, date_),
  };
  WeatherMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeatherMessage_descriptor_,
      WeatherMessage::default_instance_,
      WeatherMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeatherMessage));
  WeatherMessage_GPS_descriptor_ = WeatherMessage_descriptor_->nested_type(0);
  static const int WeatherMessage_GPS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_GPS, la_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_GPS, lo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_GPS, gpstime_),
  };
  WeatherMessage_GPS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeatherMessage_GPS_descriptor_,
      WeatherMessage_GPS::default_instance_,
      WeatherMessage_GPS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_GPS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_GPS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeatherMessage_GPS));
  WeatherMessage_DateTime_descriptor_ = WeatherMessage_descriptor_->nested_type(1);
  static const int WeatherMessage_DateTime_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_DateTime, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_DateTime, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_DateTime, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_DateTime, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_DateTime, miunte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_DateTime, second_),
  };
  WeatherMessage_DateTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeatherMessage_DateTime_descriptor_,
      WeatherMessage_DateTime::default_instance_,
      WeatherMessage_DateTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_DateTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherMessage_DateTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeatherMessage_DateTime));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WeatherMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeatherMessage_descriptor_, &WeatherMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeatherMessage_GPS_descriptor_, &WeatherMessage_GPS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeatherMessage_DateTime_descriptor_, &WeatherMessage_DateTime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WeatherMessage_2eproto() {
  delete WeatherMessage::default_instance_;
  delete WeatherMessage_reflection_;
  delete WeatherMessage_GPS::default_instance_;
  delete WeatherMessage_GPS_reflection_;
  delete WeatherMessage_DateTime::default_instance_;
  delete WeatherMessage_DateTime_reflection_;
}

void protobuf_AddDesc_WeatherMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024WeatherMessage.proto\"\270\003\n\016WeatherMessag"
    "e\022\016\n\006Online\030\001 \001(\005\022\021\n\tDirection\030\002 \001(\002\022\016\n\006"
    "MaxDir\030\003 \001(\002\022\017\n\007MiniDir\030\004 \001(\002\022\r\n\005Speed\030\005"
    " \001(\002\022\020\n\010MaxSpeed\030\006 \001(\002\022\021\n\tMiniSpeed\030\007 \001("
    "\002\022\014\n\004Temp\030\010 \001(\002\022\014\n\004Humi\030\t \001(\002\022\014\n\004Rain\030\n "
    "\001(\002\022\020\n\010Pressure\030\013 \001(\002\022\020\n\010Strength\030\014 \001(\002\022"
    "$\n\007GPSdate\030\r \001(\0132\023.WeatherMessage.GPS\022&\n"
    "\004Date\030\016 \001(\0132\030.WeatherMessage.DateTime\032.\n"
    "\003GPS\022\n\n\002La\030\001 \001(\002\022\n\n\002Lo\030\002 \001(\002\022\017\n\007GPSTime\030"
    "\003 \001(\003\032b\n\010DateTime\022\014\n\004Year\030\001 \001(\005\022\r\n\005Month"
    "\030\002 \001(\005\022\013\n\003Day\030\003 \001(\005\022\014\n\004Hour\030\004 \001(\005\022\016\n\006Miu"
    "nte\030\005 \001(\005\022\016\n\006Second\030\006 \001(\005", 465);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WeatherMessage.proto", &protobuf_RegisterTypes);
  WeatherMessage::default_instance_ = new WeatherMessage();
  WeatherMessage_GPS::default_instance_ = new WeatherMessage_GPS();
  WeatherMessage_DateTime::default_instance_ = new WeatherMessage_DateTime();
  WeatherMessage::default_instance_->InitAsDefaultInstance();
  WeatherMessage_GPS::default_instance_->InitAsDefaultInstance();
  WeatherMessage_DateTime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WeatherMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WeatherMessage_2eproto {
  StaticDescriptorInitializer_WeatherMessage_2eproto() {
    protobuf_AddDesc_WeatherMessage_2eproto();
  }
} static_descriptor_initializer_WeatherMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WeatherMessage_GPS::kLaFieldNumber;
const int WeatherMessage_GPS::kLoFieldNumber;
const int WeatherMessage_GPS::kGPSTimeFieldNumber;
#endif  // !_MSC_VER

WeatherMessage_GPS::WeatherMessage_GPS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeatherMessage_GPS::InitAsDefaultInstance() {
}

WeatherMessage_GPS::WeatherMessage_GPS(const WeatherMessage_GPS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeatherMessage_GPS::SharedCtor() {
  _cached_size_ = 0;
  la_ = 0;
  lo_ = 0;
  gpstime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeatherMessage_GPS::~WeatherMessage_GPS() {
  SharedDtor();
}

void WeatherMessage_GPS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeatherMessage_GPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherMessage_GPS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeatherMessage_GPS_descriptor_;
}

const WeatherMessage_GPS& WeatherMessage_GPS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeatherMessage_2eproto();
  return *default_instance_;
}

WeatherMessage_GPS* WeatherMessage_GPS::default_instance_ = NULL;

WeatherMessage_GPS* WeatherMessage_GPS::New() const {
  return new WeatherMessage_GPS;
}

void WeatherMessage_GPS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    la_ = 0;
    lo_ = 0;
    gpstime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeatherMessage_GPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float La = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &la_)));
          set_has_la();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Lo;
        break;
      }

      // optional float Lo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Lo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lo_)));
          set_has_lo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GPSTime;
        break;
      }

      // optional int64 GPSTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GPSTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gpstime_)));
          set_has_gpstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeatherMessage_GPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float La = 1;
  if (has_la()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->la(), output);
  }

  // optional float Lo = 2;
  if (has_lo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lo(), output);
  }

  // optional int64 GPSTime = 3;
  if (has_gpstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gpstime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeatherMessage_GPS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float La = 1;
  if (has_la()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->la(), target);
  }

  // optional float Lo = 2;
  if (has_lo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lo(), target);
  }

  // optional int64 GPSTime = 3;
  if (has_gpstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gpstime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeatherMessage_GPS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float La = 1;
    if (has_la()) {
      total_size += 1 + 4;
    }

    // optional float Lo = 2;
    if (has_lo()) {
      total_size += 1 + 4;
    }

    // optional int64 GPSTime = 3;
    if (has_gpstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gpstime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherMessage_GPS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeatherMessage_GPS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeatherMessage_GPS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeatherMessage_GPS::MergeFrom(const WeatherMessage_GPS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_la()) {
      set_la(from.la());
    }
    if (from.has_lo()) {
      set_lo(from.lo());
    }
    if (from.has_gpstime()) {
      set_gpstime(from.gpstime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeatherMessage_GPS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherMessage_GPS::CopyFrom(const WeatherMessage_GPS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherMessage_GPS::IsInitialized() const {

  return true;
}

void WeatherMessage_GPS::Swap(WeatherMessage_GPS* other) {
  if (other != this) {
    std::swap(la_, other->la_);
    std::swap(lo_, other->lo_);
    std::swap(gpstime_, other->gpstime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeatherMessage_GPS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeatherMessage_GPS_descriptor_;
  metadata.reflection = WeatherMessage_GPS_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WeatherMessage_DateTime::kYearFieldNumber;
const int WeatherMessage_DateTime::kMonthFieldNumber;
const int WeatherMessage_DateTime::kDayFieldNumber;
const int WeatherMessage_DateTime::kHourFieldNumber;
const int WeatherMessage_DateTime::kMiunteFieldNumber;
const int WeatherMessage_DateTime::kSecondFieldNumber;
#endif  // !_MSC_VER

WeatherMessage_DateTime::WeatherMessage_DateTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeatherMessage_DateTime::InitAsDefaultInstance() {
}

WeatherMessage_DateTime::WeatherMessage_DateTime(const WeatherMessage_DateTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeatherMessage_DateTime::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0;
  month_ = 0;
  day_ = 0;
  hour_ = 0;
  miunte_ = 0;
  second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeatherMessage_DateTime::~WeatherMessage_DateTime() {
  SharedDtor();
}

void WeatherMessage_DateTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeatherMessage_DateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherMessage_DateTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeatherMessage_DateTime_descriptor_;
}

const WeatherMessage_DateTime& WeatherMessage_DateTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeatherMessage_2eproto();
  return *default_instance_;
}

WeatherMessage_DateTime* WeatherMessage_DateTime::default_instance_ = NULL;

WeatherMessage_DateTime* WeatherMessage_DateTime::New() const {
  return new WeatherMessage_DateTime;
}

void WeatherMessage_DateTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    year_ = 0;
    month_ = 0;
    day_ = 0;
    hour_ = 0;
    miunte_ = 0;
    second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeatherMessage_DateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Year = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Month;
        break;
      }

      // optional int32 Month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Day;
        break;
      }

      // optional int32 Day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Hour;
        break;
      }

      // optional int32 Hour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Miunte;
        break;
      }

      // optional int32 Miunte = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Miunte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &miunte_)));
          set_has_miunte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Second;
        break;
      }

      // optional int32 Second = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeatherMessage_DateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // optional int32 Month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // optional int32 Day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // optional int32 Hour = 4;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hour(), output);
  }

  // optional int32 Miunte = 5;
  if (has_miunte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->miunte(), output);
  }

  // optional int32 Second = 6;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeatherMessage_DateTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Year = 1;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // optional int32 Month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // optional int32 Day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // optional int32 Hour = 4;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hour(), target);
  }

  // optional int32 Miunte = 5;
  if (has_miunte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->miunte(), target);
  }

  // optional int32 Second = 6;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeatherMessage_DateTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 Month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 Day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 Hour = 4;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hour());
    }

    // optional int32 Miunte = 5;
    if (has_miunte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->miunte());
    }

    // optional int32 Second = 6;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherMessage_DateTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeatherMessage_DateTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeatherMessage_DateTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeatherMessage_DateTime::MergeFrom(const WeatherMessage_DateTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_miunte()) {
      set_miunte(from.miunte());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeatherMessage_DateTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherMessage_DateTime::CopyFrom(const WeatherMessage_DateTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherMessage_DateTime::IsInitialized() const {

  return true;
}

void WeatherMessage_DateTime::Swap(WeatherMessage_DateTime* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(miunte_, other->miunte_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeatherMessage_DateTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeatherMessage_DateTime_descriptor_;
  metadata.reflection = WeatherMessage_DateTime_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WeatherMessage::kOnlineFieldNumber;
const int WeatherMessage::kDirectionFieldNumber;
const int WeatherMessage::kMaxDirFieldNumber;
const int WeatherMessage::kMiniDirFieldNumber;
const int WeatherMessage::kSpeedFieldNumber;
const int WeatherMessage::kMaxSpeedFieldNumber;
const int WeatherMessage::kMiniSpeedFieldNumber;
const int WeatherMessage::kTempFieldNumber;
const int WeatherMessage::kHumiFieldNumber;
const int WeatherMessage::kRainFieldNumber;
const int WeatherMessage::kPressureFieldNumber;
const int WeatherMessage::kStrengthFieldNumber;
const int WeatherMessage::kGPSdateFieldNumber;
const int WeatherMessage::kDateFieldNumber;
#endif  // !_MSC_VER

WeatherMessage::WeatherMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeatherMessage::InitAsDefaultInstance() {
  gpsdate_ = const_cast< ::WeatherMessage_GPS*>(&::WeatherMessage_GPS::default_instance());
  date_ = const_cast< ::WeatherMessage_DateTime*>(&::WeatherMessage_DateTime::default_instance());
}

WeatherMessage::WeatherMessage(const WeatherMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeatherMessage::SharedCtor() {
  _cached_size_ = 0;
  online_ = 0;
  direction_ = 0;
  maxdir_ = 0;
  minidir_ = 0;
  speed_ = 0;
  maxspeed_ = 0;
  minispeed_ = 0;
  temp_ = 0;
  humi_ = 0;
  rain_ = 0;
  pressure_ = 0;
  strength_ = 0;
  gpsdate_ = NULL;
  date_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeatherMessage::~WeatherMessage() {
  SharedDtor();
}

void WeatherMessage::SharedDtor() {
  if (this != default_instance_) {
    delete gpsdate_;
    delete date_;
  }
}

void WeatherMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeatherMessage_descriptor_;
}

const WeatherMessage& WeatherMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeatherMessage_2eproto();
  return *default_instance_;
}

WeatherMessage* WeatherMessage::default_instance_ = NULL;

WeatherMessage* WeatherMessage::New() const {
  return new WeatherMessage;
}

void WeatherMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_ = 0;
    direction_ = 0;
    maxdir_ = 0;
    minidir_ = 0;
    speed_ = 0;
    maxspeed_ = 0;
    minispeed_ = 0;
    temp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    humi_ = 0;
    rain_ = 0;
    pressure_ = 0;
    strength_ = 0;
    if (has_gpsdate()) {
      if (gpsdate_ != NULL) gpsdate_->::WeatherMessage_GPS::Clear();
    }
    if (has_date()) {
      if (date_ != NULL) date_->::WeatherMessage_DateTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeatherMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Online = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Direction;
        break;
      }

      // optional float Direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_MaxDir;
        break;
      }

      // optional float MaxDir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MaxDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxdir_)));
          set_has_maxdir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_MiniDir;
        break;
      }

      // optional float MiniDir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MiniDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minidir_)));
          set_has_minidir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Speed;
        break;
      }

      // optional float Speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_MaxSpeed;
        break;
      }

      // optional float MaxSpeed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MaxSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxspeed_)));
          set_has_maxspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_MiniSpeed;
        break;
      }

      // optional float MiniSpeed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MiniSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minispeed_)));
          set_has_minispeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_Temp;
        break;
      }

      // optional float Temp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_Humi;
        break;
      }

      // optional float Humi = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Humi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &humi_)));
          set_has_humi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_Rain;
        break;
      }

      // optional float Rain = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Rain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rain_)));
          set_has_rain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_Pressure;
        break;
      }

      // optional float Pressure = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pressure_)));
          set_has_pressure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_Strength;
        break;
      }

      // optional float Strength = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_GPSdate;
        break;
      }

      // optional .WeatherMessage.GPS GPSdate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GPSdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpsdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_Date;
        break;
      }

      // optional .WeatherMessage.DateTime Date = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeatherMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Online = 1;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->online(), output);
  }

  // optional float Direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->direction(), output);
  }

  // optional float MaxDir = 3;
  if (has_maxdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxdir(), output);
  }

  // optional float MiniDir = 4;
  if (has_minidir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->minidir(), output);
  }

  // optional float Speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // optional float MaxSpeed = 6;
  if (has_maxspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->maxspeed(), output);
  }

  // optional float MiniSpeed = 7;
  if (has_minispeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->minispeed(), output);
  }

  // optional float Temp = 8;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->temp(), output);
  }

  // optional float Humi = 9;
  if (has_humi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->humi(), output);
  }

  // optional float Rain = 10;
  if (has_rain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->rain(), output);
  }

  // optional float Pressure = 11;
  if (has_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->pressure(), output);
  }

  // optional float Strength = 12;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->strength(), output);
  }

  // optional .WeatherMessage.GPS GPSdate = 13;
  if (has_gpsdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->gpsdate(), output);
  }

  // optional .WeatherMessage.DateTime Date = 14;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeatherMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Online = 1;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->online(), target);
  }

  // optional float Direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->direction(), target);
  }

  // optional float MaxDir = 3;
  if (has_maxdir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxdir(), target);
  }

  // optional float MiniDir = 4;
  if (has_minidir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->minidir(), target);
  }

  // optional float Speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  // optional float MaxSpeed = 6;
  if (has_maxspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->maxspeed(), target);
  }

  // optional float MiniSpeed = 7;
  if (has_minispeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->minispeed(), target);
  }

  // optional float Temp = 8;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->temp(), target);
  }

  // optional float Humi = 9;
  if (has_humi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->humi(), target);
  }

  // optional float Rain = 10;
  if (has_rain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->rain(), target);
  }

  // optional float Pressure = 11;
  if (has_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->pressure(), target);
  }

  // optional float Strength = 12;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->strength(), target);
  }

  // optional .WeatherMessage.GPS GPSdate = 13;
  if (has_gpsdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->gpsdate(), target);
  }

  // optional .WeatherMessage.DateTime Date = 14;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeatherMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Online = 1;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional float Direction = 2;
    if (has_direction()) {
      total_size += 1 + 4;
    }

    // optional float MaxDir = 3;
    if (has_maxdir()) {
      total_size += 1 + 4;
    }

    // optional float MiniDir = 4;
    if (has_minidir()) {
      total_size += 1 + 4;
    }

    // optional float Speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional float MaxSpeed = 6;
    if (has_maxspeed()) {
      total_size += 1 + 4;
    }

    // optional float MiniSpeed = 7;
    if (has_minispeed()) {
      total_size += 1 + 4;
    }

    // optional float Temp = 8;
    if (has_temp()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float Humi = 9;
    if (has_humi()) {
      total_size += 1 + 4;
    }

    // optional float Rain = 10;
    if (has_rain()) {
      total_size += 1 + 4;
    }

    // optional float Pressure = 11;
    if (has_pressure()) {
      total_size += 1 + 4;
    }

    // optional float Strength = 12;
    if (has_strength()) {
      total_size += 1 + 4;
    }

    // optional .WeatherMessage.GPS GPSdate = 13;
    if (has_gpsdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpsdate());
    }

    // optional .WeatherMessage.DateTime Date = 14;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeatherMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeatherMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeatherMessage::MergeFrom(const WeatherMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_maxdir()) {
      set_maxdir(from.maxdir());
    }
    if (from.has_minidir()) {
      set_minidir(from.minidir());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_maxspeed()) {
      set_maxspeed(from.maxspeed());
    }
    if (from.has_minispeed()) {
      set_minispeed(from.minispeed());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_humi()) {
      set_humi(from.humi());
    }
    if (from.has_rain()) {
      set_rain(from.rain());
    }
    if (from.has_pressure()) {
      set_pressure(from.pressure());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_gpsdate()) {
      mutable_gpsdate()->::WeatherMessage_GPS::MergeFrom(from.gpsdate());
    }
    if (from.has_date()) {
      mutable_date()->::WeatherMessage_DateTime::MergeFrom(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeatherMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherMessage::CopyFrom(const WeatherMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherMessage::IsInitialized() const {

  return true;
}

void WeatherMessage::Swap(WeatherMessage* other) {
  if (other != this) {
    std::swap(online_, other->online_);
    std::swap(direction_, other->direction_);
    std::swap(maxdir_, other->maxdir_);
    std::swap(minidir_, other->minidir_);
    std::swap(speed_, other->speed_);
    std::swap(maxspeed_, other->maxspeed_);
    std::swap(minispeed_, other->minispeed_);
    std::swap(temp_, other->temp_);
    std::swap(humi_, other->humi_);
    std::swap(rain_, other->rain_);
    std::swap(pressure_, other->pressure_);
    std::swap(strength_, other->strength_);
    std::swap(gpsdate_, other->gpsdate_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeatherMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeatherMessage_descriptor_;
  metadata.reflection = WeatherMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
